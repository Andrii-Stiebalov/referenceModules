{"ast":null,"code":"export default {\n  data() {\n    return {\n      listOfSelectedKeyCode: [],\n      selectedComb: \"\",\n      blockedKeys: [27, 122, 112],\n      keyNameToCode: {\n        Backspace: 8,\n        Tab: 9,\n        Enter: 13,\n        Shift: 16,\n        Ctrl: 17,\n        Alt: 18,\n        CapsLock: 20,\n        Escape: 27,\n        Space: 32,\n        PageUp: 33,\n        PageDown: 34,\n        End: 35,\n        Home: 36,\n        ArrowLeft: 37,\n        ArrowUp: 38,\n        ArrowRight: 39,\n        ArrowDown: 40,\n        Insert: 45,\n        Delete: 46,\n        0: 48,\n        1: 49,\n        2: 50,\n        3: 51,\n        4: 52,\n        5: 53,\n        6: 54,\n        7: 55,\n        8: 56,\n        9: 57,\n        A: 65,\n        B: 66,\n        C: 67,\n        D: 68,\n        E: 69,\n        F: 70,\n        G: 71,\n        H: 72,\n        I: 73,\n        J: 74,\n        K: 75,\n        L: 76,\n        M: 77,\n        N: 78,\n        O: 79,\n        P: 80,\n        Q: 81,\n        R: 82,\n        S: 83,\n        T: 84,\n        U: 85,\n        V: 86,\n        W: 87,\n        X: 88,\n        Y: 89,\n        Z: 90,\n        Meta: 91,\n        // Windows/Command ключ\n        ContextMenu: 93,\n        // Контекстное меню (правая кнопка мыши)\n        Numpad0: 96,\n        Numpad1: 97,\n        Numpad2: 98,\n        Numpad3: 99,\n        Numpad4: 100,\n        Numpad5: 101,\n        Numpad6: 102,\n        Numpad7: 103,\n        Numpad8: 104,\n        Numpad9: 105,\n        NumpadMultiply: 106,\n        NumpadAdd: 107,\n        NumpadSubtract: 109,\n        NumpadDecimal: 110,\n        NumpadDivide: 111,\n        F1: 112,\n        F2: 113,\n        F3: 114,\n        F4: 115,\n        F5: 116,\n        F6: 117,\n        F7: 118,\n        F8: 119,\n        F9: 120,\n        F10: 121,\n        F11: 122,\n        F12: 123,\n        NumLock: 144,\n        ScrollLock: 145,\n        Semicolon: 186,\n        Equal: 187,\n        Comma: 188,\n        Minus: 189,\n        Period: 190,\n        Slash: 191,\n        \"~\": 192,\n        BracketLeft: 219,\n        Backslash: 220,\n        BracketRight: 221,\n        Quote: 222,\n        MetaLeft: 224,\n        // Левый Windows/Command ключ\n        MetaRight: 225 // Правый Windows/Command ключ\n      }\n    };\n  },\n  props: {\n    disabled: Boolean,\n    bindData: Object,\n    bindKey: Function,\n    selectedBind: Object\n  },\n  watch: {\n    bindData: {\n      deep: true,\n      handler() {\n        setTimeout(() => this.setSelected());\n        console.log(this.bindData);\n      }\n    },\n    selectedComb() {\n      setTimeout(() => this.setSelected());\n    },\n    selectedBind(val, oldVal) {\n      if (oldVal && oldVal.key > 0) {\n        const oldkey = document.getElementById(`key-${oldVal.key}`).parentNode;\n        oldkey.classList.remove(\"selected\");\n      }\n      if (!val || val.key < 0) {\n        return;\n      }\n      if (this.getTrueKey(val.comb)) {\n        this.selectedComb = this.getTrueKey(val.comb);\n      } else {\n        this.selectedComb = \"\";\n      }\n      const key = document.getElementById(`key-${val.key}`).parentNode;\n      key.classList.add(\"selected\");\n    }\n  },\n  computed: {\n    getListOfKeys() {\n      const nodeList = document.querySelectorAll(\"[id]\");\n      const arrOfElems = Array.from(nodeList);\n      const arrOfKeys = arrOfElems.filter(elem => elem.id.includes(\"key\"));\n      return arrOfKeys;\n    },\n    filterByComb() {\n      if (!this.selectedComb) {\n        return this.bindData.filter(item => !this.getTrueKey(item.comb));\n      }\n      return this.bindData.filter(item => this.getTrueKey(item.comb) === this.selectedComb);\n    },\n    withoutEmpty() {\n      return this.filterByComb.filter(key => key.key > 0);\n    }\n  },\n  methods: {\n    setEventsOnKeys() {\n      this.getListOfKeys.forEach(element => {\n        element.parentNode.addEventListener(\"click\", () => this.onClick(element));\n        element.parentNode.addEventListener(\"mouseenter\", () => this.onMouseEnter(element));\n      });\n    },\n    removeEventsOnKeys() {\n      this.getListOfKeys.forEach(element => {\n        element.parentNode.removeEventListener(\"click\", () => this.onClick(element));\n        element.parentNode.removeEventListener(\"mouseenter\", () => this.onMouseEnter(element));\n      });\n    },\n    onMouseEnter(element) {\n      const id = element.id.split(\"-\")[1];\n      if (!this.listOfSelectedKeyCode.includes(+id)) {\n        return;\n      }\n      const newElement = document.createElement(\"div\");\n      newElement.classList.add(\"showInfo\");\n      newElement.textContent = this.bindData.find(item => item.key == id).desc;\n      element.parentNode.appendChild(newElement);\n      const onMouseLeave = () => {\n        if (newElement && newElement.parentNode) {\n          element.parentNode.removeChild(newElement);\n        }\n        element.parentNode.removeEventListener(\"mouseleave\", onMouseLeave);\n      };\n      element.parentNode.addEventListener(\"mouseleave\", onMouseLeave);\n    },\n    getKeyFromKeyCode(keyCode) {\n      const index = Object.values(this.keyNameToCode).indexOf(+keyCode);\n      return Object.keys(this.keyNameToCode)[index];\n    },\n    onClick(element) {\n      if (this.blockedKeys.includes(+element.id.split(\"-\")[1])) {\n        return;\n      }\n      const listOfSelectedId = this.listOfSelectedKeyCode.map(item => `key-${item}`);\n      if (listOfSelectedId.includes(element.id)) {\n        return;\n      }\n      const bindCombKey = {\n        17: \"ctrl\",\n        16: \"shift\",\n        18: \"alt\"\n      };\n      if (Object.keys(bindCombKey).includes(element.id.split(\"-\")[1] + \"\")) {\n        if (this.selectedComb === bindCombKey[element.id.split(\"-\")[1]]) {\n          this.selectedComb = \"\";\n          return;\n        }\n        this.selectedComb = bindCombKey[element.id.split(\"-\")[1]];\n        return;\n      }\n      element.parentNode.classList.add(\"clicked\");\n      this.bindKey(element.id.split(\"-\")[1], this.selectedComb);\n      setTimeout(() => element.parentNode.classList.remove(\"clicked\"), 500);\n    },\n    setSelected() {\n      this.listOfSelectedKeyCode = this.withoutEmpty.map(selected => selected.key);\n      var pressedElements = document.querySelectorAll(\".presed\");\n      pressedElements.forEach(function (element) {\n        element.classList.remove(\"presed\");\n      });\n      this.listOfSelectedKeyCode.forEach(item => {\n        if (item < 0) {\n          return;\n        }\n        const key = document.getElementById(`key-${item}`).parentNode;\n        key.classList.add(\"presed\");\n      });\n      this.blockedKeys.forEach(item => {\n        if (item < 0) {\n          return;\n        }\n        const key = document.getElementById(`key-${item}`).parentNode;\n        key.classList.add(\"blocked\");\n      });\n      [17, 18, 16].forEach(item => {\n        if (item < 0) {\n          return;\n        }\n        const key = document.getElementById(`key-${item}`).parentNode;\n        key.classList.add(\"combKey\");\n      });\n      if (this.selectedComb) {\n        const bindComb = {\n          ctrl: 17,\n          shift: 16,\n          alt: 18\n        };\n        const key = document.getElementById(`key-${bindComb[this.selectedComb]}`).parentNode;\n        key.classList.add(\"presed\");\n      }\n    },\n    onClickOnKey(element) {\n      element.parentNode.classList.add(\"clicked\");\n      this.bindKey(element.id.split(\"-\")[1], this.selectedComb);\n      setTimeout(() => element.parentNode.classList.remove(\"clicked\"), 500);\n    },\n    keyUp(e) {\n      e.preventDefault();\n      const specialKeysList = [17, 16, 18];\n      if (this.listOfSelectedKeyCode.includes(e.keyCode)) {\n        return;\n      }\n      if (specialKeysList.includes(e.keyCode)) {\n        return;\n      }\n      const getId = e.keyCode;\n      let key;\n      try {\n        key = document.getElementById(`key-${getId}`).parentNode;\n      } catch {\n        return;\n      }\n      key.classList.remove(\"clicked\");\n    },\n    getTrueKey(obj) {\n      const values = Object.values(obj);\n      const index = values.indexOf(true);\n      return Object.keys(obj)[index];\n    },\n    keyDown(e) {\n      console.log(e.keyCode);\n      if (this.disabled || this.blockedKeys.includes(e.keyCode)) {\n        return;\n      }\n      e.preventDefault();\n      const bindCombKey = {\n        17: \"ctrl\",\n        16: \"shift\",\n        18: \"alt\"\n      };\n      if (Object.keys(bindCombKey).includes(e.keyCode + \"\")) {\n        if (this.selectedComb === bindCombKey[e.keyCode]) {\n          this.selectedComb = \"\";\n          return;\n        }\n        this.selectedComb = bindCombKey[e.keyCode];\n        return;\n      }\n      if (this.listOfSelectedKeyCode.includes(e.keyCode)) {\n        return;\n      }\n      const getId = e.keyCode;\n      let key;\n      try {\n        key = document.getElementById(`key-${getId}`).parentNode;\n      } catch {\n        return;\n      }\n      this.bindKey(e.keyCode, this.selectedComb);\n      key.classList.add(\"clicked\");\n    }\n  },\n  beforeUnmount() {\n    window.removeEventListener(\"keydown\", this.keyDown);\n    window.removeEventListener(\"keyup\", this.keyUp);\n  },\n  mounted() {\n    this.setSelected();\n    this.setEventsOnKeys();\n    window.addEventListener(\"keydown\", this.keyDown);\n    window.addEventListener(\"keyup\", this.keyUp);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}