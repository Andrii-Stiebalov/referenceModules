{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      btnList: [],\n      fallTime: 10,\n      gameWin: false,\n      countOfChar: 10\n    };\n  },\n  methods: {\n    setAnimation() {\n      const btnsListItem = document.getElementsByClassName(\"TapTapMiniGame-generate-fall-btn\");\n      setTimeout(() => {\n        btnsListItem[0].style.transform = \"translate(-50%, 55vh)\";\n        btnsListItem[0].style.transition = `transform ${this.fallTime}s linear`;\n        setTimeout(() => {\n          if (!this.gameWin) {\n            this.$callClient(\"C:TapTapMiniGame\", false);\n          }\n        }, this.fallTime * 900);\n      }, 5);\n    },\n    setRandomPositionBtn() {\n      const btns = document.querySelectorAll(\".TapTapMiniGame-fall-btn\");\n      const positionList = [];\n      btns.forEach(btn => {\n        let left;\n        do {\n          left = Math.random() * 100;\n        } while (this.chekDef(left, positionList));\n        positionList.push(left);\n        btn.style.left = left + \"%\";\n        btn.style.transform = `translateY(${Math.random() * 200}%)`;\n      });\n    },\n    getTypeColor(i) {\n      return i - 4 * Math.floor(i / 4);\n    },\n    chekDef(position, positionList) {\n      let result = false;\n      positionList.forEach(posit => {\n        if (posit - 5 < position && posit + 5 > position) {\n          result = true;\n        }\n      });\n      return result;\n    },\n    generateRandomKeyCode() {\n      const minKeyCode = 65;\n      const maxKeyCode = 90;\n      return Math.floor(Math.random() * (maxKeyCode - minKeyCode + 1)) + minKeyCode;\n    },\n    handelTap(e) {\n      if (this.btnList.includes(e.keyCode)) {\n        this.btnList = this.btnList.filter(btn => btn !== e.keyCode);\n        if (!this.btnList.length) {\n          this.gameWin = true;\n          this.$callClient(\"C:TapTapMiniGame\", true);\n        }\n      }\n    },\n    setBtnList() {\n      for (let i = 1; i <= this.countOfChar; i++) {\n        let isApproved = false;\n        while (!isApproved) {\n          const rndmKey = this.generateRandomKeyCode();\n          if (!this.btnList.includes(rndmKey)) {\n            isApproved = true;\n            this.btnList.push(rndmKey);\n          }\n        }\n      }\n    },\n    setData(data) {\n      this.fallTime = data.fallTime;\n      this.countOfChar = data.countOfChar;\n    },\n    getCharFromKeyCode(keyCode) {\n      return String.fromCharCode(keyCode);\n    }\n  },\n  mounted() {\n    this.setBtnList();\n    setTimeout(() => {\n      this.setRandomPositionBtn();\n      this.setAnimation();\n    });\n    window.addEventListener(\"keyup\", this.handelTap);\n    this.$offClient(\"C:TapTapMiniGame:SetData\", this.setData);\n    this.$callClient(\"C:TapTapMiniGame:Ready\");\n  },\n  beforeUnmount() {\n    window.removeEventListener(\"keyup\", this.handelTap);\n    this.$offClient(\"C:TapTapMiniGame:SetData\", this.setData);\n    this.$callClient(\"C:TapTapMiniGame:Ready\");\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}