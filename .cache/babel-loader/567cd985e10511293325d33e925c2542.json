{"ast":null,"code":"export default {\n  namespaced: true,\n  state: {\n    notification: true,\n    sound: \"https://song.nazvonok.ru/song/6c80/sms-uvedomlenie-na-iphone-zvuk-sms-na-telefonah-apple.mp3?id=25161\",\n    callsList: [],\n    wantedList: []\n  },\n  getters: {\n    getCalls: state => {\n      const getPriority = type => {\n        return type === \"global\" ? 3 : type === \"local\" ? 2 : 1;\n      };\n      const filterCall = (prevType, nextType) => {\n        let prevPriority = getPriority(prevType);\n        let nextPriority = getPriority(nextType);\n        return prevPriority > nextPriority ? -1 : prevPriority < nextPriority ? 1 : 0;\n      };\n      return state.callsList.sort((prev, next) => filterCall(prev.type, next.type));\n    },\n    getCallsCount: state => {\n      return state.callsList.length;\n    },\n    getNotification: state => {\n      return state.notification;\n    },\n    getWanted: state => {\n      return state.wantedList.sort((prev, next) => next.stars - prev.stars);\n    }\n  },\n  mutations: {\n    clearCalls(state) {\n      state.callsList = [];\n    },\n    setCalls(state, calls) {\n      calls.forEach(call => state.callsList.push(Object.freeze(call)));\n    },\n    addCall(state, call) {\n      if (state.notification) {\n        let audio = new Audio(state.sound);\n        audio.volume = 0.05;\n        audio.play();\n      }\n      state.callsList.push(Object.freeze(call));\n    },\n    updateCall(state, newCall) {\n      let call = state.callsList.find(call => call.id === newCall.id);\n      if (call) {\n        let index = state.callsList.indexOf(call);\n        state.callsList.splice(index, 1, Object.freeze(newCall));\n      }\n    },\n    removeCall(state, callID) {\n      let call = state.callsList.find(call => call.id === callID);\n      if (call) {\n        let index = state.callsList.indexOf(call);\n        state.callsList.splice(index, 1);\n      }\n    },\n    setNotification(state, enabled) {\n      state.notification = enabled;\n    },\n    setWanted(state, wanted) {\n      wanted.forEach(wanted => state.wantedList.push(Object.freeze(wanted)));\n    },\n    clearWanted(state) {\n      state.wantedList = [];\n    },\n    addWanted(state, wanted) {\n      if (state.notification) {\n        let audio = new Audio(state.sound);\n        audio.volume = 0.05;\n        audio.play();\n      }\n      state.wantedList.push(Object.freeze(wanted));\n    },\n    updateWanted(state, newWanted) {\n      let wanted = state.wantedList.find(wanted => wanted.name === newWanted.name);\n      if (wanted) {\n        let index = state.wantedList.indexOf(wanted);\n        state.wantedList.splice(index, 1, Object.freeze(newWanted));\n      }\n    },\n    removeWanted(state, wantedName) {\n      let wanted = state.wantedList.find(wanted => wanted.name === wantedName);\n      if (wanted) {\n        let index = state.wantedList.indexOf(wanted);\n        state.wantedList.splice(index, 1);\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}