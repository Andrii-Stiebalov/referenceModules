{"ast":null,"code":"import \"./Shop.scss\";\nimport Rotator from \"./Components/Rotator.vue\";\nimport Balance from \"./Components/Balance.vue\";\nimport Navigation from \"./Components/Navigation.vue\";\nimport Subnavigation from \"./Components/Subnavigation.vue\";\nimport Shop from \"./Components/Shop.vue\";\nexport default {\n  components: {\n    Rotator,\n    Balance,\n    Navigation,\n    Subnavigation,\n    Shop\n  },\n  data() {\n    return {\n      appActive: false,\n      rotate: 0,\n      shop: \"\",\n      categories: [],\n      activeCategory: null,\n      items: [],\n      activeItem: null,\n      modifications: [],\n      activeModification: null\n    };\n  },\n  props: {\n    type: {\n      type: String,\n      required: true\n    }\n  },\n  computed: {\n    hasCategories() {\n      return [\"clothes\", \"tattoo\", \"appearance\"].includes(this.type);\n    },\n    getKey() {\n      return this.activeCategory && this.activeCategory.id;\n    },\n    isSpecialWallet() {\n      return this.$route.query.specialWallet ? true : false;\n    },\n    isDonateWallet() {\n      return this.$route.query.donateWallet ? true : false;\n    }\n  },\n  methods: {\n    buyItem(type) {\n      if (this.activeItem) this.$callClient(\"clShop:BuyItem\", type, this.type, JSON.stringify(this.activeCategory), JSON.stringify(this.activeItem), JSON.stringify(this.activeModification));\n    },\n    setCategory(category) {\n      if (this.activeCategory !== category) {\n        this.$RPC.call(\"clShop:GetItems\", this.type, JSON.stringify(category)).then(([list, shop]) => {\n          this.items = list;\n          if (!this.shop) this.shop = shop;\n        });\n        this.activeCategory = category;\n      }\n    },\n    setItem(item) {\n      if (this.activeItem !== item) {\n        if (this.type !== \"tattoo\") {\n          this.$RPC.call(\"clShop:GetModifications\", this.type, JSON.stringify(this.activeCategory), JSON.stringify(item)).then(([list]) => {\n            if (this.type !== \"clothes\") {\n              this.type === \"backpacks\" ? this.modifications = [list] : this.modifications = list;\n              this.setModification(this.modifications[0]);\n            } else {\n              this.modifications = list;\n              this.setModification(Object.keys(list).reduce((prev, curr) => prev.concat(list[curr]), [])[0]);\n            }\n          });\n        } else {\n          this.$callClient(\"clShop:ApplyModification\", this.type, JSON.stringify(this.activeCategory), JSON.stringify(item), null);\n        }\n        this.activeItem = item;\n      }\n    },\n    setModification(modification) {\n      if (this.activeModification !== modification) {\n        this.$callClient(\"clShop:ApplyModification\", this.type, JSON.stringify(this.activeCategory), JSON.stringify(this.activeItem), JSON.stringify(modification));\n        this.activeModification = modification;\n      }\n    },\n    onKeyUp(e) {\n      if (e.keyCode === 27 && !window.isModalShow) this.hideApp();\n    },\n    hideApp() {\n      this.appActive = false;\n    },\n    closeApp() {\n      // this.$router.push({ name: \"HUD\" });\n      this.$callClient(\"clShop:CloseBrowser\");\n    }\n  },\n  created() {\n    window.addEventListener(\"keyup\", this.onKeyUp);\n    let triggerName = this.hasCategories ? \"clShop:GetCategories\" : \"clShop:GetItems\";\n    this.$RPC.call(triggerName, this.type).then(([list, shop]) => {\n      this.hasCategories ? this.categories = list : this.items = list;\n      this.shop = shop;\n      this.appActive = true;\n    });\n  },\n  beforeUnmount() {\n    window.removeEventListener(\"keyup\", this.onKeyUp);\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}