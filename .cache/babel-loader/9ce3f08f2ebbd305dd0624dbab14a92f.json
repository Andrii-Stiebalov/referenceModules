{"ast":null,"code":"'use strict';\n\nvar bsearch = require('binary-search-bounds');\nmodule.exports = createTriangulation;\nfunction Triangulation(stars, edges) {\n  this.stars = stars;\n  this.edges = edges;\n}\nvar proto = Triangulation.prototype;\nfunction removePair(list, j, k) {\n  for (var i = 1, n = list.length; i < n; i += 2) {\n    if (list[i - 1] === j && list[i] === k) {\n      list[i - 1] = list[n - 2];\n      list[i] = list[n - 1];\n      list.length = n - 2;\n      return;\n    }\n  }\n}\nproto.isConstraint = function () {\n  var e = [0, 0];\n  function compareLex(a, b) {\n    return a[0] - b[0] || a[1] - b[1];\n  }\n  return function (i, j) {\n    e[0] = Math.min(i, j);\n    e[1] = Math.max(i, j);\n    return bsearch.eq(this.edges, e, compareLex) >= 0;\n  };\n}();\nproto.removeTriangle = function (i, j, k) {\n  var stars = this.stars;\n  removePair(stars[i], j, k);\n  removePair(stars[j], k, i);\n  removePair(stars[k], i, j);\n};\nproto.addTriangle = function (i, j, k) {\n  var stars = this.stars;\n  stars[i].push(j, k);\n  stars[j].push(k, i);\n  stars[k].push(i, j);\n};\nproto.opposite = function (j, i) {\n  var list = this.stars[i];\n  for (var k = 1, n = list.length; k < n; k += 2) {\n    if (list[k] === j) {\n      return list[k - 1];\n    }\n  }\n  return -1;\n};\nproto.flip = function (i, j) {\n  var a = this.opposite(i, j);\n  var b = this.opposite(j, i);\n  this.removeTriangle(i, j, a);\n  this.removeTriangle(j, i, b);\n  this.addTriangle(i, b, a);\n  this.addTriangle(j, a, b);\n};\nproto.edges = function () {\n  var stars = this.stars;\n  var result = [];\n  for (var i = 0, n = stars.length; i < n; ++i) {\n    var list = stars[i];\n    for (var j = 0, m = list.length; j < m; j += 2) {\n      result.push([list[j], list[j + 1]]);\n    }\n  }\n  return result;\n};\nproto.cells = function () {\n  var stars = this.stars;\n  var result = [];\n  for (var i = 0, n = stars.length; i < n; ++i) {\n    var list = stars[i];\n    for (var j = 0, m = list.length; j < m; j += 2) {\n      var s = list[j];\n      var t = list[j + 1];\n      if (i < Math.min(s, t)) {\n        result.push([i, s, t]);\n      }\n    }\n  }\n  return result;\n};\nfunction createTriangulation(numVerts, edges) {\n  var stars = new Array(numVerts);\n  for (var i = 0; i < numVerts; ++i) {\n    stars[i] = [];\n  }\n  return new Triangulation(stars, edges);\n}","map":null,"metadata":{},"sourceType":"script"}