{"ast":null,"code":"class xRPC {\n  constructor() {\n    if (!xRPC._instance) {\n      this.prefix = \"\";\n      this.promises = new Map();\n      xRPC._instance = this;\n    }\n    return xRPC._instance;\n  }\n  call(event, ...args) {\n    console.log(\"PromiseCreated \" + event);\n    event = `${this.prefix}${event}`;\n    let outResolve, outReject;\n    let promise = new Promise((resolve, reject) => {\n      outResolve = resolve;\n      outReject = reject;\n    });\n    if (this.promises.has(event)) {\n      this.promises.delete(event);\n    }\n    this.promises.set(event, {\n      resolve: outResolve,\n      reject: outReject\n    });\n    window.mp.trigger(event, ...args);\n    return promise;\n  }\n  allow(event, isResolving, ...args) {\n    console.log(\"PromiseAllow \" + event);\n    event = `${this.prefix}${event}`;\n    if (!this.promises.has(event)) throw new Error(`xRPC.Error: Promise with current name (${event}) does not exist`);\n    if (isResolving) this.promises.get(event).resolve(args);else this.promises.get(event).reject(args);\n    this.promises.delete(event);\n  }\n  resolve(event, ...args) {\n    this.allow(event, true, ...args);\n  }\n  reject(event, ...args) {\n    this.allow(event, false, ...args);\n  }\n}\nexport default {\n  install: app => {\n    app.config.globalProperties.$RPC = new xRPC();\n  }\n};","map":null,"metadata":{},"sourceType":"module"}