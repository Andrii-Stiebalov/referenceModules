{"ast":null,"code":"import announcement from \"./Components/Icons/announcement.vue\";\nimport balance from \"./Components/Icons/balance.vue\";\nimport condition from \"./Components/Icons/condition.vue\";\nimport members from \"./Components/Icons/members.vue\";\nimport vehicles from \"./Components/Icons/vehicles.vue\";\nexport default {\n  data() {\n    return {\n      bindIcons: {\n        announcement,\n        balance,\n        condition,\n        members,\n        vehicles\n      },\n      actionList: [\n        // {\n        //   id: \"spawnVehicles\",\n        //   img: \"vehicles\",\n        //   title: \"Заспавнити весь <br> фракцiйний транспорт\",\n        //   type: \"default\",\n        //   content: \"Заспавнити\",\n        // },\n        // {\n        //   id: \"warehouseCondition\",\n        //   img: \"condition\",\n        //   title: \"Вiдкриття/закриття сховища фракцiї\",\n        //   type: \"value\",\n        //   value: \"закритий\",\n        //   content: \"Склад\",\n        // },\n        // {\n        //   id: \"organizationBalance\",\n        //   img: \"balance\",\n        //   title: \"Баланс <br> фракцiї\",\n        //   type: \"value\",\n        //   value: 6761819,\n        //   convert: \"true\",\n        //   content: \"\",\n        // },\n        // {\n        //   id: \"showMembers\",\n        //   img: \"members\",\n        //   title: \"Показати членiв <br> органiзацiї на картi\",\n        //   type: \"value\",\n        //   value: \"вимкнено\",\n        //   content: \"Вiдображення\",\n        // },\n        // {\n        //   id: \"sendAnnouncement\",\n        //   img: \"announcement\",\n        //   title: \"Надiслати оголошення <br> про набiр у фракцiю\",\n        //   type: \"default\",\n        //   content: \"Вiдправити\",\n        // },\n      ],\n      organizationList: [{\n        id: 560,\n        name: \"Nwa\"\n      }, {\n        id: 189,\n        name: \"Bro\"\n      }]\n    };\n  },\n  methods: {\n    formatNumber(value) {\n      return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    },\n    onAction(id) {\n      const bindModal = {\n        spawnVehicles: {\n          title: this.$t(\"Eвакуфція транспорту\"),\n          content: [{\n            type: \"description\",\n            value: this.$t(`Ви впевнені, що хочете зробити евакуфцію всіх транспортних засобів?`)\n          }],\n          buttons: {\n            submit: {\n              name: this.$t(\"Підтвердити\"),\n              handler: () => this.$callClient(\"Controls:Actions:Action\", id)\n            },\n            cansel: {\n              name: this.$t(\"Закрити\")\n            }\n          }\n        },\n        organizationBalance: {\n          isSetToStore: true,\n          title: this.$t(\"Переказ на рахунок іншої організації\"),\n          content: [{\n            type: \"description\",\n            value: this.$t(`Виберіть організацію та введіть суму, щоб переказати кошти на рахунок <span>іншої організації</span>?`)\n          }, {\n            options: {\n              label: \"Организация\",\n              value: \"\",\n              options: this.organizationList.map(item => item.name),\n              valuesName: \"organizationIndex\",\n              defaultValue: 0\n            },\n            type: \"select\",\n            value: this.$t(`Виберіть організацію та введіть суму, щоб переказати кошти на рахунок <span>іншої організації</span>?`)\n          }, {\n            type: \"input\",\n            options: {\n              label: \"Cумма\",\n              placeholder: \"Введіть сумму\",\n              valuesName: \"sum\",\n              isOnlyNumber: true\n            }\n          }],\n          buttons: {\n            submit: {\n              name: this.$t(\"Підтвердити\"),\n              handler: () => {\n                const {\n                  organizationIndex,\n                  sum\n                } = this.getDataFromState(this.$t(\"Переказ на рахунок іншої організації\"));\n                const selectedIndex = this.organizationList[organizationIndex].id;\n                this.$callClient(\"Controls:Actions:Action\", id, selectedIndex, sum);\n              }\n            },\n            cansel: {\n              name: this.$t(\"Закрити\")\n            }\n          }\n        },\n        sendAnnouncement: {\n          isSetToStore: true,\n          title: this.$t(\"Оголошення в держ. хвилі\"),\n          content: [{\n            type: \"description\",\n            value: this.$t(`Введіть повідомлення, які ви бажаєте відправити у державну хвилю?`)\n          }, {\n            type: \"input\",\n            options: {\n              label: this.$t(\"1 рядок\"),\n              valuesName: \"1\"\n            }\n          }, {\n            type: \"input\",\n            options: {\n              label: this.$t(\"2 рядок\"),\n              valuesName: \"2\"\n            }\n          }, {\n            type: \"input\",\n            options: {\n              label: this.$t(\"3 рядок\"),\n              valuesName: \"3\"\n            }\n          }, {\n            type: \"input\",\n            options: {\n              label: this.$t(\"4 рядок\"),\n              valuesName: \"4\"\n            }\n          }, {\n            type: \"input\",\n            options: {\n              label: this.$t(\"5 рядок\"),\n              valuesName: \"5\"\n            }\n          }],\n          buttons: {\n            submit: {\n              name: this.$t(\"Відправити\"),\n              handler: () => {\n                const values = this.getDataFromState(this.$t(\"Оголошення в держ. хвилі\"));\n                console.log(Object.values(values));\n                this.$callClient(\"Controls:Actions:Action\", id, Object.values(values));\n              }\n            },\n            cansel: {\n              name: this.$t(\"Закрити\")\n            }\n          }\n        }\n      };\n      if (!bindModal[id]) {\n        this.$callClient(\"Controls:Actions:Action\", id);\n        return;\n      }\n      this.$UniversalModal.create(bindModal[id]);\n    },\n    setData(data) {\n      this.actionList = data;\n    },\n    setOrganizationList(data) {\n      this.organizationList = data;\n    },\n    updateActionValueById(id, value) {\n      this.actionList.find(action => action.id === id).value = value;\n    },\n    getDataFromState(title) {\n      return this.$store.getters[\"universalModal/getFormModalDataByTitle\"](title);\n    }\n  },\n  mounted() {\n    this.$onClient(\"Controls:Actions:SetData\", this.setData);\n    this.$onClient(\"Controls:Actions:SetOrganizationList\", this.setOrganizationList);\n    this.$onClient(\"Controls:Actions:UpdateActionValue\", this.updateActionValueById);\n    this.$callClient(\"Controls:Actions:Ready\");\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}