{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      figureList: [],\n      currentFigure: null,\n      transform: 65,\n      speed: 0.1,\n      figureListInterval: null,\n      IsRight: null,\n      isGameStop: false,\n      countOfCurrentFigure: 0,\n      maxCountOfCurrentFigure: 3,\n      colorTranslate: {\n        orange: \"Желтый\",\n        red: \"Красный\",\n        purple: \"Фиолетовый\",\n        green: \"Зеленный\"\n      },\n      colorBind: {\n        orange: \"#FFCC4D\",\n        red: \"#F53\",\n        purple: \"#A30EFF\",\n        green: \"#34C924\"\n      },\n      figureBind: {\n        rectangle: \"Квадрат\",\n        circle: \"Круг\",\n        triangle: \"Треугольник\",\n        star: \"Звезда\"\n      }\n    };\n  },\n  methods: {\n    getImgPath(name) {\n      return require(`../Assets/${name}.png`);\n    },\n    getRandomColor() {\n      const randomIndex = Math.floor(Math.random() * 4);\n      return Object.values(this.colorBind)[randomIndex];\n    },\n    checkFigure() {\n      clearInterval(this.figureListInterval);\n      this.isGameStop = true;\n      const leaveLength = (this.transform - 65) * -1;\n      const index = Math.floor(leaveLength / 13.2);\n      const selectFigure = this.figureList[index - 2];\n      if (!selectFigure) {\n        this.$callClient(\"C:TapTapMiniGame\", false);\n        return;\n      }\n      if (selectFigure.color === this.currentFigure.color && selectFigure.figure === this.currentFigure.figure) {\n        if (leaveLength % 13.2 >= 2.9 && leaveLength % 13.2 <= 6) {\n          this.IsRight = true;\n          this.$callClient(\"C:TapTapMiniGame\", true);\n        } else {\n          this.$callClient(\"C:TapTapMiniGame\", false);\n        }\n      } else {\n        this.$callClient(\"C:TapTapMiniGame\", false);\n      }\n    },\n    setAnim() {\n      const listElem = document.getElementsByClassName(\"TapTapMiniGame_figuresList-section\");\n      let lastTransform = Object.freeze(this.transform);\n      const width = 13.6;\n      this.figureListInterval = setInterval(() => {\n        const countOfItemLive = Math.floor((lastTransform - this.transform) / width);\n        listElem[0].style.transform = `translateX(${this.transform -= this.speed}rem)`;\n        if (countOfItemLive && !(countOfItemLive % 8)) {\n          lastTransform = this.transform;\n          this.setRandomFigureList();\n        }\n      });\n    },\n    getFigureStyle(figure) {\n      const app = this;\n      const style = {\n        backgroundColor: app.colorBind[figure.color],\n        maskImage: `url(${app.getImgPath(figure.figure)})`\n      };\n      return style;\n    },\n    setRandomFigureList() {\n      const colors = Object.keys(this.colorBind);\n      const figures = Object.keys(this.figureBind);\n      const lastLength = this.figureList.length;\n      for (let i = 0; i < 10; i++) {\n        const color = colors[Math.floor(Math.random() * 4)];\n        const figure = figures[Math.floor(Math.random() * 4)];\n        const figureItem = {\n          color,\n          figure\n        };\n        this.figureList.push(figureItem);\n      }\n      const currentLength = this.figureList.length;\n      const index = Math.floor(Math.random() * (currentLength - lastLength)) + lastLength;\n      this.figureList[index] = this.currentFigure;\n      this.countOfCurrentFigure++;\n    },\n    setRandomPositionBtn() {\n      const btns = document.querySelectorAll(\".TapTapMiniGame-fall-btn\");\n      const positionList = [];\n      btns.forEach(btn => {\n        let left;\n        do {\n          left = Math.random() * 100;\n        } while (this.chekDef(left, positionList));\n        positionList.push(left);\n        btn.style.left = left + \"%\";\n        btn.style.transform = `translateY(${Math.random() * 200}%)`;\n      });\n    },\n    chekDef(position, positionList) {\n      let result = false;\n      positionList.forEach(posit => {\n        if (posit - 5 < position && posit + 5 > position) {\n          result = true;\n        }\n      });\n      return result;\n    },\n    generateRandomKeyCode() {\n      const minKeyCode = 65;\n      const maxKeyCode = 90;\n      return Math.floor(Math.random() * (maxKeyCode - minKeyCode + 1)) + minKeyCode;\n    },\n    setRandomFigure() {\n      const colors = Object.keys(this.colorBind);\n      const figures = Object.keys(this.figureBind);\n      const color = colors[Math.floor(Math.random() * 4)];\n      const figure = figures[Math.floor(Math.random() * 4)];\n      this.currentFigure = {\n        color,\n        figure\n      };\n    },\n    setBtnList() {\n      for (let i = 0; i <= 3; i++) {\n        let isApproved = false;\n        while (!isApproved) {\n          const rndmKey = this.generateRandomKeyCode();\n          if (!this.btnList.includes(rndmKey)) {\n            isApproved = true;\n            this.btnList.push(rndmKey);\n          }\n        }\n      }\n    },\n    getCharFromKeyCode(keyCode) {\n      return String.fromCharCode(keyCode);\n    },\n    setData(data) {\n      this.speed = data.speed;\n    },\n    hendleTap(e) {\n      if (e.keyCode === 69) {\n        this.checkFigure();\n      }\n    }\n  },\n  mounted() {\n    this.setRandomFigure();\n    this.setRandomFigureList();\n    this.setAnim();\n    window.addEventListener(\"keydown\", this.hendleTap);\n    this.$offClient(\"C:TapTapMiniGame:SetData\", this.setData);\n    this.$callClient(\"C:TapTapMiniGame:Ready\");\n  },\n  beforeUnmount() {\n    window.removeEventListener(\"keydown\", this.handelTap);\n    this.$offClient(\"C:TapTapMiniGame:SetData\", this.setData);\n    this.$callClient(\"C:TapTapMiniGame:Ready\");\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}