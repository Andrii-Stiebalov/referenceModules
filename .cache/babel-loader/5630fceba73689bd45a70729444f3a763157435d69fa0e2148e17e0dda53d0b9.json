{"ast":null,"code":"import Actions from \"../../../components/controls/organization/actions/Actions.js\";\nexport default {\n  components: {\n    Actions\n  },\n  data: {\n    actions: [],\n    blacklistMembers: [],\n    blacklistMembersFound: 0,\n    blacklistPagesCount: 1,\n    blacklistPage: 1,\n    blacklistType: \"local\",\n    organizations: []\n  },\n  methods: {\n    openActions(actions, organizations) {\n      this.actions = actions;\n      this.organizations = organizations;\n      this.setRoute(\"actions\");\n    },\n    updateActionValue(actionID, newValue) {\n      let action = this.actions.find(x => x.id === actionID);\n      if (action) action.value = newValue;\n    },\n    ConfirmationSpawnCars() {\n      mp.trigger(\"Controls:SpawnCars\");\n    },\n    ConfirmationIssuanceAward() {\n      mp.trigger(\"Controls:IssuanceAward\");\n    },\n    activeAction(actionID) {\n      let action = this.actions.find(x => x.id === actionID);\n      if (action && action.type !== undefined) {\n        if (action.type === \"default\") {\n          if (actionID === \"organizationBalance\") {\n            let modalOptions = {\n              title: `Перевод на счет другой организации`,\n              subtitle: `Выберите организацию и введите сумму, <br> чтобы перевести средства на счет <b> другой организации</b> ?`,\n              selector: {\n                types: this.organizations\n              },\n              buttons: [{\n                content: \"Перевести\",\n                emit: \"src/components/global/UniversalModal:ModalOpen->src/mixins/controls/organization/Action:OrganizationMoneyGet\"\n              }],\n              inputs: [{\n                id: \"sum\",\n                placeholder: \"Введите сумму\",\n                regex: /^[0-9]+$/\n              }],\n              props: []\n            };\n            this.$EBus.$emit(\"...->src/components/controls/organization/Modal:ModalOpen\", \"confirmation\", modalOptions);\n          }\n          if (action.id === \"spawnVehicles\") {\n            let modalOptions = {\n              title: `Эвакуация транспорта`,\n              subtitle: `Вы уверены, что хотите произвести эвакуацию всех транспортных средств ?`,\n              buttons: [{\n                content: \"Подтвердить\",\n                emit: \"src/components/global/UniversalModal:ModalOpen->src/mixins/controls/organization/Action:ConfirmationSpawnCars\"\n              }],\n              props: []\n            };\n            this.$EBus.$emit(\"...->src/components/controls/organization/Modal:ModalOpen\", \"confirmation\", modalOptions);\n          }\n          if (action.id === \"issuanceAward\") {\n            let modalOptions = {\n              title: `Выдача премии`,\n              subtitle: `Вы уверены, что хотите выдать премию? <br> (Премия выдается всем , кто находится <br> в радиусе 5м. от Вас)`,\n              buttons: [{\n                content: \"Подтвердить\",\n                emit: \"src/components/global/UniversalModal:ModalOpen->src/mixins/controls/organization/Action:ConfirmationIssuanceAward\"\n              }],\n              props: []\n            };\n            this.$EBus.$emit(\"...->src/components/controls/organization/Modal:ModalOpen\", \"confirmation\", modalOptions);\n          }\n          if (action.id === \"addBlacklist\") {\n            this.$EBus.$emit(\"...->src/components/controls/organization/Modal:ModalOpen\", \"blacklist\");\n          }\n          if (action.id === \"removeBlacklist\") {\n            mp.trigger(\"Controls:GetBlacklistInfo\", \"local\");\n          }\n          if (action.id === \"sendAnnouncement\") {\n            this.$EBus.$emit(\"...->src/components/controls/organization/Modal:ModalOpen\", \"announcement\");\n          }\n        } else if (action.type === \"value\") {\n          mp.trigger(\"Controls:SetActionValue\", actionID);\n        }\n      }\n    },\n    closeBlacklistModal() {\n      this.$EBus.$emit(\"...->src/components/controls/organization/Modal:CloseBlacklistModal\");\n    },\n    openBlackList(blacklistMembers, blacklistMembersFound, blacklistPagesCount, blacklistPage) {\n      this.blacklistMembers = blacklistMembers;\n      this.blacklistMembersFound = blacklistMembersFound;\n      this.blacklistPagesCount = blacklistPagesCount;\n      this.blacklistPage = blacklistPage;\n      this.setRoute(\"actions/blacklist\");\n    },\n    deleteFromBlacklist(type, memberID) {\n      console.log(type, memberID);\n    }\n  },\n  mounted() {\n    this.$EBus.$on(\"src/components/controls/organization/actions/default/ActionsDefault->src/mixins/controls/organization/Actions:ActiveAction\", actionID => {\n      this.activeAction(actionID);\n    });\n    this.$EBus.$on(\"src/components/global/UniversalModal:ModalOpen->src/mixins/controls/organization/Action:ConfirmationSpawnCars\", () => {\n      this.ConfirmationSpawnCars();\n    });\n    this.$EBus.$on(\"src/components/global/UniversalModal:ModalOpen->src/mixins/controls/organization/Action:ConfirmationIssuanceAward\", () => {\n      this.ConfirmationIssuanceAward();\n    });\n    this.$EBus.$on(\"src/components/controls/organization/actions/ModalBlacklist->src/mixins/controls/organization/Action:BlackListName\", (type, name) => {\n      mp.trigger(\"Controls:AddToBlackList\", type, name);\n    });\n    this.$EBus.$on(\"src/components/controls/organization/Modal->src/mixins/controls/organization/Action:sendAnnouncement\", announcement => {\n      mp.trigger(\"Controls:SendAnnouncement\", JSON.stringify(announcement));\n    });\n    this.$EBus.$on(\"src/components/controls/organization/action/blacklist/ActionsBlackList->src/mixins/controls/organization/Actions:goBack\", () => {\n      this.setRoute(\"actions\");\n    });\n    this.$EBus.$on(\"src/components/controls/organization/action/blacklist/BlaclistRow->src/mixins/controls/organization/Actions:MembersUninvite\", memberID => {\n      let memberName = this.blacklistMembers && this.blacklistMembers.find(x => x.id === memberID) !== undefined ? this.blacklistMembers.find(x => x.id === memberID).name : ``;\n      let modalOptions = {\n        title: `Удаление ранга`,\n        subtitle: `Вы уверены, что хотите вынести <br> гражданина <b>${memberName}</b> из черного списка ?`,\n        buttons: [{\n          content: \"Подтвердить\",\n          emit: \"src/components/global/UniversalModal:ModalOpen->src/mixins/controls/organization/Actions:Confirmation\"\n        }],\n        props: [this.blacklistType, memberID]\n      };\n      this.$EBus.$emit(\"...->src/components/controls/organization/Modal:ModalOpen\", \"confirmation\", modalOptions);\n    });\n    this.$EBus.$on(\"src/components/global/UniversalModal:ModalOpen->src/mixins/controls/organization/Actions:Confirmation\", props => {\n      this.deleteFromBlacklist(...props);\n    });\n    this.$EBus.$on(\"src/components/global/UniversalModal:ModalOpen->src/mixins/controls/organization/Action:OrganizationMoneyGet\", (props, value, organization) => {\n      mp.trigger(\"Controls:OrganizationMoney\", +organization.id, value.inputs.sum ? Number(value.inputs.sum) : -1);\n    });\n    this.$EBus.$on(\"src/components/controls/organization/actions/blacklist/ActionsBlacklist->src/mixins/controls/organization/Action:ActionsSetPage\", type => {\n      console.log(this.blacklistType, type);\n    });\n    this.$EBus.$on(\"src/components/controls/organization/actions/blacklist/ActionsBlacklist->src/mixins/controls/organization/Action:ActionsSetType\", () => {\n      console.log(this.blacklistType);\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}