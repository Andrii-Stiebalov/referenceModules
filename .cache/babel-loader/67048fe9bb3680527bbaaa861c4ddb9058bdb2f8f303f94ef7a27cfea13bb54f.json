{"ast":null,"code":"import Range from \"@/Components/CustomRange/CustomRange.vue\";\nexport default {\n  data() {\n    return {\n      isDraging: false,\n      selectedValue: 0,\n      priviusList: [],\n      settingList: [{\n        valueName: \"offsetX\",\n        value: 0\n      }, {\n        valueName: \"offsetY\",\n        value: 0\n      }, {\n        valueName: \"offsetZ\",\n        value: 0\n      }, {\n        valueName: \"rotateX\",\n        value: 0\n      }, {\n        valueName: \"rotateY\",\n        value: 0\n      }, {\n        valueName: \"rotateZ\",\n        value: 0\n      }],\n      x: 200,\n      y: 200\n    };\n  },\n  watch: {\n    settingList: {\n      handler(val) {\n        const changedItem = val.find((item, i) => item.value !== this.priviusList[i]?.value);\n        this.priviusList = val.map(item => Object.assign({}, item));\n        this.$callClient(\"AttachManager:Change\", changedItem.valueName, changedItem.value);\n      },\n      deep: true\n    }\n  },\n  methods: {\n    setValue(setting, value) {\n      setting.value = value;\n    },\n    onmousemove(e) {\n      if (!this.isDraging) {\n        return;\n      }\n      this.x = e.clientX;\n      this.y = e.clientY;\n    },\n    onmouseup(e) {\n      this.isDraging = false;\n    },\n    onmousedown(e) {\n      this.isDraging = true;\n    },\n    onkeyup(e) {\n      const handler = {\n        37: () => {\n          this.settingList[this.selectedValue].value--;\n        },\n        39: () => {\n          this.settingList[this.selectedValue].value++;\n        },\n        38: () => {\n          if (this.selectedValue <= 0) {\n            this.selectedValue = this.settingList.length - 1;\n            return;\n          }\n          this.selectedValue--;\n        },\n        40: () => {\n          if (this.selectedValue >= this.settingList.length - 1) {\n            this.selectedValue = 0;\n            return;\n          }\n          this.selectedValue++;\n        }\n      };\n      if (!Object.keys(handler).includes(e.keyCode + \"\")) {\n        return;\n      }\n      handler[e.keyCode]();\n    }\n  },\n  components: {\n    Range\n  },\n  mounted() {\n    this.$callClient(\"AttachManager:Ready\"), window.addEventListener(\"mousemove\", this.onmousemove);\n    window.addEventListener(\"mouseup\", this.onmouseup);\n    window.addEventListener(\"keydown\", this.onkeyup);\n  },\n  beforeUnmount() {\n    window.removeEventListener(\"mousemove\", this.onmousemove);\n    window.removeEventListener(\"mouseup\", this.onmouseup);\n    window.removeEventListener(\"keydown\", this.onkeyup);\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}