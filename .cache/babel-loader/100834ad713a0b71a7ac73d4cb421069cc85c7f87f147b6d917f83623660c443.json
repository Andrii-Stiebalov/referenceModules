{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapGetters } from \"vuex\";\nimport IconUser2 from \"./assets/icons/user-2.vue\";\nimport IconCastle1 from \"./assets/icons/castle-1.vue\";\nimport IconEyeHide1 from \"./assets/icons/eye-hide__1.vue\";\nimport IconEyeShow1 from \"./assets/icons/eye-show__1.vue\";\nexport default {\n  components: {\n    IconUser2,\n    IconCastle1,\n    IconEyeHide1,\n    IconEyeShow1\n  },\n  data() {\n    return {\n      inputs: {\n        login: {\n          value: \"\",\n          focus: false,\n          valid: false,\n          handler: {\n            focus: () => {\n              this.inputs.login.focus = true;\n            },\n            blur: () => {\n              this.inputs.login.focus = false;\n            },\n            validate: () => {\n              this.inputs.login.valid = true;\n            }\n          }\n        },\n        password: {\n          value: \"\",\n          focus: false,\n          show: false,\n          falid: false,\n          handler: {\n            focus: () => {\n              this.inputs.password.focus = true;\n            },\n            blur: () => {\n              this.inputs.password.focus = false;\n            },\n            eye: () => {\n              this.inputs.password.show = !this.inputs.password.show;\n            },\n            validate: () => {\n              this.inputs.password.valid = true;\n            }\n          }\n        }\n      },\n      savePassword: false\n    };\n  },\n  computed: {\n    ...mapGetters(\"global\", [\"getCdnResolver\"]),\n    ...mapGetters(\"authentication\", [\"getProfile\", \"getSavedUser\", \"getCharacters\", \"getRecovery\"])\n  },\n  methods: {\n    login_fastjoin(status, data, error) {\n      if (status) {\n        this.getProfile.login = data.user.login;\n        this.getProfile.balance = String(data.user.balance);\n        this.getCdnResolver.cdnKey = data.cdn.key;\n        this.getCharacters.information = data.characters;\n        this.getProfile.isLoggIn = true;\n        this.$router.push(\"/authentication/character\");\n        this.savePassword && this.getSavedUser.login !== this.inputs.login.value && this.getSavedUser.password !== this.inputs.password.value && this.$callClient(\"Authentication.Login.SaveUser\", JSON.stringify({\n          login: this.inputs.login.value,\n          password: this.inputs.password.value\n        }));\n        this.$Notification.create({\n          type: \"success\",\n          layout: \"compact-bottom__right\",\n          theme: \"compact\",\n          time: 5000,\n          text: `\n                    <div class=\"notification-text__item\">\n                        <div class=\"notification-text__item-title\">\n                            <span>${this.$t(\"Успешная авторизация\")}</span>\n                        </div>\n                    </div>\n                    <div class=\"notification-text__item\">\n                        <div class=\"notification-text__item-icon\">\n                            <span class=\"icon-success\"></span>\n                        </div>\n                    </div>\n                    `,\n          progressBar: false\n        });\n      } else {\n        this.$Notification.create({\n          type: \"error\",\n          layout: \"compact-bottom__right\",\n          theme: \"compact\",\n          time: 5000,\n          text: `\n                        <div class=\"notification-text__item\">\n                            <div class=\"notification-text__item-title\">\n                                <span>${this.$t(\"Ошибка\")}</span>\n                            </div>\n                            <div class=\"notification-text__item-subtitle\">\n                                <span>${error}</span>\n                            </div>\n                        </div>\n                        <div class=\"notification-text__item\">\n                            <div class=\"notification-text__item-icon\">\n                                <span class=\"icon-error\"></span>\n                            </div>\n                        </div>\n                    `,\n          progressBar: false\n        });\n      }\n    },\n    login(e) {\n      e.preventDefault();\n      if (this.inputs.login.valid) {\n        if (this.inputs.password.valid) {\n          this.$RPC.call(\"Authentication.Login.Submit\", JSON.stringify({\n            login: this.inputs.login.value,\n            password: this.inputs.password.value,\n            savePassword: this.savePassword\n          })).then(([status, data, error]) => {\n            if (status) {\n              this.getProfile.login = data.user.login;\n              this.getProfile.balance = String(data.user.balance);\n              this.getCdnResolver.cdnKey = data.cdn.key;\n              this.getCharacters.information = data.characters;\n              this.getProfile.isLoggIn = true;\n              this.$router.push(\"/authentication/character\");\n              this.savePassword && this.getSavedUser.login !== this.inputs.login.value && this.getSavedUser.password !== this.inputs.password.value && this.$callClient(\"Authentication.Login.SaveUser\", JSON.stringify({\n                login: this.inputs.login.value,\n                password: this.inputs.password.value\n              }));\n              this.$Notification.create({\n                type: \"success\",\n                layout: \"compact-bottom__right\",\n                theme: \"compact\",\n                time: 5000,\n                text: `\n                    <div class=\"notification-text__item\">\n                        <div class=\"notification-text__item-title\">\n                            <span>${this.$t(\"Успешная авторизация\")}</span>\n                        </div>\n                    </div>\n                    <div class=\"notification-text__item\">\n                        <div class=\"notification-text__item-icon\">\n                            <span class=\"icon-success\"></span>\n                        </div>\n                    </div>\n                    `,\n                progressBar: false\n              });\n            } else {\n              this.$Notification.create({\n                type: \"error\",\n                layout: \"compact-bottom__right\",\n                theme: \"compact\",\n                time: 5000,\n                text: `\n                        <div class=\"notification-text__item\">\n                            <div class=\"notification-text__item-title\">\n                                <span>${this.$t(\"Ошибка\")}</span>\n                            </div>\n                            <div class=\"notification-text__item-subtitle\">\n                                <span>${error}</span>\n                            </div>\n                        </div>\n                        <div class=\"notification-text__item\">\n                            <div class=\"notification-text__item-icon\">\n                                <span class=\"icon-error\"></span>\n                            </div>\n                        </div>\n                    `,\n                progressBar: false\n              });\n            }\n          });\n        } else {\n          this.$Notification.create({\n            type: \"error\",\n            layout: \"compact-bottom__right\",\n            theme: \"compact\",\n            time: 5000,\n            text: `\n                  <div class=\"notification-text__item\">\n                      <div class=\"notification-text__item-title\">\n                          <span>${this.$t(\"Ошибка\")}</span>\n                      </div>\n                      <div class=\"notification-text__item-subtitle\">\n                          <span>${this.$t(\"Пароль содержит недопустимые символы или его длина меньше 8 символов.\")}</span>\n                      </div>\n                  </div>\n                  <div class=\"notification-text__item\">\n                      <div class=\"notification-text__item-icon\">\n                          <span class=\"icon-error\"></span>\n                      </div>\n                  </div>\n              `,\n            progressBar: false\n          });\n        }\n      } else {\n        this.$Notification.create({\n          type: \"error\",\n          layout: \"compact-bottom__right\",\n          theme: \"compact\",\n          time: 5000,\n          text: `\n                  <div class=\"notification-text__item\">\n                      <div class=\"notification-text__item-title\">\n                          <span>${this.$t(\"Ошибка\")}</span>\n                      </div>\n                      <div class=\"notification-text__item-subtitle\">\n                          <span>${this.$t(\"Логин должен содержать от 3 до 25 латинских букв или цифер.\")}</span>\n                      </div>\n                  </div>\n                  <div class=\"notification-text__item\">\n                      <div class=\"notification-text__item-icon\">\n                          <span class=\"icon-error\"></span>\n                      </div>\n                  </div>\n              `,\n          progressBar: false\n        });\n      }\n    },\n    setMainData(status, data) {\n      if (status) {\n        this.getSavedUser.login = data.login;\n        this.getSavedUser.password = data.password;\n        this.inputs.login.value = data.login;\n        this.inputs.password.value = data.password;\n        this.inputs.login.handler.validate();\n        this.inputs.password.handler.validate();\n        this.savePassword = true;\n      }\n    }\n  },\n  beforeMount() {\n    if (this.getProfile.isLoggIn) {\n      return this.$router.push(\"/authentication/character\");\n    }\n    if (this.getRecovery.status) {\n      return this.$router.push(\"/authentication/recovery/confirm\");\n    }\n  },\n  mounted() {\n    this.$onClient(\"W:Auth:AutoJoin\", this.login_fastjoin);\n    this.$onClient(\"W:Auth:setMainData\", this.setMainData);\n    this.$callClient(\"Authentication.Login.GetSavedUser\");\n  },\n  beforeUnmount() {\n    this.$offClient(\"W:Auth:AutoJoin\", this.login_fastjoin);\n    this.$offClient(\"W:Auth:setMainData\", this.setMainData);\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}