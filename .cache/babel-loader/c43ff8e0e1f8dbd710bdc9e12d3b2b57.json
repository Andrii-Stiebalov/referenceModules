{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nexport default {\n  data() {\n    return {\n      bindRoute: {\n        statistic: \"статистика\",\n        shop: \"магазин\",\n        battlePass: \"боевой пропуск\",\n        tasks: \"задания\",\n        help: \"помощь\",\n        settings: \"настройки\",\n        skins: \"скины\",\n        prizes: \"МОИ ПРИЗЫ\"\n      },\n      donateAmount: \"\"\n    };\n  },\n  props: {\n    setIframeModal: Function,\n    setIsShowLoader: Function,\n    isShowIframePay: Boolean\n  },\n  computed: {\n    getSubRoute() {\n      return this.$route.path.split(\"/\")[2];\n    },\n    headerData() {\n      return this.$store.getters[\"playerMenu/getHeaderData\"];\n    },\n    getTitle() {\n      return this.$t(this.bindRoute[this.getSubRoute]);\n    },\n    getPath() {\n      return require(`../Assets/HeaderIcons/${this.getSubRoute}.svg`);\n    },\n    Login() {\n      return this.$store.getters[\"playerMenu/getLogin\"];\n    }\n  },\n  methods: {\n    getPaymentData(amount) {\n      this.setIsShowLoader(true);\n      fetch(`https://s3.nexus-rp.net/api/payment/pay-way-types?locale=${this.$i18n.locale}`).then(response => response.json()).then(response => this.sendPaymentData(response.merchants[0].id, amount)).catch(error => {\n        console.error(\"ERROR\", error);\n        this.setIsShowLoader(false);\n      });\n    },\n    async sendPaymentData(id, amount) {\n      const paymentData = {\n        id: id,\n        login: this.Login,\n        count: amount.amount\n      };\n      fetch(`https://s3.nexus-rp.net/api/payment?locale=${this.$i18n.locale}`, {\n        method: \"post\",\n        body: JSON.stringify(paymentData),\n        headers: {\n          \"content-type\": \"application/json\"\n        }\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error(`${response.status}`);\n        }\n        return response.json();\n      }).then(data => {\n        this.$callClient(`Kinguin.Open`, data.url);\n        //this.setIframeModal(data.url);\n      }).catch(error => {\n        console.error(\"ERROR\", error);\n        this.setIsShowLoader(false);\n      });\n    },\n    showModal() {\n      if (this.isShowIframePay) {\n        this.setIframeModal();\n        return;\n      }\n      const UniversalModalContentAprove = {\n        title: this.$t(\"Пополнение счета\"),\n        isSetToStore: true,\n        content: [{\n          type: \"description\",\n          value: this.$t(`Пожалуйста, укажите сумму, на которую вы хотели бы пополнить свой счет.`)\n        }, {\n          type: \"description\",\n          value: this.$t(`<span>1 грн </span> = <span>1 монета</span> = <span>500$</span>`)\n        }, {\n          type: \"input\",\n          options: {\n            valuesName: \"amount\",\n            label: this.$t(\"Сумма\")\n          }\n        }],\n        buttons: {\n          submit: {\n            name: this.$t(\"Пополнить\"),\n            handler: () => {\n              this.getPaymentData(this.getDataFromState(this.$t(\"Пополнение счета\")));\n            }\n          },\n          cansel: {\n            name: this.$t(\"Отмена\")\n          }\n        }\n      };\n      this.$UniversalModal.create(UniversalModalContentAprove);\n    },\n    handleScroll(event) {\n      const container = event.currentTarget;\n      if (event.deltaY > 0) {\n        container.scrollLeft += 100;\n      } else {\n        container.scrollLeft -= 100;\n      }\n    },\n    getDataFromState(title) {\n      return this.$store.getters[\"universalModal/getFormModalDataByTitle\"](title);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}