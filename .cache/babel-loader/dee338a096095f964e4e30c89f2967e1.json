{"ast":null,"code":"export default {\n  props: {\n    announcement: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      isActive: false\n    };\n  },\n  computed: {\n    getClasses() {\n      return `announcements-id__${this.announcement.id} \n        announcements-theme__${this.announcement.theme} \n        announcements-type__${this.announcement.type}`;\n    }\n  },\n  methods: {\n    onClose() {\n      this.onTimerAction(false);\n      this.isActive = false;\n      if (this.announcement.callbacks.onClose) this.announcement.callbacks.onClose();\n    },\n    onClick() {\n      if (this.announcement.callbacks.onClick) this.announcement.callbacks.onClick();\n      if (this.announcement.closeWith.includes(\"click\")) this.onClose();\n    },\n    onMouseOver() {\n      if (this.announcement.callbacks.onHover) this.announcement.callbacks.onHover();\n      this.onTimerAction(false);\n    },\n    onMouseOut() {\n      this.onTimerAction(true);\n    },\n    onAfterEnter() {\n      this.onTimerAction(true);\n    },\n    onAfterLeave() {\n      this.$emit(\"delete\", this.announcement);\n    },\n    onAnimationFrame() {\n      this.timeRemaining = Math.max(this.timeRemaining - (Date.now() - this.startTime), 0);\n      this.startTime = Date.now();\n      if (this.announcement.progressBar) {\n        let progress = Number((this.timeRemaining / this.announcement.timeout).toPrecision(3));\n        if (this.$refs.progressBar) this.$refs.progressBar.style.width = `${progress * 100}%`;\n      }\n      if (this.timeRemaining > 0) {\n        this.animationFrameID = requestAnimationFrame(this.onAnimationFrame);\n      } else {\n        this.onClose();\n      }\n    },\n    onTimerAction(state) {\n      if (this.announcement.timeout) {\n        if (state) {\n          if (!this.isFirst) {\n            this.timeRemaining = this.announcement.timeout;\n            this.isFirst = true;\n          }\n          this.startTime = Date.now();\n          if (this.animationFrameID == null) this.animationFrameID = requestAnimationFrame(this.onAnimationFrame);\n        } else if (this.animationFrameID != null) {\n          cancelAnimationFrame(this.animationFrameID);\n          this.animationFrameID = null;\n        }\n      }\n    }\n  },\n  created() {\n    this.isFirst = false;\n    this.timeRemaining = 0;\n    this.startTime = 0;\n    this.animationFrameID = null;\n    if (this.announcement.callbacks.beforeShow) this.announcement.callbacks.beforeShow();\n  },\n  mounted() {\n    this.isActive = true;\n    if (this.announcement.callbacks.onShow) this.announcement.callbacks.onShow();\n  }\n};","map":null,"metadata":{},"sourceType":"module"}