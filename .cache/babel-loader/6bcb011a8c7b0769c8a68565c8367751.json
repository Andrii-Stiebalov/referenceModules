{"ast":null,"code":"import CdnResolverImage from \"../../../../../../../Components/CdnResolverImage.vue\";\nimport OpenCaseBg from \"../../../../Components/OpenCaseBg.vue\";\nimport OpenCaseGlow from \"../../../../Components/OpenCaseGlow.vue\";\nexport default {\n  data() {\n    return {\n      countList: [1, 5, 10],\n      selectedCountOpenCas: 1,\n      isOpeningCase: false,\n      isShowTakeButton: false,\n      winIndex: 0,\n      bindColor: {\n        purple: \"#A30EFF\",\n        aqua: \"#2BD9D9\",\n        blue: \"#4971D8\",\n        green: \"#34C924\",\n        red: \"#FF5533\",\n        yellow: \"#FFCC4D\",\n        orange: \"#f07f42\"\n      },\n      isFastOpen: false,\n      winElem: null,\n      caseItemsListForOpen: [],\n      priviusPosition: 0\n    };\n  },\n  components: {\n    OpenCaseBg,\n    OpenCaseGlow,\n    CdnResolverImage\n  },\n  computed: {\n    caseItemList() {\n      if (!this.caseData) {\n        return [];\n      }\n      const upLength = [...this.caseData.items, ...this.caseData.items];\n      return this.shuffleArray(upLength);\n    },\n    caseData() {\n      return this.$store.getters[\"playerMenu/getCasesItem\"](this.$route.params.type);\n    }\n  },\n  watch: {\n    isOpeningCase(value) {\n      if (!value) {\n        this.$store.dispatch(\"setIsPreventRouting\", false);\n        return;\n      }\n      this.$store.dispatch(\"setIsPreventRouting\", true);\n      setTimeout(() => this.generateRandomPosition(), 1);\n    },\n    winElem(value) {\n      if (!value) {\n        return;\n      }\n      this.isOpeningCase = true;\n    }\n  },\n  methods: {\n    openCase() {\n      // this.winElem = {\n      //   id: 3,\n      //   Type: \"Animation\",\n      //   rarity: 1,\n      //   chance: 1,\n      //   cost: 32,\n      //   title: \"Benefactor Glendale\",\n      //   background: \"custom@animations_gangnam_style.webm\",\n      //   data: \"glendale\",\n      // };\n      this.$callClient(\"C:Case:OpenCase\", this.$route.params.type);\n    },\n    onMouseenter(ref) {\n      setTimeout(() => {\n        this.$refs[ref]?.[0]?.play();\n      });\n    },\n    onMouseleave(ref) {\n      setTimeout(() => {\n        this.$refs[ref]?.[0]?.pause();\n      });\n    },\n    formatMoney(number) {\n      return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n    },\n    onSellPrize() {\n      this.$callClient(\"C:Case:Sell\");\n      this.setToDefault();\n    },\n    setWinElem(item) {\n      this.winElem = item;\n    },\n    setToDefault() {\n      this.isOpeningCase = false;\n      this.isShowTakeButton = false;\n      this.priviusPosition = 0;\n      this.caseItemsListForOpen = [];\n      this.$refs[\"open-case-track\"].style.transform = `translateX(0rem)`;\n      this.$refs[\"open-case-track\"].style.transition = `transform 0s`;\n      this.setCaseForOpen();\n    },\n    onTakePrize() {\n      this.$callClient(\"C:Case:Take\");\n      this.setToDefault();\n    },\n    GetImagePath(item) {\n      return `cdn/case/other/${item.image}.png`;\n    },\n    shuffleArray(array) {\n      let shuffledArray = [...array.slice()];\n      for (let i = shuffledArray.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n      }\n      return shuffledArray.slice(0, 35);\n    },\n    setCaseForOpen() {\n      let upLength = [];\n      while (upLength.length < 35) {\n        upLength = [...upLength, ...this.caseData.items];\n      }\n      this.caseItemsListForOpen = this.shuffleArray(upLength);\n    },\n    generateRandomPosition() {\n      const width = 18;\n      this.isInGame = true;\n      const randomCount = Math.floor(Math.random() * (this.caseItemsListForOpen.length - 30)) + 20;\n      const fontSize = parseFloat(getComputedStyle(document.documentElement).fontSize);\n      console.log(this.caseItemsListForOpen.length);\n      const listElemWidthInRem = window.innerWidth / fontSize;\n      const countElemInStart = listElemWidthInRem / 2 / width;\n      const randomInaccuracy = Math.floor(Math.random() * (width - 0.5)) - (countElemInStart - Math.floor(countElemInStart)) * width;\n      const listElem = this.$refs[\"open-case-track\"];\n      this.winElem.isWin = true;\n      this.winIndex = randomCount + Math.floor(countElemInStart);\n      this.caseItemsListForOpen[randomCount + Math.floor(countElemInStart)] = this.winElem;\n      this.priviusPosition = randomCount;\n      const transformStyle = -randomCount * width;\n      if (this.isFastOpen) {\n        listElem.style.transition = `transform 0s`;\n      } else {\n        listElem.style.transition = `transform 7s`;\n      }\n      listElem.style.transform = `translateX(${transformStyle - randomInaccuracy}rem) translateZ(0)`;\n      setTimeout(() => {\n        this.showWinAnim();\n        this.isShowTakeButton = true;\n        listElem.style.transition = `transform 1s`;\n        listElem.style.transform = `translateX(${transformStyle - width / 2 + (countElemInStart - Math.floor(countElemInStart)) * width}rem)`;\n      }, this.isFastOpen ? 300 : 7200);\n    },\n    getItemImageDefault(item) {\n      if (item.Clothes) {\n        let index = -1;\n        switch (item.Type) {\n          case \"Hat\":\n            index = -12;\n            break;\n          case \"Top\":\n            index = -11;\n            break;\n          case \"Leg\":\n            index = -4;\n            break;\n          case \"Feet\":\n            index = -6;\n            break;\n          case \"Accessories\":\n            index = -14;\n            break;\n          case \"Mask\":\n            index = -1;\n            break;\n          case \"Jewelry\":\n            index = -7;\n            break;\n          case \"Glasses\":\n            index = -13;\n            break;\n          case \"Backs\":\n            index = -20;\n            break;\n        }\n        if (item.Type == \"Backs\" || item.Type == \"Mask\") {\n          return `cdn/inventory/clothes/${index}/${item.background}`;\n        }\n        return `cdn/inventory/clothes/${index}/${item.Gender ? \"True\" : \"False\"}/${item.background}`;\n      }\n      if (item.Type == \"ArmorSkin\") {\n        return `cdn/inventory/clothes/-9/False/${item.background}`;\n      }\n      if (item.Type === \"WeaponDraw\" || item.Type === \"WeaponSticker\") {\n        return `cdn/inventory/clothes/weaponskins/${item.background}`;\n      }\n      if (item.Type == \"Car\") {\n        return `cdn/help/battlepass/caseitems/${item.background}`;\n      }\n      if (item.Type == \"Item\") {\n        return `cdn/inventory/other/${item.background}`;\n      }\n      if (item.Type == \"Wheels\") {\n        return `cdn/wheels/${item.background}`;\n      }\n      return `cdn/inventory/other/${item.background}`;\n    },\n    showWinAnim() {\n      const winElem = document.getElementById(\"WinElem\");\n      winElem.style.position = \"relative\";\n      winElem.style.zIndex = 50;\n      winElem.style.transform = `scale(1.1)`;\n      if (this.winElem.Type === \"Animation\") {\n        this.onMouseenter(\"anim\" + this.winIndex);\n      }\n    }\n  },\n  mounted() {\n    this.$onClient(\"C:Case:SetWinElem\", this.setWinElem);\n    console.log(this.se);\n    this.setCaseForOpen();\n  },\n  beforeUnmount() {\n    this.$offClient(\"C:Case:SetWinElem\", this.setWinElem);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}