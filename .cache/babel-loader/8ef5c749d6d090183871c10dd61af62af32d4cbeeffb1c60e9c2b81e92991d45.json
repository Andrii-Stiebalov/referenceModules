{"ast":null,"code":"export default {\n  data() {\n    return {};\n  },\n  methods: {\n    getImgPath(name) {\n      return require(`../../../Assets/ShopIcons/Starter/${name}.png`);\n    },\n    buyItem(service) {\n      const bindTitles = {\n        0: {\n          title: \"Стартовый набор {0}\",\n          description: \"Вы действительно хотите приобрести <span>стартовый набор {0}</span> за <span>{1}</span> монет\"\n        }\n      };\n      const UniversalModalContentAprove = {\n        title: this.$t(bindTitles[0]?.title + \"\", [service.Title]),\n        content: [{\n          type: \"description\",\n          value: this.$t(bindTitles[0]?.description + \"\", [service.Title, service.Price])\n        }\n        // {\n        //   type: \"input\",\n        //   options: {\n        //     label: this.$t(\"Введите новое имя\"),\n        //     valuesName: \"newName\",\n        //   },\n        // },\n        ],\n        buttons: {\n          submit: {\n            name: this.$t(\"Да\"),\n            handler: () => {\n              this.$callClient(\"C:Shop:BuyStarterPack\", service.ID);\n            }\n          },\n          cansel: {\n            name: this.$t(\"Отмена\")\n          }\n        }\n      };\n      this.$UniversalModal.create(UniversalModalContentAprove);\n    },\n    handleScroll(event) {\n      const container = event.currentTarget;\n      if (event.deltaY > 0) {\n        container.scrollLeft += 100;\n      } else {\n        container.scrollLeft -= 100;\n      }\n    },\n    getDataFromState(title) {\n      return this.$store.getters[\"universalModal/getFormModalDataByTitle\"](title);\n    }\n  },\n  computed: {\n    serviceList() {\n      return this.$store.getters[`playerMenu/getStartePackList`];\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}