{"ast":null,"code":"import { mapGetters } from \"vuex\";\n// import MapBW from \"../../../Components/MapBW.vue\";\nimport { drawFieldPolygons } from \"../../../Plugins/Map.js\";\nimport FieldRental__fieldInfo from \"./Components/FieldRental__fieldInfo.vue\";\nimport Range from \"../../../Components/CustomRange/CustomRange.vue\";\nexport default {\n  components: {\n    // MapBW,\n    FieldRental__fieldInfo,\n    Range\n  },\n  data() {\n    return {\n      fieldData: [],\n      passedTime: 0,\n      isShowModal: false,\n      selectedFieldInfo: null,\n      modalValue: 12,\n      ownerName: \"\",\n      isActive: false\n    };\n  },\n  computed: {\n    ...mapGetters({\n      map: \"getMap\",\n      familyName: \"getFamilyName\"\n    }),\n    countOfOwnTerretory() {\n      return this.territoriesData.filter(data => data.familyName === this.familyName).length;\n    },\n    sortedFieldsData() {\n      const fieldDataClone = [...this.fieldData];\n      return fieldDataClone.sort((a, b) => this.getPolygonCenter(b.coords) - this.getPolygonCenter(a.coords));\n    },\n    countOfFreeFields() {\n      return this.fieldData.filter(field => field.isFree).length;\n    }\n  },\n  watch: {\n    fieldData() {\n      setTimeout(() => {\n        drawFieldPolygons(this.fieldData, this.map, this.ownerName);\n      }, 100);\n      setTimeout(() => {\n        let view = this.map.getView();\n        view.animate({\n          center: [1562.9622 / 2, 5573.547 / 2],\n          zoom: 16.2,\n          duration: 2000\n        });\n      }, 200);\n    },\n    isShowModal() {\n      this.modalValue = 12;\n    }\n  },\n  methods: {\n    setMapObj(map) {\n      this.map = map;\n    },\n    onCancel() {\n      this.isShowModal = false;\n      this.modalValue = 12;\n    },\n    onRent(rentalInfo) {\n      this.isShowModal = true;\n      this.selectedFieldInfo = rentalInfo;\n    },\n    setInnerValue(value) {\n      this.modalValue = value;\n    },\n    closeApp() {\n      this.$callClient(\"C:FieldRental:Close\");\n    },\n    keydown(e) {\n      if (e.keyCode === 27 && !window.isModalShow) {\n        this.closeApp();\n      }\n    },\n    onFinalRent() {\n      const rentData = {\n        rentField: this.selectedFieldInfo.id,\n        rentTime: this.modalValue\n      };\n      this.$callClient(\"C:FieldRental:Rent\", rentData);\n      this.isShowModal = false;\n      this.modalValue = 12;\n    },\n    setData(data) {\n      this.fieldData = data.fieldData;\n      this.ownerName = data.ownerName;\n    },\n    bindClose() {\n      window.addEventListener(\"keyup\", this.keydown);\n    },\n    getPolygonCenter(coords) {\n      let ySum = 0;\n      const numVertices = coords.length;\n      for (let i = 0; i < numVertices; i++) {\n        ySum += coords[i][1];\n      }\n      const centerY = ySum / numVertices;\n      return centerY;\n    },\n    setTimer() {\n      this.timer = setInterval(() => {\n        this.passedTime++;\n      }, 1000);\n    },\n    convertToMoneyFormat(numb) {\n      return new Intl.NumberFormat(\"de-DE\").format(numb);\n    }\n  },\n  beforeUnmount() {\n    this.$store.dispatch(\"setIsShowMap\", false);\n    window.removeEventListener(\"keyup\", this.keydown);\n  },\n  mounted() {\n    this.$store.dispatch(\"setIsShowMap\", true);\n    this.isActive = true;\n    this.$onClient(\"W:FieldRental:setData\", this.setData);\n    this.$callClient(\"C:FieldRental:Ready\");\n    this.setTimer();\n    this.bindClose();\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}