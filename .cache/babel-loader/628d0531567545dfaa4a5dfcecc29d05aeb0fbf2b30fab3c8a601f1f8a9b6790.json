{"ast":null,"code":"import ColorPicker from \"@/Components/ColorPicker/ColorPicker\";\nimport { hsvToHex } from \"@/Functions/hsvUtils\";\nexport default {\n  data() {\n    return {\n      isCreation: true,\n      scaleIconProcent: null,\n      playerData: {},\n      requirementsData: {},\n      isInputOnFocus: false,\n      isValid: null,\n      isImgValid: null,\n      isLoading: false,\n      isImgLoading: false,\n      newFamilyName: \"\",\n      imgPath: \"\",\n      isActive: false,\n      selectedColor: \"#FF0000\",\n      isImgInputOnFocus: false,\n      colorHsv: {\n        h: 0,\n        s: 0,\n        v: 0\n      }\n    };\n  },\n  components: {\n    ColorPicker\n  },\n  methods: {\n    setColorHsv(hsv) {\n      this.colorHsv = hsv;\n    },\n    setScaleIconProcent() {\n      const fontSize = getComputedStyle(document.documentElement).fontSize;\n      const size = fontSize.slice(0, -2);\n      this.scaleIconProcent = +size / 10;\n    },\n    getStrokeDashoffset(value, requirement) {\n      const procent = value >= requirement ? 100 : value / requirement * 100;\n      return 100 - procent;\n    },\n    onSubmit() {\n      if (!this.isValid || !this.newFamilyName) {\n        this.$Notification.create({\n          type: \"error\",\n          layout: \"compact-bottom__right\",\n          theme: \"compact\",\n          time: 5000,\n          isFromServer: true,\n          text: this.$t(\"НЕКОРЕКТНОЕ НАЗВАНИЕ СЕМЬИ\"),\n          progressBar: false\n        });\n        return;\n      }\n      if (!this.imgPath || !this.isImgValid) {\n        this.$Notification.create({\n          type: \"error\",\n          layout: \"compact-bottom__right\",\n          theme: \"compact\",\n          time: 5000,\n          isFromServer: true,\n          text: this.$t(\"ЛОГОТИП НЕ ЗАГРУЖЕН\"),\n          progressBar: false\n        });\n        return;\n      }\n      const hex = hsvToHex(this.colorHsv.h, this.colorHsv.s, this.colorHsv.v);\n      this.$callClient(\"C:CreationFamily:create\", this.newFamilyName, this.imgPath, hex);\n    },\n    formatNumber(num) {\n      return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\") + \"$\";\n    },\n    close() {\n      this.$callClient(\"C:CreationFamily:close\");\n    },\n    onKeyUp(e) {\n      if (e.key === \"Escape\") {\n        this.close();\n      }\n    },\n    setData(data) {\n      this.isCreation = data.isCreation;\n      this.playerData = data.playerData;\n      this.requirementsData = data.requirementsData;\n      this.drawBorder();\n    },\n    drawBorder() {\n      this.$refs.ExpPath.style.strokeDashoffset = this.getStrokeDashoffset(this.playerData.lvl, this.requirementsData.lvl);\n      this.$refs.DollarPath.style.strokeDashoffset = this.getStrokeDashoffset(this.playerData.money, this.requirementsData.money);\n    }\n  },\n  watch: {\n    newFamilyName(val) {\n      this.isValid = val.length > 4 && val.length < 15;\n      this.isLoading = true;\n      setTimeout(() => this.isLoading = false, 100);\n    },\n    requirementsData() {\n      this.drawBorder();\n    },\n    imgPath(val) {\n      const img = new Image();\n      img.src = val;\n      this.isImgLoading = true;\n      img.onload = () => {\n        console.log(\"LOADED\");\n        this.isImgValid = true;\n        this.isImgLoading = false;\n      };\n      img.onerror = () => {\n        console.log(\"ERRORRRR\");\n        this.isImgValid = false;\n        this.isImgLoading = false;\n      };\n    }\n  },\n  mounted() {\n    this.setScaleIconProcent();\n    this.isActive = true;\n    this.$onClient(\"C:CreationFamily:setData\", this.setData);\n    this.$callClient(\"C:CreationFamily:Ready\");\n    window.addEventListener(\"keyup\", this.onKeyUp);\n  },\n  beforeUnmount() {\n    this.$offClient(\"C:CreationFamily:setData\", this.setData);\n    window.removeEventListener(\"keyup\", this.onKeyUp);\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}