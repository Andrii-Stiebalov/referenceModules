{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport CdnResolverImage from \"../../../Components/CdnResolverImage.vue\";\nimport Loader from \"../../../Components/LogoLoader/LogoLoader.vue\";\nexport default {\n  components: {\n    CdnResolverImage,\n    Loader\n  },\n  data() {\n    return {\n      cells: [],\n      selectedItems: {\n        inventory: [],\n        bag: []\n      },\n      openedSection: \"inventory\",\n      alerts: [],\n      defaultMsg: {\n        all: \"Вы успешно конфисковали все предметы\",\n        selected: \"Вы успешно конфисковали выделенные предметы\"\n      },\n      loadingButtonName: \"\",\n      player_data: {},\n      isActive: false\n    };\n  },\n  methods: {\n    GetImagePath(item) {\n      return `cdn/inventory/other/${item.ID}.png`;\n    },\n    setCells() {\n      if (this.cells.length) {\n        this.cells = [];\n      }\n      this.cells = [...this.player_data[this.openedSection]];\n      let maxItems = 25;\n      if (this.cells.length > maxItems) maxItems = this.cells.length;\n      while (this.cells.length !== maxItems) {\n        this.cells.push({});\n      }\n    },\n    openSection(section) {\n      this.openedSection = section;\n    },\n    selectItem(item) {\n      if (!this.getObjectLength(item)) {\n        return;\n      }\n      if (this.isSelected(item)) {\n        this.selectedItems[this.openedSection] = this.selectedItems[this.openedSection].filter(selectedItem => !(selectedItem.ID === item.ID && selectedItem.SlotID === item.SlotID));\n        return;\n      }\n      this.selectedItems[this.openedSection].push(item);\n    },\n    getObjectLength(obj) {\n      return Object.keys(obj).length;\n    },\n    showAlert(req) {\n      this.alerts.push(req);\n      setTimeout(() => {\n        this.alerts.shift();\n      }, 3000);\n    },\n    isSelected(item) {\n      return this.selectedItems[this.openedSection].length ? this.selectedItems[this.openedSection].some(selectedItem => selectedItem.ID === item.ID && selectedItem.SlotID === item.SlotID) : false;\n    },\n    setData(data) {\n      if (this.getObjectLength(this.player_data)) {\n        this.showAlert({\n          status: true,\n          msg: this.defaultMsg[this.loadingButtonName]\n        });\n      }\n      this.player_data = data;\n      this.selectedItems = {\n        inventory: [],\n        bag: []\n      };\n      this.stopErrorTimer();\n      this.setCells();\n      this.loadingButtonName = \"\";\n    },\n    timerError() {\n      this.showAlert({\n        status: false\n      });\n      this.loadingButtonName = \"\";\n    },\n    startErrorTimer() {\n      this.timeout = setTimeout(() => this.timerError(), 10000);\n    },\n    stopErrorTimer() {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n    },\n    confiscateAll() {\n      this.$callClient(\"C:Search:RemoveAll\");\n      this.loadingButtonName = \"all\";\n      this.startErrorTimer();\n    },\n    confiscateSelected() {\n      if (!(this.selectedItems.bag.length || this.selectedItems.inventory.length)) {\n        this.showAlert({\n          status: false\n        });\n        return;\n      }\n      this.$callClient(\"C:Search:RemoveSelected\", this.selectedItems);\n      console.table(this.selectedItems);\n      this.loadingButtonName = \"selected\";\n      this.startErrorTimer();\n    },\n    close() {\n      this.$router.push(\"/\");\n    },\n    onKeyUp(e) {\n      if (e.keyCode === 27 && !window.isModalShow) {\n        this.close();\n      }\n    }\n\n    // onConfiscateSelected() {\n    //   this.removeSelected(\"inventory\");\n    //   this.removeSelected(\"bag\");\n    //   this.showAlert({\n    //     status: true,\n    //     msg: \"Вы успешно конфисковали выделенные придметы\",\n    //   });\n    //   this.loadingButtonName = \"\";\n    // },\n\n    // removeAll() {\n    //   this.isLoading = false;\n    //   this.player_data.inventory = [];\n    //   this.player_data.bag = [];\n    //   this.setCells();\n    // },\n\n    //   removeSelected(section) {\n    //     const filteredValues = Object.values(...this.player_data[section]).filter(\n    //       (item) =>\n    //         !this.selectedItems[section].some((selectedItem) => {\n    //           return selectedItem.ID === item.ID;\n    //         })\n    //     );\n    //     let updatedArr = {};\n    //     filteredValues.forEach((item, index) => (updatedArr[index + 1] = item));\n    //     this.player_data[section] = [updatedArr];\n    //     this.selectedItems[section] = [];\n    //     this.setCells();\n    //   },\n  },\n  watch: {\n    openedSection() {\n      this.setCells();\n    }\n  },\n  computed: {\n    selectedList() {\n      const list = [...this.selectedItems.inventory.concat(this.selectedItems.bag)];\n      const updateCount = list.reduce((prev, item) => {\n        const findItem = prev.length ? prev.find(prevItem => prevItem.ID === item.ID && prevItem.SlotID === item.SlotID) : null;\n        if (!findItem) {\n          return [...prev, Object.assign({}, item)];\n        }\n        findItem.Count += item.Count;\n        if (item.ID !== this.updateCountID) {\n          this.updateCountID = item.ID;\n        }\n        return prev;\n      }, []);\n      return updateCount;\n    }\n  },\n  mounted() {\n    this.isActive = true;\n    this.$onClient(\"W:Search:setData\", this.setData);\n    this.$callClient(\"C:SearchMenu:Loaded\");\n    window.addEventListener(\"keyup\", this.onKeyUp);\n  },\n  beforeUnmount() {\n    this.isActive = false;\n    this.$offClient(\"W:Search:setData\");\n    this.$callClient(\"C:SearchMenu:Close\");\n    window.removeEventListener(\"keyup\", this.onKeyUp);\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}