{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapGetters } from \"vuex\";\nimport UniversalModal from \"../../../../Components/UniversalModal/UniversalModal.vue\";\nimport Tooltip from \"./global/Tooltip.vue\";\nimport CardInformation from \"./character/CardInformation.vue\";\nimport CardCreate from \"./character/CardCreate.vue\";\nimport CardLock from \"./character/CardLock.vue\";\nimport Criterion from \"./character/Criterion.vue\";\nexport default {\n  components: {\n    UniversalModal,\n    Tooltip,\n    CardInformation,\n    CardCreate,\n    CardLock,\n    Criterion\n  },\n  data() {\n    return {\n      showCard: true,\n      cardList: [{\n        id: 1,\n        position: -1,\n        active: false,\n        className: null\n      }, {\n        id: 2,\n        position: 0,\n        active: false,\n        className: null\n      }, {\n        id: 3,\n        position: 1,\n        active: false,\n        className: null\n      }],\n      selectedCard: null,\n      characterCreateCriterion: false\n    };\n  },\n  computed: {\n    ...mapGetters(\"authentication\", [\"getProfile\", \"getCharacters\", \"getSelectSpawn\", \"getRecovery\"]),\n    getCardList() {\n      for (let c = 0; c < this.getCharacters.information.length; c++) {\n        this.getCharacters.information[c].modals = {};\n        if (this.getCharacters.information[c].data.character[0] === -1) {\n          this.getCharacters.information[c].modals = {\n            createCharacter: false\n          };\n          this.getCharacters.information[c].step = 1;\n          this.getCharacters.information[c].inputs = {\n            firstName: {\n              value: \"\",\n              focus: false,\n              valid: false,\n              handler: {\n                focus: cardIndex => {\n                  this.cardList[cardIndex].inputs.firstName.focus = true;\n                },\n                blur: cardIndex => {\n                  this.cardList[cardIndex].inputs.firstName.focus = false;\n                },\n                validate: (e, cardIndex) => {\n                  let regExp = /^[a-zA-Z]+$/;\n                  this.cardList[cardIndex].inputs.firstName.valid = regExp.test(e.target.value);\n                  if (!this.checkUppercaseFullName(e.target.value)) {\n                    this.cardList[cardIndex].inputs.firstName.valid = false;\n                  }\n                  if (e.target.value.length < 3) {\n                    this.cardList[cardIndex].inputs.firstName.valid = false;\n                  }\n                  if (e.target.value.length > 25) {\n                    this.cardList[cardIndex].inputs.firstName.valid = false;\n                  }\n                }\n              }\n            },\n            lastName: {\n              value: \"\",\n              focus: false,\n              valid: false,\n              handler: {\n                focus: cardIndex => {\n                  this.cardList[cardIndex].inputs.lastName.focus = true;\n                },\n                blur: cardIndex => {\n                  this.cardList[cardIndex].inputs.lastName.focus = false;\n                },\n                validate: (e, cardIndex) => {\n                  let regExp = /^[a-zA-Z]+$/;\n                  this.cardList[cardIndex].inputs.lastName.valid = regExp.test(e.target.value);\n                  if (!this.checkUppercaseFullName(e.target.value)) {\n                    this.cardList[cardIndex].inputs.lastName.valid = false;\n                  }\n                  if (e.target.value.length < 3) {\n                    this.cardList[cardIndex].inputs.lastName.valid = false;\n                  }\n                  if (e.target.value.length > 25) {\n                    this.cardList[cardIndex].inputs.lastName.valid = false;\n                  }\n                }\n              }\n            }\n          };\n          continue;\n        }\n        if (this.getCharacters.information[c].data.character[0] === -2) {\n          this.getCharacters.information[c].modals = {\n            buySlot: false\n          };\n          continue;\n        }\n      }\n      return this.cardList.reduce((a, b) => {\n        let findCharacter = this.getCharacters.information.find(a => a.id === b.id);\n        if (findCharacter) {\n          Object.assign(b, findCharacter);\n        }\n        a.push(b);\n        return a;\n      }, []);\n    }\n  },\n  methods: {\n    initCardPosition() {\n      for (let c = 0; c < this.cardList.length; c++) {\n        const card = document.getElementById(`divCharacterSelectCard-${this.cardList[c].id}`);\n        console.log(card);\n        if (card) {\n          card.style.transform = `translateX(${this.pxToVw(this.cardList[c].position * (window.innerWidth - card.offsetWidth - 30) / this.cardList.length, window.innerWidth)}vw)`;\n        }\n      }\n    },\n    getCardType(card) {\n      if (card.data.character[0] !== -1 && card.data.character[0] !== -2) {\n        return \"card-information\";\n      }\n      if (card.data.character[0] === -1) {\n        return \"card-create\";\n      }\n      if (card.data.character[0] === -2) {\n        return \"card-lock\";\n      }\n    },\n    initCardClassName(card) {\n      this.cardList.find(a => a.id === card.id).className = this.getCardType(card);\n    },\n    selectCard(cardId) {\n      if (this.selectedCard !== cardId) {\n        this.$RPC.call(\"Authentication.Character.Select\", cardId).then(([status, error]) => {\n          if (status) {\n            let findCard = this.cardList.find(a => a.id === cardId);\n            if (findCard) {\n              let findCardActive = this.cardList.find(a => a.position === 0);\n              if (findCardActive) {\n                this.selectedCard = cardId;\n                findCardActive.position = findCard.position;\n                findCardActive.active = false;\n                findCard.position = 0;\n                findCard.active = true;\n              }\n            }\n            let findCardStep = this.cardList.find(a => a.step > 1);\n            if (findCardStep && !findCardStep.active) {\n              findCardStep.step = 1;\n              if (findCardStep.data.character[0] === -1) {\n                this.characterCreateCriterion = false;\n              }\n            }\n            this.initCardPosition();\n          } else {\n            this.$Notification.create({\n              type: \"error\",\n              layout: \"compact-bottom__right\",\n              theme: \"compact\",\n              time: 5000,\n              text: `\n                      <div class=\"notification-text__item\">\n                          <div class=\"notification-text__item-title\">\n                              <span>${this.$t(\"Ошибка\")}</span>\n                          </div>\n                          <div class=\"notification-text__item-subtitle\">\n                              <span>${error}</span>\n                          </div>\n                      </div>\n                      <div class=\"notification-text__item\">\n                          <div class=\"notification-text__item-icon\">\n                              <span class=\"icon-error\"></span>\n                          </div>\n                      </div>\n                  `,\n              progressBar: false\n            });\n          }\n        });\n      }\n    },\n    checkUppercaseFullName(string) {\n      let ascii = string.charCodeAt(0);\n      if (ascii < 65 || ascii > 90) return false;\n      let upperSymbols = 0;\n      for (let i = 0; i < string.length; i++) {\n        ascii = string.charCodeAt(i);\n        if (ascii >= 65 && ascii <= 90) upperSymbols++;\n      }\n      if (upperSymbols > 2) return false;\n      return true;\n    },\n    createCharacter(cardId, cardIndex) {\n      if (!this.cardList[cardIndex].inputs.firstName.valid) {\n        return this.$Notification.create({\n          type: \"error\",\n          layout: \"compact-bottom__right\",\n          theme: \"compact\",\n          time: 5000,\n          text: `\n                    <div class=\"notification-text__item\">\n                        <div class=\"notification-text__item-title\">\n                            <span>${this.$t(\"Ошибка\")}</span>\n                        </div>\n                        <div class=\"notification-text__item-subtitle\">\n                            <span>${this.$t(\"Введенное вами имя не соответствует критериям.\")}</span>\n                        </div>\n                    </div>\n                    <div class=\"notification-text__item\">\n                        <div class=\"notification-text__item-icon\">\n                            <span class=\"icon-error\"></span>\n                        </div>\n                    </div>\n                `,\n          progressBar: false\n        });\n      }\n      if (!this.cardList[cardIndex].inputs.lastName.valid) {\n        return this.$Notification.create({\n          type: \"error\",\n          layout: \"compact-bottom__right\",\n          theme: \"compact\",\n          time: 5000,\n          text: `\n                    <div class=\"notification-text__item\">\n                        <div class=\"notification-text__item-title\">\n                            <span>${this.$t(\"Ошибка\")}</span>\n                        </div>\n                        <div class=\"notification-text__item-subtitle\">\n                            <span>${this.$t(\"Введённая вами фамилия не соответствует критериям.\")}</span>\n                        </div>\n                    </div>\n                    <div class=\"notification-text__item\">\n                        <div class=\"notification-text__item-icon\">\n                            <span class=\"icon-error\"></span>\n                        </div>\n                    </div>\n                `,\n          progressBar: false\n        });\n      }\n      this.$RPC.call(\"Authentication.Character.Create\", cardId, JSON.stringify({\n        firstName: this.cardList[cardIndex].inputs.firstName.value,\n        lastName: this.cardList[cardIndex].inputs.lastName.value\n      })).then(([status, error]) => {\n        if (status) {\n          // Redirect to character creator?\n          // Todo\n        } else {\n          this.$Notification.create({\n            type: \"error\",\n            layout: \"compact-bottom__right\",\n            theme: \"compact\",\n            time: 5000,\n            text: `\n                  <div class=\"notification-text__item\">\n                      <div class=\"notification-text__item-title\">\n                          <span>${this.$t(\"Ошибка\")}</span>\n                      </div>\n                      <div class=\"notification-text__item-subtitle\">\n                          <span>${error}</span>\n                      </div>\n                  </div>\n                  <div class=\"notification-text__item\">\n                      <div class=\"notification-text__item-icon\">\n                          <span class=\"icon-error\"></span>\n                      </div>\n                  </div>\n              `,\n            progressBar: false\n          });\n        }\n      });\n    },\n    unlockSlot(cardId) {\n      this.$RPC.call(\"Authentication.Character.UnlockSlot\", cardId).then(([status, error]) => {\n        if (status) {\n          this.getProfile.balance -= 1000;\n          this.getCharacters.information.find(a => a.id === cardId).data.character = [-1];\n          this.$Notification.create({\n            type: \"success\",\n            layout: \"compact-bottom__right\",\n            theme: \"compact\",\n            time: 5000,\n            text: `\n                  <div class=\"notification-text__item\">\n                      <div class=\"notification-text__item-title\">\n                          <span>${this.$t(\"Успех\")}</span>\n                      </div>\n                      <div class=\"notification-text__item-subtitle\">\n                          <span>${this.$t(\"Слот разблокирован.\")}</span>\n                      </div>\n                  </div>\n                  <div class=\"notification-text__item\">\n                      <div class=\"notification-text__item-icon\">\n                          <span class=\"icon-success\"></span>\n                      </div>\n                  </div>\n              `,\n            progressBar: false\n          });\n        } else {\n          this.$Notification.create({\n            type: \"error\",\n            layout: \"compact-bottom__right\",\n            theme: \"compact\",\n            time: 5000,\n            text: `\n                  <div class=\"notification-text__item\">\n                      <div class=\"notification-text__item-title\">\n                          <span>${this.$t(\"Ошибка\")}</span>\n                      </div>\n                      <div class=\"notification-text__item-subtitle\">\n                          <span>${error}</span>\n                      </div>\n                  </div>\n                  <div class=\"notification-text__item\">\n                      <div class=\"notification-text__item-icon\">\n                          <span class=\"icon-error\"></span>\n                      </div>\n                  </div>\n              `,\n            progressBar: false\n          });\n        }\n      });\n    },\n    removeCharacter(cardId) {\n      this.$RPC.call(\"Authentication.Character.Remove\", cardId).then(([status, error]) => {\n        if (status) {\n          this.getCharacters.information.find(a => a.id === cardId).data.character = [-1];\n          this.$Notification.create({\n            type: \"success\",\n            layout: \"compact-bottom__right\",\n            theme: \"compact\",\n            time: 5000,\n            text: `\n                  <div class=\"notification-text__item\">\n                      <div class=\"notification-text__item-title\">\n                          <span>${this.$t(\"Успех\")}</span>\n                      </div>\n                      <div class=\"notification-text__item-subtitle\">\n                          <span>${this.$t(\"Персонаж удален.\")}</span>\n                      </div>\n                  </div>\n                  <div class=\"notification-text__item\">\n                      <div class=\"notification-text__item-icon\">\n                          <span class=\"icon-success\"></span>\n                      </div>\n                  </div>\n              `,\n            progressBar: false\n          });\n        } else {\n          this.$Notification.create({\n            type: \"error\",\n            layout: \"compact-bottom__right\",\n            theme: \"compact\",\n            time: 5000,\n            text: `\n                  <div class=\"notification-text__item\">\n                      <div class=\"notification-text__item-title\">\n                          <span>${this.$t(\"Ошибка\")}</span>\n                      </div>\n                      <div class=\"notification-text__item-subtitle\">\n                          <span>${error}</span>\n                      </div>\n                  </div>\n                  <div class=\"notification-text__item\">\n                      <div class=\"notification-text__item-icon\">\n                          <span class=\"icon-error\"></span>\n                      </div>\n                  </div>\n              `,\n            progressBar: false\n          });\n        }\n      });\n    },\n    selectSpawn(cardId) {\n      this.$RPC.call(\"Authentication.SelectSpawn.SelectedCharacter\", cardId).then(([status, error]) => {\n        if (status) {\n          this.showCard = false;\n          this.getCharacters.selected = cardId;\n          this.$RPC.call(\"Authentication.SelectSpawn.GetAllowSpawnPoint\").then(([status, data, error]) => {\n            if (status) {\n              this.getSelectSpawn.allow = data;\n              this.$router.push(\"/authentication/select-spawn\");\n            } else {\n              this.$Notification.create({\n                type: \"error\",\n                layout: \"compact-bottom__right\",\n                theme: \"compact\",\n                time: 5000,\n                text: `\n                        <div class=\"notification-text__item\">\n                            <div class=\"notification-text__item-title\">\n                                <span>${this.$t(\"Ошибка\")}</span>\n                            </div>\n                            <div class=\"notification-text__item-subtitle\">\n                                <span>${error}</span>\n                            </div>\n                        </div>\n                        <div class=\"notification-text__item\">\n                            <div class=\"notification-text__item-icon\">\n                                <span class=\"icon-error\"></span>\n                            </div>\n                        </div>\n                    `,\n                progressBar: false\n              });\n            }\n          });\n        } else {\n          this.showCard = true;\n          this.$Notification.create({\n            type: \"error\",\n            layout: \"compact-bottom__right\",\n            theme: \"compact\",\n            time: 5000,\n            text: `\n                  <div class=\"notification-text__item\">\n                      <div class=\"notification-text__item-title\">\n                          <span>${this.$t(\"Ошибка\")}</span>\n                      </div>\n                      <div class=\"notification-text__item-subtitle\">\n                          <span>${error}</span>\n                      </div>\n                  </div>\n                  <div class=\"notification-text__item\">\n                      <div class=\"notification-text__item-icon\">\n                          <span class=\"icon-error\"></span>\n                      </div>\n                  </div>\n              `,\n            progressBar: false\n          });\n        }\n      });\n    },\n    pxToVw(value, viewport) {\n      return Number(value / viewport * 100).toFixed(2);\n    }\n  },\n  created() {\n    window.addEventListener(\"resize\", this.initCardPosition);\n  },\n  beforeMount() {\n    if (!this.getProfile.isLoggIn) {\n      return this.$router.push(\"/authentication/login\");\n    }\n  },\n  mounted() {\n    this.initCardPosition();\n  },\n  beforeUnmount() {\n    window.removeEventListener(\"resize\", this.initCardPosition);\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}