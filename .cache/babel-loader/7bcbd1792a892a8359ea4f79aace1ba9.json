{"ast":null,"code":"import i18n, { createI18n } from \"vue-i18n/index.mjs\";\nlet Translations = {};\nconsole.log(process.env.NODE_ENV);\nswitch (process.env.NODE_ENV) {\n  case \"production\":\n    {\n      Translations = compoundTranslationObjects([\"Translations\"]);\n      break;\n    }\n  case \"development\":\n    {\n      Translations = window.getlocale;\n      break;\n    }\n}\nfunction compoundTranslationObjects(namesOfObjects) {\n  let compoundedObject = require(`./FamilyTranslate.json`).Family;\n  // console.log(compoundedObject);\n  namesOfObjects.forEach(name => {\n    const obj = require(`./${name}.json`);\n    compoundedObject = Object.assign(compoundedObject, obj);\n  });\n  return compoundedObject;\n}\nconst localesList = Object.values(Translations).reduce((acc, translation) => {\n  Object.keys(translation).forEach(locale => {\n    if (!acc.includes(locale)) acc.push(locale);\n  });\n  return acc;\n}, [\"ru\", \"eng\", \"ua\", \"de\", \"ba\", \"ge\", \"ro\"]);\nconst I18NTranslations = Object.entries(Translations).reduce((acc, [key, translation]) => {\n  localesList.forEach(locale => {\n    acc[locale][key] = translation[locale] ? translation[locale] : `${key}`;\n  });\n  return acc;\n}, localesList.reduce((acc, locale) => {\n  acc[locale] = {};\n  return acc;\n}, {}));\nconst formatNumbers = {\n  SpacedDollar: {\n    style: \"currency\",\n    currency: \"USD\",\n    notation: \"standard\",\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  },\n  SpacedPercent: {\n    style: \"percent\",\n    useGrouping: false,\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }\n};\nconst numberFormats = localesList.reduce((acc, language) => {\n  acc[language] = formatNumbers;\n  return acc;\n}, {});\nlet translations = {};\n\n// json-server --watch ./src/Localization/FamilyTranslate.json\n\n// fetch(\"http://localhost:3000/Weazel\")\n//   .then((response) => response.json())\n//   .then((data) => {\n//     translations = data;\n//   });\n\nfunction addTranslation(key) {\n  const langs = [\"ru\", \"eng\", \"ua\", \"de\", \"ba\", \"ge\", \"ro\"];\n  const obj = {};\n  if (Object.prototype.hasOwnProperty.call(translations, key)) {\n    console.log(\"Cancel I18N\");\n    return;\n  }\n  langs.forEach(lang => {\n    obj[lang] = \"\";\n  });\n  translations[`${key}`] = obj;\n  const updatedJsonData = JSON.stringify(translations, null, 2);\n  fetch(\"http://localhost:3000/Weazel\", {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: updatedJsonData\n  }).then(response => {\n    if (response.ok) {\n      console.log(\"Data added to JSON file successfully!\");\n    } else {\n      console.error(\"Error writing file:\", response.statusText);\n    }\n  }).catch(error => {\n    console.error(\"Error writing file:\", error);\n  });\n}\nfunction createI18N(locale) {\n  document.querySelector(\"html\").setAttribute(\"lang\", locale);\n  return createI18n({\n    legacy: true,\n    locale: locale || \"ua\",\n    messages: I18NTranslations,\n    numberFormats,\n    missing: (locale, key) => {\n      try {\n        if (window.AppData.getters.getIsTestServer) {\n          window.mp.trigger('Translate:TryGetText', key);\n          return `NP: ${key}`;\n        } else return \" \";\n      } catch (ex) {\n        return \"\";\n      }\n    }\n  });\n}\nexport default createI18N;","map":null,"metadata":{},"sourceType":"module"}