{"ast":null,"code":"import Select from \"../../../../Components/CustomSelect/CustomSelect.vue\";\nexport default {\n  data() {\n    return {\n      onlyNumbFields: [\"sum\", \"deadDay\", \"deadLineData\", \"count\", \"freezeBones\"],\n      isNoValidValueList: [],\n      filteredOptions: [],\n      placeholderText: \"\",\n      blankData: null,\n      selectedConfig: null,\n      abledField: [\"selectedProdact\", \"count\", \"signatureExecutor\"]\n    };\n  },\n  props: {\n    startedBlankData: {\n      type: Object\n    },\n    type: String,\n    newContractMenuData: Object,\n    setNewContract: Function,\n    isApproved: Boolean,\n    govContract: Object\n  },\n  components: {\n    Select\n  },\n  watch: {\n    blankData: {\n      handler(newValue) {\n        const changedProperty = this.getChangedPropertyName(newValue, this.prevBlankData);\n        if (changedProperty === \"selectedProduct\" || changedProperty === \"count\") {\n          this.selectedConfig = this.blankData.selectedProduct;\n          this.calculatingValues();\n        }\n        this.checkIsValidValue(changedProperty, newValue[changedProperty]);\n        const obj = {\n          deadLineData: {\n            day: \"\",\n            month: \"\",\n            year: \"\",\n            hours: \"\",\n            minutes: \"\"\n          }\n        };\n        this.$recursiveAssign(newValue, obj, true);\n        this.prevBlankData = obj;\n        if (this.setNewContract) {\n          this.setNewContract(this.isNoValidValueList.length ? null : newValue);\n        }\n      },\n      deep: true\n    },\n    isApproved() {\n      if (this.isApproved) {\n        this.blankData.isApproved = true;\n      }\n    }\n  },\n  methods: {\n    handleInput() {\n      this.filteredOptions = this.newContractMenuData?.familyList.filter(option => option.toLowerCase().startsWith(this.blankData.executor.toLowerCase())).slice(0, 5);\n    },\n    getPlayerList() {\n      return this.govContract?.itemConfig?.map(item => item.name);\n    },\n    calculatingValues() {\n      this.isNoValidValueList = this.isNoValidValueList.filter(e => e !== \"sum\");\n      if (!this.blankData.selectedProduct || !this.blankData.count) {\n        this.blankData.sum = \"\";\n        this.blankData.freezeBones = \"\";\n        this.blankData.deadLineData = {\n          day: \"\",\n          month: \"\",\n          year: \"\",\n          hours: \"\",\n          minutes: \"\"\n        };\n        return;\n      }\n      this.selectedConfig = this.blankData.itemConfig.find(item => item.name === this.blankData.selectedProduct);\n      this.blankData.sum = this.selectedConfig.pricePerItem * this.blankData.count;\n      this.blankData.freezeBones = this.blankData.sum;\n      const hoursToAdd = Math.floor(this.blankData.count / this.selectedConfig.itemPerHour);\n      this.blankData.deadLineData = this.getDeadline(hoursToAdd);\n    },\n    selectOption(event) {\n      if (this.filteredOptions.length > 0) {\n        event.preventDefault();\n        this.blankData.executor = this.filteredOptions[0];\n        this.filteredOptions = [];\n      }\n    },\n    getDeadline(hoursToAdd) {\n      const deadline = new Date(Date.now() + hoursToAdd * 3600000);\n      const day = deadline.getDate().toString().padStart(2, \"0\");\n      const month = (deadline.getMonth() + 1).toString().padStart(2, \"0\");\n      const year = deadline.getFullYear().toString();\n      const hours = deadline.getHours().toString().padStart(2, \"0\");\n      const minutes = deadline.getMinutes().toString().padStart(2, \"0\");\n      return {\n        day,\n        month,\n        year,\n        hours,\n        minutes\n      };\n    },\n    selectOptionFromList(option) {\n      this.blankData.executor = option;\n      this.filteredOptions = [];\n    },\n    highlightMatchedText(option) {\n      const regex = new RegExp(`^${this.inputText}`, \"i\");\n      return option.replace(regex, \"<strong>$&</strong>\");\n    },\n    checkIsValidValue(name, value) {\n      const numRegex = /^\\d+$/;\n      if (name === \"deadLineData\") {\n        if (this.validateDate(value.day, value.month, value.year, value.hours, value.minutes, 10, 2)) {\n          if (this.isNoValidValueList.includes(name)) {\n            this.isNoValidValueList = this.isNoValidValueList.filter(e => e !== name);\n          }\n          return;\n        } else {\n          this.isNoValidValueList.push(name);\n        }\n      }\n      if (name === \"signatureExecutor\") {\n        if (/^[A-Za-z]+$/.test(value) && value.length <= 11) {\n          if (this.isNoValidValueList.includes(name)) {\n            this.isNoValidValueList = this.isNoValidValueList.filter(e => e !== name);\n          }\n        } else {\n          this.isNoValidValueList.push(name);\n        }\n      }\n      if (this.onlyNumbFields.includes(name)) {\n        if (numRegex.test(value)) {\n          if (this.isNoValidValueList.includes(name)) {\n            this.isNoValidValueList = this.isNoValidValueList.filter(e => e !== name);\n          }\n        } else {\n          this.isNoValidValueList.push(name);\n        }\n      }\n    },\n    setisActiveNewContract(value) {\n      this.isActiveNewContract = value;\n    },\n    validateDate(day, month, year, hours, minutes, maxDaysOffset, minDaysOffset) {\n      const dateStr = `${year}-${month}-${day}T${hours}:${minutes}`;\n      const date = new Date(dateStr);\n      const now = new Date();\n      const isValidDate = dateStr === this.formatDate(date) && date >= now;\n      if (!isValidDate) {\n        return false;\n      }\n      if (maxDaysOffset !== undefined) {\n        const daysOffset = Math.floor((date - now) / (1000 * 60 * 60 * 24));\n        return daysOffset <= maxDaysOffset && daysOffset >= minDaysOffset;\n      }\n      return true;\n    },\n    validateDateWithMargin(date, maxMarginInDays) {\n      const currentDate = new Date();\n      const maxMarginInMs = maxMarginInDays * 24 * 60 * 60 * 1000;\n      const dateDiffInMs = Math.abs(date.getTime() - currentDate.getTime());\n      if (dateDiffInMs > maxMarginInMs) {\n        return false;\n      }\n      return true;\n    },\n    formatDate(date) {\n      const day = date.getDate().toString().padStart(2, \"0\");\n      const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n      const year = date.getFullYear().toString();\n      const hours = date.getHours().toString().padStart(2, \"0\");\n      const minutes = date.getMinutes().toString().padStart(2, \"0\");\n      return `${year}-${month}-${day}T${hours}:${minutes}`;\n    },\n    disabledAllInputs() {\n      setTimeout(() => {\n        const inputs = this.getAllInputs(this.$el);\n        for (let i = 0; i < inputs.length; i++) {\n          if (!this.type) {\n            if (inputs[i].dataset.type === \"signature\") {\n              inputs[i].disabled = true;\n            }\n            if (this.govContract && !this.abledField.includes(inputs[i].dataset.type)) {\n              inputs[i].disabled = true;\n            }\n          } else {\n            if (this.type == \"incoming\") {\n              if (inputs[i].dataset.type !== \"signature\") {\n                inputs[i].disabled = true;\n              }\n            } else {\n              inputs[i].disabled = true;\n            }\n          }\n        }\n      }, 500);\n    },\n    getAllInputs(element) {\n      let inputs = element.querySelectorAll(\"input\");\n      element.childNodes.forEach(childNode => {\n        if (childNode.nodeType === Node.ELEMENT_NODE) {\n          const childInputs = this.getAllInputs(childNode);\n          if (Array.isArray(inputs) && Array.isArray(childInputs)) {\n            inputs = inputs.concat(childInputs);\n          }\n        }\n      });\n      return inputs;\n    },\n    getChangedPropertyName(newValue, prevBlankData) {\n      if (!prevBlankData) {\n        return null;\n      }\n      for (const prop in newValue) {\n        // eslint-disable-next-line no-prototype-builtins\n        if (newValue.hasOwnProperty(prop)) {\n          const oldValue = prevBlankData[prop];\n          const newValueItem = newValue[prop];\n          if (typeof oldValue === \"object\" && typeof newValueItem === \"object\") {\n            const changedSubProperties = this.getChangedPropertyName(newValueItem, oldValue);\n            if (changedSubProperties) {\n              return prop;\n            }\n          } else if (oldValue !== newValueItem) {\n            return prop;\n          }\n        }\n      }\n      return null;\n    }\n  },\n  mounted() {\n    if (this.govContract) {\n      this.blankData = {\n        ...this.startedBlankData,\n        ...this.govContract\n      };\n      this.blankData.executor = this.newContractMenuData.ownerName;\n      this.blankData.data = this.govContract.currentDate;\n    } else {\n      this.blankData = Object.assign({}, this.startedBlankData);\n      if (this.newContractMenuData) {\n        this.blankData.data = this.newContractMenuData.currentData;\n        this.blankData.customer = this.newContractMenuData.ownerName;\n        this.blankData.id = this.newContractMenuData.id;\n      }\n    }\n    this.disabledAllInputs();\n  }\n};","map":null,"metadata":{},"sourceType":"module"}