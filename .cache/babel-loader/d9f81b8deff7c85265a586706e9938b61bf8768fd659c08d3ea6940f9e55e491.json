{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapGetters } from \"vuex\";\nimport InfoModal from \"../Components/InfoModal.vue\";\nimport IconSortBy from \"../Components/IconSortBy.vue\";\nimport Select from \"../../../../Components/CustomSelect/CustomSelect.vue\";\nimport InfoSection from \"../Components/InfoSection.vue\";\n// eslint-disable-next-line no-unused-vars\nimport infoModalsData from \"../../../../Assets/infoModalsData\";\nexport default {\n  data() {\n    return {\n      qwery: \"\",\n      infoModalsData,\n      selectTest: \"zhor\",\n      sortType: null,\n      sortOrder: null,\n      lastAction: null,\n      infoPositon: null,\n      showSelectOptionsId: null,\n      playerPriority: 0\n    };\n  },\n  components: {\n    InfoModal,\n    InfoSection,\n    IconSortBy,\n    Select\n  },\n  computed: {\n    ...mapGetters(\"family\", {\n      playerList: \"getPlayerList\",\n      maxMembers: \"getMaxMembers\",\n      office: \"getOfficeData\",\n      rankList: \"getRankList\",\n      playerPermissions: \"getPlayerPermissions\",\n      isOwner: \"getIsOwner\",\n      playerUID: \"getPlayerUID\",\n      rankEditor: \"getRankEditor\"\n    }),\n    filteredPlayerList() {\n      return !this.qwery ? this.playerList : this.playerList.filter(player => player.PlayerName.toLowerCase().includes(this.qwery.toLowerCase()));\n    },\n    sortedPlayerList() {\n      if (!this.sortType) {\n        return this.filteredPlayerList;\n      }\n      const getPriority = rankId => {\n        const rank = this.rankList.find(r => r.Id === rankId);\n        return rank.Priority;\n      };\n      const sortOrder = this.sortOrder;\n      const sortingMethods = {\n        name(arr) {\n          return arr.slice().sort((a, b) => sortOrder === \"arc\" ? a.PlayerName.localeCompare(b.PlayerName) : b.PlayerName.localeCompare(a.PlayerName));\n        },\n        rank(arr) {\n          return arr.slice().sort((a, b) => sortOrder === \"arc\" ? getPriority(b.RankId) - getPriority(a.RankId) : getPriority(a.RankId) - getPriority(b.RankId));\n        },\n        online(arr) {\n          return arr.slice().sort((a, b) => sortOrder === \"arc\" ? b.OnlineTime.Week - a.OnlineTime.Week : a.OnlineTime.Week - b.OnlineTime.Week);\n        }\n      };\n      return sortingMethods[this.sortType](this.filteredPlayerList);\n    },\n    rankOptionList() {\n      return this.rankList.map(rank => rank.RankName);\n    }\n  },\n  watch: {\n    rankEditor() {\n      const playerData = this.playerList.find(p => p.Id === this.playerUID);\n      this.playerPriority = this.rankList.find(r => r.Id === playerData.RankId).Priority;\n    }\n  },\n  methods: {\n    goToRoute(path) {\n      this.$router.push(path);\n    },\n    checkPriority(player) {\n      if (!this.playerPriority) {\n        const playerData = this.playerList.find(p => p.Id === this.playerUID);\n        this.playerPriority = this.rankList.find(r => r.Id === playerData.RankId).Priority;\n      }\n      const playerPriority = this.rankList.find(r => r.Id === player.RankId).Priority;\n      return this.playerPriority > playerPriority;\n    },\n    checkPermisions(perm) {\n      return this.playerPermissions.includes(perm);\n    },\n    onSelectNewRank(id, name) {\n      const chnagedRank = this.rankList.find(r => r.RankName === name);\n      this.$callClient(\"C:Family:Tablet:Action\", \"ChangePlayerRank\", {\n        playerUUID: id,\n        RankId: chnagedRank.Id\n      });\n    },\n    getRankName(rankId) {\n      return this.rankList.find(rank => rank.Id === rankId).RankName;\n    },\n    convertToHM(minutes) {\n      const hours = Math.floor(minutes / 60);\n      const mins = minutes % 60;\n      return [hours, mins];\n    },\n    onClickSelect(id) {\n      this.showSelectOptionsId = id;\n    },\n    onDisband() {\n      const UniversalModalData = {\n        title: this.$t(\"Расформирование семьи\"),\n        content: [{\n          type: \"description\",\n          value: this.$t(\"Вы действительно хотите расформировaть семью <span>без возможности востановления<span>?\")\n        }],\n        buttons: {\n          submit: {\n            name: this.$t(\"Да\"),\n            event: \"W:FieldRental:setData\",\n            handler: () => {\n              this.$callClient(\"C:Family:Tablet:Action\", \"Disband\", {});\n              this.$callClient(\"C:Family:Tablet:Close\");\n            }\n          },\n          cansel: {\n            name: this.$t(\"Отмена\"),\n            event: \"W:FieldRental:setData\"\n          }\n        }\n      };\n      this.$UniversalModal.create(UniversalModalData);\n    },\n    deletePlayer(player) {\n      const UniversalModalData = {\n        title: this.$t(\"Изгнание участника\"),\n        content: [{\n          type: \"description\",\n          value: this.$t(`Вы действительно хотите изгнать участника <span>{0}<span>?`, [player.PlayerName])\n        }],\n        buttons: {\n          submit: {\n            name: this.$t(\"Да\"),\n            handler: () => {\n              this.$callClient(\"C:Family:Tablet:Action\", \"Kick\", {\n                Id: player.Id\n              });\n            }\n          },\n          cansel: {\n            name: this.$t(\"Отмена\")\n          }\n        }\n      };\n      this.$UniversalModal.create(UniversalModalData);\n    },\n    changeRank(id, type) {\n      this.lastAction = type;\n      const currentPlayer = this.playerList.find(player => player.Id === id);\n      let nextRankId;\n      if (type === \"+\") {\n        nextRankId = currentPlayer.RankId === this.rankList.length ? 1 : currentPlayer.RankId + 1;\n      } else {\n        nextRankId = currentPlayer.RankId === 1 ? this.rankList.length : currentPlayer.RankId - 1;\n      }\n      const nextRank = this.rankList.find(rank => rank.Id === nextRankId);\n      currentPlayer.RankId = nextRankId;\n      currentPlayer.RankName = nextRank.RankName;\n    },\n    setPosition(position) {\n      this.infoPositon = position;\n    },\n    setSortType(sortType) {\n      if (this.sortType === sortType) {\n        if (this.sortOrder === \"dec\") {\n          this.sortType = null;\n          return;\n        }\n        this.sortOrder = \"dec\";\n        return;\n      }\n      this.sortType = sortType;\n      this.sortOrder = \"arc\";\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}