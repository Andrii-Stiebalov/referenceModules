{"ast":null,"code":"import categories from \"./Assets/Icons/categories.vue\";\nimport sort from \"./Assets/Icons/sort.vue\";\nimport transport from \"./Assets/Icons/transport.vue\";\nimport rent from \"./Assets/Icons/rent.vue\";\nimport genders from \"./Assets/Icons/genders.vue\";\nimport { getitemCardType, getClothesType, getTransportType } from \"../../Assets/functions\";\nexport default {\n  name: \"MPSortSelect\",\n  props: {\n    type: {\n      type: String,\n      required: true\n    },\n    placeholder: {\n      type: String,\n      required: true\n    },\n    icon: {\n      type: String,\n      required: true\n    },\n    resetTitle: {\n      type: String,\n      required: true\n    }\n  },\n  components: {\n    categories,\n    sort,\n    transport,\n    rent,\n    genders\n  },\n  data() {\n    return {\n      optionsLimit: 10,\n      isOpened: false,\n      selectedOption: null\n    };\n  },\n  watch: {\n    $route() {\n      this.resetOption();\n    },\n    getSearchValue() {\n      if (this.getSearchValue) {\n        this.resetOption();\n      }\n    }\n  },\n  computed: {\n    getGraphOptions() {\n      return [{\n        title: \"За рік\",\n        value: \"year\"\n      }, {\n        title: \"За місяць\",\n        value: \"month\"\n      }, {\n        title: \"За день\",\n        value: \"day\"\n      }];\n    },\n    getSearchValue() {\n      return this.$store.getters[\"marketPlace/getSearchValue\"];\n    },\n    getSelectOptions() {\n      if ([\"category\", \"transport\", \"dealership\", \"clothes\"].includes(this.type)) {\n        return this.getAvailableCategories;\n      } else if (this.type === \"sort\") {\n        return this.getSortFilters;\n      } else if (this.type === \"rent\") {\n        return this.getRentTypes;\n      } else if (this.type === \"gender\") {\n        return this.getGenders;\n      } else if (this.type.toLocaleLowerCase().includes(\"graph\")) {\n        return this.getGraphOptions;\n      } else {\n        return [];\n      }\n    },\n    getSortFilters() {\n      const filters = [{\n        title: \"За зростанням ціни\",\n        value: \"increasing\"\n      }, {\n        title: \"За спаданням ціни\",\n        value: \"decreasing\"\n      }, {\n        title: \"За датою закінчення\",\n        value: \"expireDate\"\n      }];\n      if (this.$route.params.section !== \"auction\") {\n        filters.unshift({\n          title: \"Найпопулярніші\",\n          value: \"popular\"\n        });\n      }\n      if (this.$route.params.section !== \"auction\") {\n        filters.push({\n          title: \"За датою розміщення\",\n          value: \"addDate\"\n        });\n      }\n      if (this.$route.params.section === \"auction\") {\n        filters.push({\n          title: \"По часу тривалості\",\n          value: \"lifeTime\"\n        });\n      }\n      return filters;\n    },\n    getAvailableCategories() {\n      const itemsCard = this.$store.getters[\"marketPlace/getCardsList\"](this.$route.params.section);\n      const categories = [];\n      if (itemsCard) {\n        itemsCard.forEach(itemCard => {\n          let value, title;\n          switch (this.type) {\n            case \"category\":\n              value = itemCard.objectType;\n              title = getitemCardType(value, false);\n              break;\n            case \"transport\":\n              value = itemCard.vehicleType;\n              title = getTransportType(value);\n              break;\n            case \"clothes\":\n              value = itemCard.clothesType;\n              title = getClothesType(value);\n              break;\n            case \"dealership\":\n              value = itemCard.carRoom;\n              title = value;\n              break;\n            default:\n              break;\n          }\n          if (!categories.find(category => category.value === value)) {\n            categories.push({\n              title: title,\n              value: value\n            });\n          }\n        });\n      }\n      return categories;\n    },\n    getRentTypes() {\n      return [{\n        title: \"Погодинний\",\n        value: \"hours\"\n      }, {\n        title: \"Подобовий\",\n        value: \"days\"\n      }];\n    },\n    getGenders() {\n      return [{\n        title: \"Чоловіче\",\n        value: true\n      }, {\n        title: \"Жіноче\",\n        value: false\n      }];\n    },\n    getSelectResetTitle() {\n      if (this.type === \"category\") {\n        return \"Без категорії\";\n      } else if ([\"sort\", \"transport\"].includes(this.type)) {\n        return \"Без фільтру\";\n      } else {\n        return \"\";\n      }\n    },\n    getSelectedItem() {\n      return this.$store.getters[\"marketPlace/getSelectedItem\"];\n    }\n  },\n  mounted() {\n    if (this.type.toLocaleLowerCase().includes(\"graph\")) {\n      this.selectOption(this.getGraphOptions[this.getGraphOptions.length - 1]);\n    }\n  },\n  methods: {\n    onMouseUp() {\n      this.isOpened = true;\n    },\n    onSelect() {\n      this.isOpened = !this.isOpened;\n    },\n    onMouseOut(event) {\n      if (!this.$refs.select.contains(event.relatedTarget)) {\n        this.isOpened = false;\n      }\n    },\n    resetOption() {\n      this.selectedOption = null;\n      this.$store.commit(\"marketPlace/setFilter\", [this.type, null]);\n    },\n    selectOption(option) {\n      if (this.selectedOption !== option.title) {\n        this.selectedOption = option.title;\n        if (this.type.toLocaleLowerCase().includes(\"graph\")) {\n          const actions = {\n            businessGraph: () => {\n              this.$callClient(\"C:MarketPlace:Listing:Business:Set\", this.getSelectedItem.id, option.value);\n            },\n            exchangeGraph: () => {\n              this.$emit(\"setSelectValue\", option.value);\n              this.$callClient(\"C:MarketPlace:Exchange:Graph:Set\", this.getSelectedItem.id, option.value);\n            }\n          };\n          actions[this.type]();\n        } else {\n          this.$store.commit(\"marketPlace/resetSearch\");\n          this.$store.commit(\"marketPlace/setFilter\", [this.type, option.value]);\n        }\n      }\n      this.isOpened = false;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}