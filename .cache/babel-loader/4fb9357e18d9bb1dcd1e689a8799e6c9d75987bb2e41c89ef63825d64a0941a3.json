{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import { Map, View } from \"ol\";\n// import ImageLayer from \"ol/layer/Image\";\n// import Static from \"ol/source/ImageStatic\";\n\nimport Feature from \"ol/Feature\";\nimport Fill from \"ol/style/Fill\";\nimport Polygon from \"ol/geom/Polygon\";\nimport Stroke from \"ol/style/Stroke\";\nimport Style from \"ol/style/Style\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nconst greenPolygonStyle = new Style({\n  fill: new Fill({\n    color: \"rgba(64, 191, 106, 0.2)\"\n  }),\n  stroke: new Stroke({\n    color: \"#40BF6A\",\n    width: 2\n  })\n});\nconst redPolygonStyle = new Style({\n  fill: new Fill({\n    color: \"rgba(223, 32, 77, 0.2)\"\n  }),\n  stroke: new Stroke({\n    color: \"#DF204D\",\n    width: 2\n  })\n});\nconst yellowPolygonStyle = new Style({\n  fill: new Fill({\n    color: \"#FFCC4D33\"\n  }),\n  stroke: new Stroke({\n    color: \"#FFCC4D\",\n    width: 2\n  })\n});\nconst whitePolygonStyle = new Style({\n  fill: new Fill({\n    color: \"#E5FFFF33\"\n  }),\n  stroke: new Stroke({\n    color: \"#E5FFFF \",\n    width: 2\n  })\n});\nconst transparentPolygonStyle = new Style({\n  fill: new Fill({\n    color: \"#DF204D1a\"\n  }),\n  stroke: new Stroke({\n    color: \"#DF204D1a\",\n    width: 2\n  })\n});\nconst bindColor = {\n  0: whitePolygonStyle,\n  1: yellowPolygonStyle,\n  2: redPolygonStyle,\n  3: redPolygonStyle\n};\nlet interValList = [];\nexport function drawFamilyPolygons(polygons, ownFamilyName, map, mapstatus) {\n  if (!polygons) {\n    return;\n  }\n  if (interValList.length) {\n    interValList.forEach(inaterval => clearInterval(inaterval));\n  }\n  const features = [];\n  for (let i = 0; i < polygons.length; i++) {\n    const polygon = polygons[i];\n    const coords = polygon.coords.map(([x, y]) => [x, y]);\n    const polygonFeature = new Feature({\n      geometry: new Polygon([coords])\n    });\n    const polygonStatus = mapstatus.find(status => status.UID == polygon.id);\n    let polygonStyle;\n    if (polygonStatus?.Status === 3) {\n      const secodColor = polygonStatus.familyName !== ownFamilyName ? transparentPolygonStyle : greenPolygonStyle;\n      setAnimationToPolygon(polygonFeature, map, secodColor);\n    } else if (polygonStatus) {\n      polygonStyle = polygonStatus.familyName !== ownFamilyName ? bindColor[polygonStatus.Status] : greenPolygonStyle;\n    }\n    if (polygonStatus) {\n      polygonFeature.setStyle(polygonStyle);\n      features.push(polygonFeature);\n    }\n  }\n  if (vectorLayer) {\n    vectorLayer.getSource().clear();\n  }\n  const vectorSource = new VectorSource({\n    features: features\n  });\n  vectorLayer = new VectorLayer({\n    source: vectorSource\n  });\n  map.addLayer(vectorLayer);\n}\nlet interVal;\nfunction setAnimationToPolygon(polygon, map, color) {\n  let counter = 1;\n  counter++;\n  let localVector;\n  interVal = setInterval(() => {\n    polygon.setStyle(counter % 2 ? redPolygonStyle : color);\n    counter++;\n    const vectorSource = new VectorSource({\n      features: [polygon]\n    });\n    if (localVector) {\n      localVector.getSource().clear();\n    }\n    localVector = new VectorLayer({\n      source: vectorSource\n    });\n    map.addLayer(localVector);\n  }, 500);\n  interValList.push(interVal);\n}\nlet vectorLayer;\nexport function drawFieldPolygons(polygons, map, holdersName) {\n  function addButtonToPolygon(polygon, id) {\n    var center = polygon.getInteriorPoint().getCoordinates();\n    const button = document.getElementById(id);\n    button.style.position = \"absolute\";\n    map.on(\"postcompose\", function () {\n      var pixel = map.getPixelFromCoordinate(center);\n      button.style.left = pixel[0] + \"px\";\n      button.style.top = pixel[1] + \"px\";\n      button.style.transform = \"scale(\" + (Math.pow(1.2, map.getView().getZoom() - 14) - 1) + \")\";\n    });\n    map.once(\"rendercomplete\", function () {\n      var pixel = map.getPixelFromCoordinate(center);\n      button.style.left = pixel[0] + \"px\";\n      button.style.top = pixel[1] + \"px\";\n      button.style.transform = \"scale(\" + (Math.pow(1.2, map.getView().getZoom() - 14) - 1) + \")\";\n    });\n  }\n  const features = [];\n  for (let i = 0; i < polygons.length; i++) {\n    const polygon = polygons[i];\n    const coords = polygon.coords.map(coord => coord.map(e => e / 2));\n    const polygonFeature = new Feature({\n      geometry: new Polygon([coords])\n    });\n    let polygonStyle;\n    if (!polygon.isFree) {\n      if (polygon.holdersName === holdersName) {\n        polygonStyle = yellowPolygonStyle;\n      } else {\n        polygonStyle = redPolygonStyle;\n      }\n    } else {\n      polygonStyle = greenPolygonStyle;\n    }\n    polygonFeature.setStyle(polygonStyle);\n    features.push(polygonFeature);\n    addButtonToPolygon(polygonFeature.getGeometry(), polygon.id);\n  }\n  if (vectorLayer) {\n    vectorLayer.getSource().clear();\n  }\n  const vectorSource = new VectorSource({\n    features: features\n  });\n  vectorLayer = new VectorLayer({\n    source: vectorSource\n  });\n  map.addLayer(vectorLayer);\n}\nfunction setResponsiveButton(button, map, callback) {\n  const resolution = map.getView().getResolution();\n  const imgWidth = 5000;\n  const imgHeight = 7695;\n  const scaledWidth = imgWidth / resolution;\n  var pixel = map.getPixelFromCoordinate([-2500, 3847.5]);\n  button.style.left = pixel[0] + \"px\";\n  button.style.top = pixel[1] + \"px\";\n  button.style.width = imgWidth + \"px\";\n  button.style.height = imgHeight + \"px\";\n  button.style.transform = \"scale(\" + scaledWidth / imgWidth + \")\";\n  callback(scaledWidth / imgWidth);\n}\nexport function bindTail(map, elem, callback) {\n  const button = elem;\n  button.style.position = \"absolute\";\n  map.on(\"postcompose\", function () {\n    setResponsiveButton(button, map, callback);\n  });\n  map.once(\"rendercomplete\", function () {\n    setResponsiveButton(button, map, callback);\n  });\n  setResponsiveButton(button, map, callback);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}