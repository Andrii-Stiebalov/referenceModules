{"ast":null,"code":"import CategoryList from \"./Components/CategorySection/CategoryList\";\nimport SideBar from \"./Components/SideBar\";\nexport default {\n  data() {\n    return {\n      catigoryList: [],\n      selectedCatigoryId: null,\n      localSelectedItemId: null,\n      selectedData: {},\n      selectedSubCatigory: null\n    };\n  },\n  components: {\n    CategoryList,\n    SideBar\n  },\n  watch: {\n    selectedCatigoryId(val) {\n      this.localSelectedItemId = this.selectedData[val];\n      this.selectedSubCatigory = null;\n    },\n    localSelectedItemId(val) {\n      console.log(val);\n    },\n    selectedSubCatigory() {\n      // this.localSelectedItemId = null;\n    },\n    selectedItem(val) {\n      console.log(val);\n    }\n  },\n  computed: {\n    selectedCatigory() {\n      return this.catigoryList.find(item => item.id == this.selectedCatigoryId);\n    },\n    selectedItemId() {\n      if (!this.selectedCatigoryId) {\n        return null;\n      }\n      return this.selectedData[this.selectedCatigoryId];\n    },\n    selectedItem() {\n      if (this.localSelectedItemId == this.selectedItemId || !this.selectedCatigory) {\n        return null;\n      }\n      if (this.selectedCatigory?.subcategories) {\n        return this.selectedCatigory?.subcategories?.find(item => item.id == this.selectedSubCatigory?.id)?.items?.find(item => item.id == this.localSelectedItemId);\n      }\n      return this.selectedCatigory?.items?.find(item => item.id == this.localSelectedItemId);\n    }\n  },\n  methods: {\n    setData(data) {\n      this.$recursiveAssign(data, this.$data, true);\n    },\n    onSelectLocalSelectedItemId(id) {\n      this.localSelectedItemId = id;\n      if (this.selectedCatigory?.subcategories) {\n        this.$callClient(\"Tuning:setItem\", this.selectedCatigoryId, this.selectedSubCatigory.id, id);\n        return;\n      }\n      this.$callClient(\"Tuning:setItem\", this.selectedCatigoryId, id);\n    },\n    selectCatigoryId(id) {\n      this.selectedCatigoryId = id;\n      this.$callClient(\"Tuning:setCategory\", id);\n    },\n    onExit() {\n      this.$callClient(\"Tuning:closeApp\");\n    },\n    onKeyUp() {\n      if (event.keyCode == 27) {\n        this.onExit();\n      }\n    },\n    formatMoney(amount) {\n      return amount.toLocaleString(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n        minimumFractionDigits: 0\n      }).replace(\"$\", \"\").replace(/,/g, \".\");\n    },\n    onPay() {\n      // getCartItem(item,color){\n      //             let cartItem = {};\n      //             if(this.navigationActive && this.navigationActive.id!==undefined){\n      //                 cartItem['category_id'] = this.navigationActive.id;\n      //                 cartItem['category_name']=this.navigationActive.name;\n      //                 if(this.subcategoryActive && this.subcategoryActive.id!==undefined){\n      //                     cartItem['subcategory_id'] = this.subcategoryActive.id;\n      //                     cartItem['subcategory_name']=this.subcategoryActive.name;\n      //                 }\n      //                 cartItem['item_id'] = item.id;\n      //                 if(item.name!==undefined) cartItem['item_name'] = item.name;\n      //                 if(item.price!==undefined){\n      //                     cartItem['item_price'] = item.price;\n      //                 }else{\n      //                     if(this.subcategoryActive && this.subcategoryActive.price!==undefined){\n      //                         cartItem['item_price'] = this.subcategoryActive.price;\n      //                     }else if(this.navigationActive && this.navigationActive.price!==undefined){\n      //                         cartItem['item_price'] = this.navigationActive.price;\n      //                     }\n      //                 }\n      //                 if(item.color!==undefined) cartItem['item_color'] = item.color;\n      //                 if(color!==undefined) cartItem['hex'] = color.hex;\n      //             }\n      const data = {\n        category_id: this.selectedCatigoryId,\n        category_name: this.selectedCatigory.name,\n        item_id: this.selectedItem.id,\n        item_name: this.selectedItem.name,\n        item_price: this.selectedItem.price\n      };\n      if (this.selectedSubCatigory) {\n        data[\"subcategory_id\"] = this.selectedSubCatigory.id;\n        data[\"subcategory_name\"] = this.selectedSubCatigory.name;\n      }\n      const UniversalModalData = {\n        title: this.$t(\"Покупка товара\"),\n        content: [{\n          type: \"description\",\n          value: this.$t(\"Вы действительно хотите установить <span>{0}: {1}</span> за <span>{2}</span>\", [this.selectedCatigory.name, this.selectedItem.name, this.selectedItem.price])\n        }],\n        buttons: {\n          submit: {\n            name: this.$t(\"Картой\"),\n            handler: () => {\n              this.$callClient(\"C:TuningUI:Buy\", \"bank\", data);\n            }\n          },\n          additional: {\n            name: this.$t(\"Наличными\"),\n            handler: () => {\n              this.$callClient(\"C:TuningUI:Buy\", \"cash\", data);\n            }\n          },\n          cansel: {\n            name: this.$t(\"Отмена\")\n          }\n        }\n      };\n      this.$UniversalModal.create(UniversalModalData);\n    }\n  },\n  mounted() {\n    window.addEventListener(\"keyup\", this.onKeyUp);\n    this.$onClient(\"W:TuningUI:SetData\", this.setData);\n    this.$callClient(\"C:TuningUI:Ready\");\n  }\n};","map":null,"metadata":{},"sourceType":"module"}