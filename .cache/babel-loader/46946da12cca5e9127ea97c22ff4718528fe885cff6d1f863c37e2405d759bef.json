{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  namespaced: true,\n  state: {\n    cardsDistribution: [\"SS14\", \"SS12\", \"SS9\", \"HH14\", \"back\"],\n    cardsDistributionCombinations: [],\n    otherPlayers: [{\n      id: 1,\n      show: true,\n      avatar: \"img/poker/avatar.png\",\n      name: \"\",\n      currentRate: 374823,\n      chipsCount: 0,\n      bank: 4200,\n      state: \"Уравнял(а)\",\n      cards: [\"back\", \"SS14\"],\n      winCombinations: [],\n      isWinner: false,\n      cardsDisabled: false,\n      isVoise: false\n    }, {\n      id: 2,\n      show: true,\n      avatar: \"img/poker/avatar.png\",\n      name: \"SecondSecondFirstuseruseruser user\",\n      currentRate: 999,\n      chipsCount: 0,\n      bank: 4200,\n      state: \"Думает\",\n      cards: [\"back\", \"SS14\"],\n      winCombinations: [],\n      isWinner: false,\n      cardsDisabled: false,\n      isVoise: false\n    }, {\n      id: 3,\n      show: true,\n      avatar: \"img/poker/avatar.png\",\n      name: \"Thrid useruseruser\",\n      currentRate: 100,\n      chipsCount: 0,\n      bank: 4200,\n      state: \"Уравнял(а)\",\n      cards: [\"back\", \"SS14\"],\n      winCombinations: [],\n      isWinner: false,\n      cardsDisabled: false,\n      isVoise: false\n    }, {\n      id: 4,\n      show: true,\n      avatar: \"https://img.redbull.com/images/c_crop,x_0,y_0,h_1822,w_3239/c_fill,w_890,h_593/q_auto,f_auto/redbullcom/2017/03/24/1331850781287_2/how-long-will-it-take-you-to-get-these-cars\",\n      name: \"Fourth useruseruser\",\n      currentRate: 50,\n      chipsCount: 60000,\n      bank: 4200,\n      state: \"Уравнял(а)\",\n      cards: [\"back\", \"SS14\"],\n      winCombinations: [],\n      isWinner: false,\n      cardsDisabled: false,\n      isVoise: false\n    }, {\n      id: 5,\n      show: true,\n      avatar: \"img/poker/avatar.png\",\n      name: \"Fifth useruseruser\",\n      currentRate: 100,\n      chipsCount: 7000000000,\n      bank: 4200,\n      state: \"Уравнял(а)\",\n      cards: [\"DD10\", \"SS14\"],\n      winCombinations: [],\n      isWinner: false,\n      cardsDisabled: false,\n      isVoise: false\n    }],\n    activePlayer: 0,\n    currentPlayer: {\n      id: 0,\n      avatar: \"https://image.api.playstation.com/vulcan/img/rnd/202102/0422/TkQfZ0v0NF1p8YHovQPIYtr5.png\",\n      name: \"Current user\",\n      currentRate: 1,\n      bank: 4200,\n      chipsCount: 0,\n      state: \"Уравнял(а)\",\n      cards: [\"SS14\", \"SS12\"],\n      winCombinations: [],\n      isWinner: true,\n      cardsDisabled: false,\n      isVoise: true\n    },\n    currentPlayerMove: true,\n    currentPlayerMoveValues: {\n      checkValue: 400,\n      minValue: 200,\n      stepValue: 100\n    },\n    bankAvailable: true,\n    currentPlayerRaiseInput: 0,\n    currentMoveTime: 60,\n    ratesDone: false,\n    allBets: [],\n    allBank: [4555],\n    minChipsValue: null,\n    winCount: 0,\n    autoCheck: false,\n    grantAutoCheck: true,\n    rangeSlider: {\n      listValue: [],\n      posHandle: 0,\n      currentIndex: 0,\n      lastValue: 0,\n      sliderWrap: null,\n      coodrLeftWrap: 0\n    }\n  },\n  mutations: {\n    setCurrentPlayerData: function (state, data) {\n      state.currentPlayer.bank = data.currentPlayer.bank;\n      state.currentPlayer.chipsCount = data.currentPlayer.chipsCount;\n      state.currentPlayer.cards = data.currentPlayer.cards;\n      state.currentPlayer.winCombinations = data.currentPlayer.winCombinations;\n      state.currentPlayer.state = data.currentPlayer.state;\n      state.currentPlayer.isWinner = data.currentPlayer.isWinner;\n      state.currentPlayer.cardsDisabled = data.currentPlayer.cardsDisabled;\n      state.currentPlayer.avatar = data.currentPlayer.avatar;\n      state.bankAvailable = data.bankAvailable;\n      state.activePlayer = data.activePlayer;\n      state.grantAutoCheck = data.grantAutoCheck;\n      state.cardsDistribution = data.cardsDistribution;\n      state.cardsDistributionCombinations = data.cardsDistributionCombinations;\n    },\n    setOtherPlayerData(state, data) {\n      const rightPlayer = state.otherPlayers.find(item => item.id === data.id);\n      rightPlayer.name = data.name;\n      rightPlayer.chipsCount = data.chipsCount;\n      rightPlayer.state = data.state;\n      rightPlayer.cards = data.cards;\n      rightPlayer.winCombinations = data.winCombinations;\n      rightPlayer.isWinner = data.isWinner;\n      rightPlayer.avatar = data.avatar;\n    },\n    hideUser: function (state, value) {\n      const rightPlayer = state.otherPlayers.find(item => item.id === value.id);\n      rightPlayer.show = value.show;\n    },\n    setOtherPlayerName(state, value) {\n      const rightPlayer = state.otherPlayers.find(item => item.id === value.id);\n      rightPlayer.name = value.name;\n    },\n    setOtherPlayerBank(state, value) {\n      const rightPlayer = state.otherPlayers.find(item => item.id === value.id);\n      rightPlayer.bank = value.bank;\n    },\n    setOtherPlayerChipsCount(state, val) {\n      const rightPlayer = state.otherPlayers.find(item => item.id === val.id);\n      rightPlayer.chipsCount = val.value;\n    },\n    setActivePlayer: function (state, value) {\n      state.activePlayer = value;\n    },\n    setOtherPlayerWinCombinations: function (state, value) {\n      const rightPlayer = state.otherPlayers.find(item => item.id === value.id);\n      rightPlayer.winCombinations = value.combinations;\n    },\n    setCurrentPlayerWinCombinations: function (state, combinations) {\n      state.currentPlayer.winCombinations = combinations;\n    },\n    setCardsDistributionCombinations: function (state, combinations) {\n      state.cardsDistributionCombinations = combinations;\n    },\n    setOtherPlayerState: function (state, value) {\n      const rightPlayer = state.otherPlayers.find(item => item.id === value.id);\n      rightPlayer.state = value.value;\n    },\n    setCurrentPlayerState: function (state, value) {\n      state.currentPlayer.state = value;\n    },\n    setUserCards: function (state, value) {\n      const rightPlayer = state.otherPlayers.find(item => item.id === value.id);\n      rightPlayer.cards = value.cards;\n    },\n    setCardsDistribution: function (state, cards) {\n      state.cardsDistribution = cards;\n    },\n    setCurrentPlayerMove: function (state, value) {\n      if (value && value !== state.currentPlayerMove) {\n        const audio = document.getElementById(\"turnSound\");\n        if (audio) {\n          audio.volume = 0.6;\n          audio.play();\n        }\n      }\n      state.currentPlayerMove = value;\n    },\n    setCurrentPlayerChipsCount: function (state, value) {\n      state.currentPlayer.chipsCount = value;\n    },\n    setbankAvailable: function (state, value) {\n      state.bankAvailable = value;\n    },\n    setCurrentMoveTime: function (state, value) {\n      state.currentMoveTime = value;\n    },\n    setAllBets: function (state, value) {\n      state.allBets = value;\n    },\n    setRatesDone: function (state, value) {\n      const audio = document.getElementById(\"ratesDoneSound\");\n      if (audio) {\n        audio.volume = 0.6;\n      }\n      state.ratesDone = value;\n      if (value) {\n        setTimeout(() => {\n          state.allBets = state.allBank;\n          audio.play();\n        }, 1000);\n      }\n    },\n    setCurrentPlayerMoveValues: function (state, value) {\n      const values = state.currentPlayerMoveValues;\n      values.checkValue = value.checkValue;\n      values.minValue = value.minValue;\n      values.stepValue = value.stepValue;\n      state.currentPlayerRaiseInput = value.minValue;\n    },\n    setOtherPlayerCurrentRate: function (state, value) {\n      const rightPlayer = state.otherPlayers.find(item => item.id === value.id);\n      const audio = document.getElementById(\"individualBitSound\");\n      if (audio) {\n        audio.volume = 0.6;\n        if (value && value !== rightPlayer.currentRate) audio.play();\n      }\n      rightPlayer.currentRate = value.value;\n    },\n    setCurrentPlayerCurrentRate: function (state, value) {\n      const audio = document.getElementById(\"individualBitSound\");\n      if (audio) {\n        audio.volume = 0.6;\n        if (value && value !== state.currentPlayer.currentRate) audio.play();\n      }\n      state.currentPlayer.currentRate = value;\n    },\n    incrementPlayerRaiseInput: function (state) {\n      if (state.currentPlayerRaiseInput + state.currentPlayerMoveValues.stepValue <= state.currentPlayer.chipsCount) {\n        state.currentPlayerRaiseInput += state.currentPlayerMoveValues.stepValue;\n      }\n    },\n    decrementPlayerRaiseInput: function (state) {\n      if (state.currentPlayerRaiseInput - state.currentPlayerMoveValues.stepValue >= state.currentPlayerMoveValues.minValue) {\n        state.currentPlayerRaiseInput -= state.currentPlayerMoveValues.stepValue;\n      }\n    },\n    setCurrentPlayerCards: function (state, value) {\n      state.currentPlayer.cards = value;\n    },\n    setCurrentPlayerBank: function (state, value) {\n      state.currentPlayer.bank = value;\n    },\n    setAllBank: function (state, value) {\n      state.allBank = value;\n    },\n    setMinChipsValue(state, value) {\n      state.minChipsValue = value;\n    },\n    setOtherPlayerIsWinner: function (state, value) {\n      const rightPlayer = state.otherPlayers.find(item => item.id === value.id);\n      rightPlayer.isWinner = value.value;\n    },\n    setCurrentPlayerIsWinner: function (state, value) {\n      state.currentPlayer.isWinner = value;\n    },\n    setWinCount: function (state, value) {\n      state.winCount = value;\n      const audio = document.getElementById(\"winningSound\");\n      if (audio) {\n        if (value && state.currentPlayer.isWinner) {\n          audio.volume = 0.6;\n          audio.play();\n        }\n      }\n    },\n    toggleAutoCheck: function (state, value) {\n      state.autoCheck = value;\n      window.mp.trigger(\"poker:autoCheck\", value);\n    },\n    setGrantAutoCheck: function (state, value) {\n      state.grantAutoCheck = value;\n    },\n    setAutoCheck(state, value) {\n      state.autoCheck = value;\n    },\n    setCurrentPlayerRaiseInput: function (state, value) {\n      state.currentPlayerRaiseInput = value;\n    },\n    setOtherPlayerCardsDisabled: function (state, value) {\n      const rightPlayer = state.otherPlayers.find(item => item.id === value.id);\n      rightPlayer.cardsDisabled = value.value;\n    },\n    setCurrentPlayerCardsDisabled: function (state, value) {\n      state.currentPlayer.cardsDisabled = value;\n    },\n    // RANGE SLIDER\n    resetRangeSlider: function (state) {\n      state.rangeSlider.listValue = [], state.rangeSlider.posHandle = 0, state.rangeSlider.currentIndex = 0, state.rangeSlider.lastValue = 0, state.rangeSlider.sliderWrap = null, state.rangeSlider.coodrLeftWrap = 0;\n    },\n    initRangeSlider: function (state) {\n      let min = state.currentPlayerMoveValues.minValue;\n      let max = state.currentPlayer.chipsCount;\n      let step = state.currentPlayerMoveValues.stepValue;\n      let listValue = state.rangeSlider.listValue;\n      let rangeSlider = state.rangeSlider;\n      for (let i = min; i <= max; i += step) {\n        listValue.push({\n          value: i\n        });\n      }\n      let elWrap = document.getElementById(\"sliderWrap\");\n      rangeSlider.sliderWrap = elWrap;\n      if (elWrap) {\n        rangeSlider.coodrLeftWrap = rangeSlider.sliderWrap.getBoundingClientRect().left;\n        let period = elWrap.offsetWidth / listValue.length;\n        let periodStart = 0;\n        let periodEnd = period;\n        listValue.forEach((item, index) => {\n          item.period_start = periodStart;\n          item.period_end = periodEnd;\n          periodStart += period;\n          periodEnd += period;\n          if (item.value == this.value) {\n            rangeSlider.posHandle = item.period_start;\n            rangeSlider.currentIndex = index;\n          }\n        });\n        rangeSlider.lastValue = state.currentPlayerMoveValues.minValue;\n      }\n    },\n    setRangeSliderCurrentIndex: function (state, value) {\n      state.rangeSlider.currentIndex = value;\n    },\n    setRangeSliderPosHandle: function (state, value) {\n      state.rangeSlider.posHandle = value;\n    },\n    setRangeSliderLastValue: function (state, value) {\n      state.rangeSlider.lastValue = value;\n    }\n    // RANGE SLIDER END\n  },\n  actions: {\n    setRangeSliderLastValue({\n      commit\n    }, payload) {\n      commit(\"setRangeSliderLastValue\", payload);\n    },\n    setRangeSliderPosHandle({\n      commit\n    }, payload) {\n      commit(\"setRangeSliderPosHandle\", payload);\n    },\n    setRangeSliderCurrentIndex({\n      commit\n    }, payload) {\n      commit(\"setRangeSliderCurrentIndex\", payload);\n    },\n    initRangeSlider({\n      commit\n    }) {\n      commit(\"initRangeSlider\");\n    },\n    resetRangeSlider({\n      commit\n    }) {\n      commit(\"resetRangeSlider\");\n    },\n    setCurrentPlayerCardsDisabled({\n      commit\n    }, payload) {\n      commit(\"setCurrentPlayerCardsDisabled\", payload);\n    },\n    setOtherPlayerCardsDisabled({\n      commit\n    }, payload) {\n      commit(\"setOtherPlayerCardsDisabled\", payload);\n    },\n    setCurrentPlayerRaiseInput({\n      commit\n    }, payload) {\n      commit(\"setCurrentPlayerRaiseInput\", payload);\n    },\n    setAutoCheck({\n      commit\n    }, payload) {\n      commit(\"setAutoCheck\", payload);\n    },\n    setGrantAutoCheck({\n      commit\n    }, payload) {\n      commit(\"setGrantAutoCheck\", payload);\n    },\n    toggleAutoCheck({\n      commit\n    }, payload) {\n      commit(\"toggleAutoCheck\", payload);\n    },\n    setWinCount({\n      commit\n    }, payload) {\n      commit(\"setWinCount\", payload);\n    },\n    setCurrentPlayerIsWinner({\n      commit\n    }, payload) {\n      commit(\"setCurrentPlayerIsWinner\", payload);\n    },\n    setOtherPlayerIsWinner({\n      commit\n    }, payload) {\n      commit(\"setOtherPlayerIsWinner\", payload);\n    },\n    setMinChipsValue({\n      commit\n    }, payload) {\n      commit(\"setMinChipsValue\", payload);\n    },\n    setAllBank({\n      commit\n    }, payload) {\n      commit(\"setAllBank\", payload);\n    },\n    setCurrentPlayerBank({\n      commit\n    }, payload) {\n      commit(\"setCurrentPlayerBank\", payload);\n    },\n    setCurrentPlayerCards({\n      commit\n    }, payload) {\n      commit(\"setCurrentPlayerCards\", payload);\n    },\n    decrementPlayerRaiseInput({\n      commit\n    }) {\n      commit(\"decrementPlayerRaiseInput\");\n    },\n    incrementPlayerRaiseInput({\n      commit\n    }) {\n      commit(\"incrementPlayerRaiseInput\");\n    },\n    setCurrentPlayerCurrentRate({\n      commit\n    }, payload) {\n      commit(\"setCurrentPlayerCurrentRate\", payload);\n    },\n    setOtherPlayerCurrentRate({\n      commit\n    }, payload) {\n      commit(\"setOtherPlayerCurrentRate\", payload);\n    },\n    setCurrentPlayerMoveValues({\n      commit\n    }, payload) {\n      commit(\"setCurrentPlayerMoveValues\", payload);\n    },\n    setRatesDone({\n      commit\n    }, payload) {\n      commit(\"setRatesDone\", payload);\n    },\n    setAllBets({\n      commit\n    }, payload) {\n      commit(\"setAllBets\", payload);\n    },\n    setCurrentMoveTime({\n      commit\n    }, payload) {\n      commit(\"setCurrentMoveTime\", payload);\n    },\n    setbankAvailable({\n      commit\n    }, payload) {\n      commit(\"setbankAvailable\", payload);\n    },\n    setCurrentPlayerChipsCount({\n      commit\n    }, payload) {\n      commit(\"setCurrentPlayerChipsCount\", payload);\n    },\n    setCurrentPlayerMove({\n      commit\n    }, payload) {\n      commit(\"setCurrentPlayerMove\", payload);\n    },\n    setCardsDistribution({\n      commit\n    }, payload) {\n      commit(\"setCardsDistribution\", payload);\n    },\n    setUserCards({\n      commit\n    }, payload) {\n      commit(\"setUserCards\", payload);\n    },\n    setCurrentPlayerState({\n      commit\n    }, payload) {\n      commit(\"setCurrentPlayerState\", payload);\n    },\n    setOtherPlayerState({\n      commit\n    }, payload) {\n      commit(\"setOtherPlayerState\", payload);\n    },\n    setCardsDistributionCombinations({\n      commit\n    }, payload) {\n      commit(\"setCardsDistributionCombinations\", payload);\n    },\n    setCurrentPlayerWinCombinations({\n      commit\n    }, payload) {\n      commit(\"setCurrentPlayerWinCombinations\", payload);\n    },\n    setOtherPlayerWinCombinations({\n      commit\n    }, payload) {\n      commit(\"setOtherPlayerWinCombinations\", payload);\n    },\n    setActivePlayer({\n      commit\n    }, payload) {\n      commit(\"setActivePlayer\", payload);\n    },\n    setOtherPlayerChipsCount({\n      commit\n    }, payload) {\n      commit(\"setOtherPlayerChipsCount\", payload);\n    },\n    setOtherPlayerBank({\n      commit\n    }, payload) {\n      commit(\"setOtherPlayerBank\", payload);\n    },\n    setOtherPlayerName({\n      commit\n    }, payload) {\n      commit(\"setOtherPlayerName\", payload);\n    },\n    hideUser({\n      commit\n    }, payload) {\n      commit(\"hideUser\", payload);\n    },\n    setOtherPlayerData({\n      commit\n    }, payload) {\n      commit(\"setOtherPlayerData\", payload);\n    },\n    setCurrentPlayerData({\n      commit\n    }, payload) {\n      commit(\"setCurrentPlayerData\", payload);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}