{"ast":null,"code":"import AimCross from \"./Aims/Aim_cross.vue\";\nimport AimTriangle from \"./Aims/Aim_triangle.vue\";\nimport AimCircle from \"./Aims/Aim_circle.vue\";\nimport AimClassic from \"./Aims/Aim_classic.vue\";\nexport default {\n  data() {\n    return {\n      bindAim: {\n        Classic: AimClassic,\n        Plus: AimCross,\n        Polygon: AimTriangle,\n        Ellipse: AimCircle\n      }\n    };\n  },\n  props: {\n    isAiming: Boolean\n  },\n  computed: {\n    aimsData() {\n      const settings = this.$store.getters[\"playerMenu/getSettingsData\"]?.Aim;\n      return settings && settings.listOfSavedSection[settings.selectedAimIndex];\n    }\n  },\n  methods: {\n    hslaToHexA(hsla) {\n      if (!hsla) {\n        return \"\";\n      }\n      let {\n        hue,\n        lightness,\n        alpha\n      } = hsla;\n      alpha = (100 - alpha) / 100;\n      let saturation = 100;\n      hue = (hue % 360 + 360) % 360;\n      saturation = Math.min(100, Math.max(0, saturation)) / 100;\n      lightness = Math.min(100, Math.max(0, lightness)) / 100;\n      const c = (1 - Math.abs(2 * lightness - 1)) * saturation;\n      const x = c * (1 - Math.abs(hue / 60 % 2 - 1));\n      const m = lightness - c / 2;\n      let red, green, blue;\n      if (0 <= hue && hue < 60) {\n        red = c;\n        green = x;\n        blue = 0;\n      } else if (60 <= hue && hue < 120) {\n        red = x;\n        green = c;\n        blue = 0;\n      } else if (120 <= hue && hue < 180) {\n        red = 0;\n        green = c;\n        blue = x;\n      } else if (180 <= hue && hue < 240) {\n        red = 0;\n        green = x;\n        blue = c;\n      } else if (240 <= hue && hue < 300) {\n        red = x;\n        green = 0;\n        blue = c;\n      } else {\n        red = c;\n        green = 0;\n        blue = x;\n      }\n      red = Math.round((red + m) * 255);\n      green = Math.round((green + m) * 255);\n      blue = Math.round((blue + m) * 255);\n      alpha = Math.min(255, Math.max(0, Math.round(alpha * 255)));\n      const hexA = `${(\"00\" + red.toString(16)).slice(-2)}${(\"00\" + green.toString(16)).slice(-2)}${(\"00\" + blue.toString(16)).slice(-2)}${(\"00\" + alpha.toString(16)).slice(-2)}`;\n      return hexA;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}