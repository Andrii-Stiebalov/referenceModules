{"ast":null,"code":"import { mapState, mapMutations } from \"vuex\";\nexport default {\n  name: \"CurrentPlayerMenuRange\",\n  data: function () {\n    return {\n      captureToggle: false,\n      posLastCursor: 0,\n      posCurCursor: 0\n    };\n  },\n  computed: {\n    ...mapState(\"poker\", [\"currentPlayerMoveValues\", \"currentPlayer\", \"rangeSlider\", \"currentPlayerMove\"]),\n    min: function () {\n      return this.currentPlayerMoveValues.minValue;\n    },\n    max: function () {\n      return this.currentPlayer.chipsCount;\n    },\n    step: function () {\n      return this.currentPlayerMoveValues.stepValue;\n    },\n    value: function () {\n      return this.currentPlayerMoveValues.minValue;\n    },\n    listValue: function () {\n      return this.rangeSlider.listValue;\n    },\n    posHandle: {\n      get: function () {\n        return this.rangeSlider.posHandle;\n      },\n      set: function (value) {\n        this.setRangeSliderPosHandle(value);\n      }\n    },\n    currentIndex: {\n      get: function () {\n        return this.rangeSlider.currentIndex;\n      },\n      set: function (value) {\n        this.setRangeSliderCurrentIndex(value);\n      }\n    },\n    lastValue: {\n      get: function () {\n        return this.rangeSlider.lastValue;\n      },\n      set: function (value) {\n        this.setRangeSliderLastValue(value);\n      }\n    },\n    coodrLeftWrap: function () {\n      return this.rangeSlider.coodrLeftWrap;\n    }\n  },\n  methods: {\n    ...mapMutations(\"poker\", [\"setCurrentPlayerRaiseInput\", \"initRangeSlider\", \"setRangeSliderCurrentIndex\", \"setRangeSliderPosHandle\", \"setRangeSliderLastValue\"]),\n    selected: function (dir) {\n      this.listValue.forEach((item, index) => {\n        if (item.period_start < this.posCurCursor && this.posCurCursor <= item.period_end) {\n          if (this.lastValue !== item.value) {\n            this.setRangeSliderCurrentIndex(index);\n            switch (dir) {\n              case \"plus\":\n                {\n                  this.setRangeSliderPosHandle(item.period_end);\n                }\n                break;\n              case \"minus\":\n                {\n                  this.setRangeSliderPosHandle(item.period_start);\n                }\n                break;\n              default:\n                {\n                  if (this.posHandle > this.posLastCursor) {\n                    this.setRangeSliderPosHandle(item.period_start);\n                  } else {\n                    this.setRangeSliderPosHandle(item.period_end);\n                  }\n                }\n                break;\n            }\n            this.setCurrentPlayerRaiseInput(item.value);\n            this.lastValue = item.value;\n          }\n        }\n      });\n    },\n    mouseClick: function (e) {\n      this.posCurCursor = e.clientX - this.coodrLeftWrap;\n      this.listValue.forEach(item => {\n        if (item.period_start < this.posCurCursor && this.posCurCursor <= item.period_end) {\n          if (this.lastValue !== item.value) {\n            this.selected();\n          }\n        }\n      });\n    },\n    move: function (e) {\n      if (this.captureToggle) {\n        this.posCurCursor = e.clientX - this.coodrLeftWrap;\n        if (this.posLastCursor < this.posCurCursor) {\n          this.selected(\"plus\");\n        }\n        if (this.posLastCursor > this.posCurCursor) {\n          this.selected(\"minus\");\n        }\n        this.posLastCursor = e.clientX - this.coodrLeftWrap;\n      }\n    },\n    captureOn: function (e) {\n      this.captureToggle = true;\n      this.posLastCursor = e.clientX - this.coodrLeftWrap;\n    },\n    captureOff: function () {\n      this.captureToggle = false;\n    },\n    btnPrev: function () {\n      this.currentIndex -= 1;\n      if (this.currentIndex < 0) {\n        this.currentIndex = 0;\n      }\n      this.setRangeSliderPosHandle(this.listValue[this.currentIndex].period_start);\n      this.setCurrentPlayerRaiseInput(this.listValue[this.currentIndex].value);\n    },\n    btnNext: function () {\n      this.currentIndex += 1;\n      if (this.currentIndex > this.listValue.length - 1) {\n        this.currentIndex = this.listValue.length - 1;\n      }\n      this.setRangeSliderPosHandle(this.listValue[this.currentIndex].period_end);\n      this.setCurrentPlayerRaiseInput(this.listValue[this.currentIndex].value);\n    }\n  },\n  mounted: function () {\n    this.initRangeSlider();\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}