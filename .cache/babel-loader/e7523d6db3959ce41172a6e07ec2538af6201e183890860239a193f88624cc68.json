{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Territories from \"@/Assets/Territories/Territories.js\";\nimport { isEmpty } from \"ol/extent.js\";\nimport recursiveAssing from \"../../../Functions/RecursiveAssign.js\";\n\n// import {setOnlineTimeInterval} from \"./familyWatchers.js\";\n\nexport default {\n  namespaced: true,\n  state: {\n    FamilyUID: 569,\n    Territories,\n    FamilyLogData: {},\n    MansionCoords: [],\n    PlayerList: [],\n    TerritoriesWarData: {},\n    countOfRows: 78,\n    countOfColumns: 55,\n    TerritoriesWarDataSettings: {\n      MaxPlayers: 10,\n      MinPlayers: 4,\n      BulletTypes: [],\n      ItemList: []\n    },\n    TerritoriesWarDataInfo: {\n      Attacks: 3,\n      MaxAttacks: 4,\n      Defends: 0,\n      MaxDefends: 1\n    }\n  },\n  getters: {\n    getFamilyList(state) {\n      return state.PlayerList;\n    },\n    getTerritoriesWarDataInfo(state) {\n      const values = Object.values(state.TerritoriesWarData);\n      const countOfBig = values.filter(item => item.isBig).length;\n      const count = state.countOfRows * state.countOfColumns - countOfBig * 3;\n      const countOfOwn = Object.values(state.TerritoriesWarData).filter(item => item.owner === state.FamilyUID).length;\n      console.log(`countOfOwn`);\n      console.log(countOfOwn);\n      return {\n        countOfOwn,\n        count,\n        ...state.TerritoriesWarDataInfo\n      };\n    },\n    getTerritoriesWarDataSettings(state) {\n      return state.TerritoriesWarDataSettings;\n    },\n    getFamilyName(state) {\n      return state.FamilyName;\n    },\n    getPlayerUID(state) {\n      return state.PlayerUID;\n    },\n    getFamilyMoney(state) {\n      return state.Money;\n    },\n    getTerritoriesWarData(state) {\n      return state.TerritoriesWarData;\n    },\n    getProgressData(state) {\n      return {\n        Level: state.Level,\n        Exp: state.Exp,\n        NextLvlExp: state.NextLvlExp,\n        CriminalRating: state.CriminalRating,\n        Reputation: state.Reputation,\n        IsLvlUp: state.IsLvlUp\n      };\n    },\n    getIsOwner(state) {\n      return state.IsOwner;\n    },\n    getFamilyImgAndColor(state) {\n      return {\n        Image: state.Image,\n        HexColor: state.HexColor\n      };\n    },\n    getPlayerList(state) {\n      return state.PlayerList;\n    },\n    getPlayerListOnline(state) {\n      return state.PlayerList.filter(player => player.IsOnline).lenght;\n    },\n    getMaxMembers(state) {\n      return state.MaxMembers;\n    },\n    getMansionCoords(state) {\n      return state.MansionCoords;\n    },\n    getOfficeData(state) {\n      return state.Office;\n    },\n    getRankList(state) {\n      return state.RankEditor.RankList;\n    },\n    getAllPermissions(state) {\n      return state.RankEditor.AllPermissions;\n    },\n    getContracts(state) {\n      return state?.Office?.Contracts;\n    },\n    getTransportsData(state) {\n      return state?.Garage;\n    },\n    getRankEditor(state) {\n      return state?.RankEditor;\n    },\n    getTerritoriesData(state) {\n      return state?.Territories;\n    },\n    getTerritoriesStatus(state) {\n      return state?.TerritoriesStatus;\n    },\n    getPlayerPermissions(state) {\n      return state?.PlayerPermissions;\n    },\n    getFamilyLogDataActionList(state) {\n      return state?.FamilyLogData.ActionList;\n    },\n    getFamilyLogDataActionTypeList(state) {\n      return state?.FamilyLogData.ActionTypeList;\n    },\n    getFamilyUID(state) {\n      return state?.FamilyUID;\n    }\n  },\n  mutations: {\n    setData(state, payload) {\n      Object.assign(state, {\n        Territories,\n        FamilyLogData: {}\n      });\n      if (state.MansionCoords) {\n        delete state.MansionCoords;\n      }\n      recursiveAssing(payload, state, true);\n    },\n    updateRank(state, payload) {\n      state.PlayerList = payload;\n    },\n    updateRanklist(state, payload) {\n      state.RankEditor = {\n        ...state.RankEditor,\n        RankList: payload\n      };\n    },\n    setFamilyLogData(state, payload) {\n      state.FamilyLogData = payload;\n    },\n    addLog(state, payload) {\n      state.FamilyLogData.ActionList.push(payload);\n    },\n    addLogs(state, payload) {\n      state.FamilyLogData.ActionList = [...state.FamilyLogData.ActionList, ...payload];\n    },\n    addPlayer(state, payload) {\n      state.PlayerList.push(payload);\n    },\n    removePlayer(state, payload) {\n      const filterPlayerList = state.PlayerList.filter(player => player.Id !== payload);\n      state.PlayerList = filterPlayerList;\n    },\n    updatePlayer(state, payload) {\n      const player = state.PlayerList.find(player => player.Id === payload.Id);\n      const updatePlayer = {\n        ...player,\n        ...payload\n      };\n      if (player.IsOnline !== updatePlayer.IsOnline && updatePlayer.IsOnline) {\n        updatePlayer.OnlineTime.Session = 0;\n      }\n      const index = state.PlayerList.indexOf(player);\n      state.PlayerList[index] = updatePlayer;\n    },\n    addRank(state, payload) {\n      state.RankEditor.RankList.push(payload);\n    },\n    removeRank(state, payload) {\n      const filterRankList = state.RankEditor.RankList.filter(rank => rank.Id !== payload);\n      state.RankEditor.RankList = filterRankList;\n    },\n    upadateRank(state, payload) {\n      const rank = state.RankEditor.RankList.find(rank => rank.Id === payload.Id);\n      const index = state.RankEditor.RankList.indexOf(rank);\n      state.RankEditor.RankList[index] = payload;\n      state.RankEditor = Object.assign({}, state.RankEditor);\n    },\n    updateRankName(state, payload) {\n      const rank = state.RankEditor.RankList.find(rank => rank.Id === payload.Id);\n      rank.RankName = payload.Name;\n      const index = state.RankEditor.RankList.indexOf(rank);\n      state.RankEditor.RankList[index] = rank;\n    },\n    updatePlayerPermisions(state, payload) {\n      state.PlayerPermissions = payload;\n    },\n    setCrimeMap(state, payload) {\n      state.TerritoriesStatus = payload;\n    },\n    removeVehicle(state, payload) {\n      const filterVehicle = state.Garage.TransportList.filter(car => car.Id !== payload);\n      state.Garage.TransportList = filterVehicle;\n    },\n    addVehicle(state, payload) {\n      return state.Garage.TransportList.push(payload);\n    },\n    updateContract(state, payload) {\n      const updateContract = state.Office.Contracts.find(contract => contract.id === payload.id);\n      const index = state.Office.Contracts.indexOf(updateContract);\n      state.Office.Contracts[index] = payload;\n    },\n    addContract(state, payload) {\n      state.Office.Contracts.push(payload);\n    },\n    removeContract(state, payload) {\n      const filterContracts = state.Office.Contracts.filter(contract => contract.id !== payload);\n      state.Office.Contracts = filterContracts;\n    },\n    setContracts(state, payload) {\n      if (!state.Office) {\n        state.Office = {};\n      }\n      state.Office.Contracts = payload;\n    },\n    updateEXP(state, payload) {\n      state.Exp = payload;\n    },\n    setCriminalRating(state, payload) {\n      state.CriminalRating = payload;\n    },\n    setReputation(state, payload) {\n      state.Reputation = payload;\n    },\n    setMansionCoords(state, payload) {\n      state.MansionCoords = payload;\n    },\n    clearMansionCoords(state) {\n      state.MansionCoords = null;\n    },\n    updateAvailablePermissions(state, payload) {\n      state.RankEditor.AllPermissions = payload;\n    },\n    updateFamilyMoney(state, payload) {\n      state.Money = payload;\n    },\n    updateName(state, payload) {\n      state.FamilyName = payload;\n    },\n    setTerritoriesWarData(state, payload) {\n      const Map = payload.reduce((acc, item) => {\n        acc[item.id] = item;\n        return acc;\n      }, {});\n      state.TerritoriesWarData = Map;\n    },\n    updateTerritoriesWarItemById(state, payload) {\n      state.TerritoriesWarData[payload.id] = payload;\n    },\n    clearTerritoriesWarData(state) {\n      state.TerritoriesWarData = {};\n    },\n    addTerritoriesWarData(state, payload) {\n      payload.forEach(item => {\n        if (item.isBig) {\n          const [y, x] = item.id.split(\" | \");\n          const emptyItem = {\n            isEmpty: true\n          };\n          state.TerritoriesWarData[`${+y + 1} | ${+x}`] = emptyItem;\n          state.TerritoriesWarData[`${+y} | ${+x + 1}`] = emptyItem;\n          state.TerritoriesWarData[`${+y + 1} | ${+x + 1}`] = emptyItem;\n          console.log(state.TerritoriesWarData);\n        }\n        state.TerritoriesWarData[item.id] = item;\n      });\n    },\n    setTerritoriesWarDataSettings(state, payload) {\n      state.TerritoriesWarDataSettings = payload;\n    },\n    setTerritoriesWarDataInfo(state, payload) {\n      state.TerritoriesWarDataInfo = payload;\n    }\n  },\n  actions: {\n    setData({\n      commit\n    }, payload) {\n      commit(\"setData\", payload);\n    },\n    SetTerritoriesWarDataInfo({\n      commit\n    }, payload) {\n      commit(\"setTerritoriesWarDataInfo\", payload);\n    },\n    SetTerritoriesWarDataSettings({\n      commit\n    }, payload) {\n      commit(\"setTerritoriesWarDataSettings\", payload);\n    },\n    SetCriminalRating({\n      commit\n    }, payload) {\n      commit(\"setCriminalRating\", payload);\n    },\n    SetReputation({\n      commit\n    }, payload) {\n      commit(\"setReputation\", payload);\n    },\n    updateRanklist({\n      commit\n    }, payload) {\n      commit(\"updateRanklist\", payload);\n    },\n    updateRank({\n      commit\n    }, payload) {\n      commit(\"updateRank\", payload);\n    },\n    AddPlayer({\n      commit\n    }, payload) {\n      commit(\"addPlayer\", payload);\n    },\n    RemovePlayer({\n      commit\n    }, payload) {\n      commit(\"removePlayer\", payload);\n    },\n    UpdatePlayer({\n      commit\n    }, payload) {\n      commit(\"updatePlayer\", payload);\n    },\n    AddRank({\n      commit\n    }, payload) {\n      commit(\"addRank\", payload);\n    },\n    RemoveRank({\n      commit\n    }, payload) {\n      commit(\"removeRank\", payload);\n    },\n    UpadateRank({\n      commit\n    }, payload) {\n      commit(\"upadateRank\", payload);\n    },\n    UpdateRankName({\n      commit\n    }, payload) {\n      commit(\"updateRankName\", payload);\n    },\n    UpdatePlayerPermissions({\n      commit\n    }, payload) {\n      commit(\"updatePlayerPermisions\", payload);\n    },\n    SetCrimeMap({\n      commit\n    }, payload) {\n      commit(\"setCrimeMap\", payload);\n    },\n    SetFamilyLogData({\n      commit\n    }, payload) {\n      commit(\"setFamilyLogData\", payload);\n    },\n    AddLog({\n      commit\n    }, payload) {\n      commit(\"addLog\", payload);\n    },\n    AddLogs({\n      commit\n    }, payload) {\n      commit(\"addLogs\", payload);\n    },\n    RemoveVehicle({\n      commit\n    }, payload) {\n      commit(\"removeVehicle\", payload);\n    },\n    AddVehicle({\n      commit\n    }, payload) {\n      commit(\"addVehicle\", payload);\n    },\n    UpdateContract({\n      commit\n    }, payload) {\n      commit(\"updateContract\", payload);\n    },\n    UpdateAvailablePermissions({\n      commit\n    }, payload) {\n      commit(\"updateAvailablePermissions\", payload);\n    },\n    UpdateEXP({\n      commit\n    }, payload) {\n      commit(\"updateEXP\", payload);\n    },\n    AddContract({\n      commit\n    }, payload) {\n      commit(\"addContract\", payload);\n    },\n    UpdateFamilyMoney({\n      commit\n    }, payload) {\n      commit(\"updateFamilyMoney\", payload);\n    },\n    RemoveContract({\n      commit\n    }, payload) {\n      commit(\"removeContract\", payload);\n    },\n    SetContracts({\n      commit\n    }, payload) {\n      commit(\"setContracts\", payload);\n    },\n    SetMansionCoords({\n      commit\n    }, payload) {\n      commit(\"setMansionCoords\", payload);\n    },\n    ClearMansionCoords({\n      commit\n    }, payload) {\n      commit(\"clearMansionCoords\", payload);\n    },\n    UpdateName({\n      commit\n    }, payload) {\n      commit(\"updateName\", payload);\n    },\n    SetTerritoriesWarData({\n      commit\n    }, payload) {\n      commit(\"setTerritoriesWarData\", payload);\n    },\n    AddTerritoriesWarData({\n      commit\n    }, payload) {\n      commit(\"addTerritoriesWarData\", payload);\n    },\n    UpdateTerritoriesWarItemById({\n      commit\n    }, payload) {\n      commit(\"updateTerritoriesWarItemById\", payload);\n    },\n    ClearTerritoriesWarData({\n      commit\n    }, payload) {\n      commit(\"clearTerritoriesWarData\", payload);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}