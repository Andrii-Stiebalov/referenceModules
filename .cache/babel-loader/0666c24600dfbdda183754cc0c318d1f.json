{"ast":null,"code":"import \"./Dialogs.scss\";\nimport DialogIcon from \"./Assets/Icons/Dialog.vue\";\nimport RhombusIcon from \"./Assets/Icons/Rhombus.vue\";\nimport { mapGetters } from \"vuex\";\nexport default {\n  components: {\n    DialogIcon,\n    RhombusIcon\n  },\n  data() {\n    return {\n      appActive: false,\n      buttonsActive: true,\n      npcName: \"\",\n      dialog: null,\n      activeAnswer: null\n    };\n  },\n  computed: {\n    ...mapGetters(\"global\", [\"getCdnResolver\"])\n  },\n  methods: {\n    getReplique(dialogID) {\n      return this.$RPC.call(\"Dialog:GetReplique\", dialogID).then(([dialog, npcName]) => {\n        this.dialog = dialog;\n        if (dialog.sound !== undefined) {\n          try {\n            if (this.sound) {\n              this.sound.pause();\n              this.sound = null;\n            }\n            this.sound = new Audio(`${this.getCdnResolver.cdnLink}/audio/npc/${this.$i18n.locale}/${dialog.sound}`);\n            this.sound.volume = 0.5;\n            this.sound.play();\n          } catch (e) {}\n        }\n        if (this.npcName !== undefined) this.npcName = npcName;\n        if (!this.appActive) this.appActive = true;\n        this.buttonsActive = true;\n      });\n    },\n    setAnswer() {\n      if (this.activeAnswer) {\n        if (this.buttonsActive) {\n          this.buttonsActive = false;\n          if (this.activeAnswer.next !== undefined) {\n            if (this.activeAnswer.trigger) {\n              this.$callClient(this.activeAnswer.trigger, this.activeAnswer.triggerParameter);\n            }\n            this.getReplique(this.activeAnswer.next);\n          } else {\n            this.$callClient(\"Dialog:CloseDialog\");\n            this.appActive = false;\n            try {\n              if (this.sound) {\n                let volumeDivision = this.sound.volume / 10;\n                let interval = setInterval(() => {\n                  if (this.sound) {\n                    this.sound.volume -= volumeDivision;\n                    if (this.sound.volume - volumeDivision <= 0) clearInterval(interval);\n                  }\n                }, 50);\n              }\n            } catch (e) {}\n          }\n        }\n      } else {\n        this.$Notification.create({\n          layout: \"center\",\n          type: \"alert\",\n          text: \"1212312\",\n          time: 7000\n        });\n      }\n    },\n    isActive(answer) {\n      return this.activeAnswer === answer;\n    },\n    setActiveAnswer(answer) {\n      if (!this.isActive(answer)) this.activeAnswer = answer;\n    },\n    closeApp() {\n      this.sound = null;\n      this.$callClient(\"Dialog:HideBrowser\");\n      if (this.activeAnswer.trigger) {\n        this.$callClient(this.activeAnswer.trigger, this.activeAnswer.triggerParameter);\n      }\n      // this.$router.push({ name: \"HUD\" });\n    }\n  },\n  mounted() {\n    this.getReplique(1);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}