{"ast":null,"code":"export default {\n  data() {\n    return {\n      progress: 100,\n      step: 1,\n      coordsData: [0, 0],\n      bindByStep: {\n        1: {\n          img: \"spray\",\n          text: \"Миючий засіб\"\n        },\n        2: {\n          img: \"sponge\",\n          text: \"Махрова губка\"\n        },\n        3: {\n          img: \"rag\",\n          text: \"Ганчірка з мікрофібри\"\n        }\n      }\n    };\n  },\n  methods: {\n    getDashofset(i) {\n      if (i === this.step) {\n        return this.progress || 0;\n      }\n      if (i > this.step) {\n        return 100;\n      }\n    },\n    onMouseMove(e) {\n      this.coordsData = [e.clientX, e.clientY];\n    },\n    setCanvas(canvas, imgPath) {\n      const ctx = canvas.getContext(\"2d\");\n      canvas.width = 500;\n      canvas.height = 710;\n      ctx.globalCompositeOperation = \"source-over\";\n      const img = new Image();\n      const foamImg = new Image();\n      let isAnim = false;\n      img.src = require(`./Assets/Imges/${imgPath}.png`);\n      foamImg.src = require(\"./Assets/Imges/brush-texture.png\");\n      img.addEventListener(\"load\", () => ctx.drawImage(img, 0, 0, 478, 705));\n      var isDrag = false;\n      function clearArc(x, y) {\n        if (isAnim) {\n          return;\n        }\n        ctx.globalCompositeOperation = \"destination-out\";\n        const brushSize = 100;\n        ctx.drawImage(foamImg, x - brushSize / 2, y - brushSize / 2, brushSize, brushSize);\n      }\n      canvas.addEventListener(\"mousedown\", function (event) {\n        if (isAnim) {\n          return;\n        }\n        isDrag = true;\n        clearArc(event.offsetX, event.offsetY);\n        judgeVisible();\n      }, false);\n      canvas.addEventListener(\"mousemove\", function (event) {\n        if (!isDrag) {\n          return;\n        }\n        clearArc(event.offsetX, event.offsetY);\n        judgeVisible();\n      }, false);\n      canvas.addEventListener(\"mouseup\", function () {\n        isDrag = false;\n      }, false);\n      canvas.addEventListener(\"mouseleave\", function () {\n        isDrag = false;\n      }, false);\n      let max;\n      setTimeout(() => {\n        var imageData = ctx.getImageData(0, 0, 500, 700),\n          pixels = imageData.data,\n          result = {},\n          i,\n          len;\n        for (i = 3, len = pixels.length; i < len; i += 4) {\n          result[pixels[i]] || (result[pixels[i]] = 0);\n          result[pixels[i]]++;\n        }\n        max = result[255];\n      }, 500);\n      const judgeVisible = () => {\n        var imageData = ctx.getImageData(0, 0, 500, 700),\n          pixels = imageData.data,\n          result = {},\n          i,\n          len;\n        for (i = 3, len = pixels.length; i < len; i += 4) {\n          result[pixels[i]] || (result[pixels[i]] = 0);\n          result[pixels[i]]++;\n        }\n        this.progress = result[255] / max * 100;\n        if (this.progress < 0.1 || !result[255]) {\n          isAnim = true;\n          isDrag = false;\n          this.progress = 100;\n          this.step++;\n          canvas.animate([{\n            opacity: 1\n          }, {\n            opacity: 0\n          }], {\n            duration: 1000\n          });\n          setTimeout(() => {\n            canvas.remove();\n          }, 980);\n        }\n      };\n      document.addEventListener(\"DOMContentLoaded\", judgeVisible, false);\n    }\n  },\n  mounted() {\n    const canvas = this.$refs.canvasClear;\n    const ctx = canvas.getContext(\"2d\");\n    canvas.width = 500;\n    canvas.height = 710;\n    ctx.globalCompositeOperation = \"source-over\";\n    const img = new Image();\n    img.src = require(`./Assets/Imges/4-step_clear-toilet.png`);\n    img.addEventListener(\"load\", () => ctx.drawImage(img, 0, 0, 478, 705));\n    window.addEventListener(\"mousemove\", this.onMouseMove);\n    this.setCanvas(this.$refs.canvas3, \"3-step_tinted-toilet\");\n    this.setCanvas(this.$refs.canvas2, \"2-step_foam-toilet\");\n    this.setCanvas(this.$refs.canvas1, \"1-step_dirt-toilet\");\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}