{"ast":null,"code":"export default function (delay, callback, alternative) {\n  let timeoutID;\n  let cancelled = false;\n  let lastExec = 0;\n  function clearExistingTimeout() {\n    if (timeoutID) {\n      clearTimeout(timeoutID);\n    }\n  }\n  function cancel() {\n    clearExistingTimeout();\n    cancelled = true;\n  }\n  function wrapper(...arguments_) {\n    let self = this;\n    let elapsed = Date.now() - lastExec;\n    if (cancelled) {\n      return;\n    }\n    function exec() {\n      lastExec = Date.now();\n      callback.apply(self, arguments_);\n    }\n    clearExistingTimeout();\n    if (elapsed > delay) {\n      exec();\n    } else if (alternative) {\n      alternative();\n    }\n  }\n  wrapper.cancel = cancel;\n  return wrapper;\n}","map":null,"metadata":{},"sourceType":"module"}