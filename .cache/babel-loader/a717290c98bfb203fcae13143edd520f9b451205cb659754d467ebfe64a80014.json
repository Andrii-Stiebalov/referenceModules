{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  namespaced: true,\n  state: {\n    notificationList: [],\n    defaultSettings: {\n      type: \"alert\",\n      layout: \"topRight\",\n      theme: \"default\",\n      text: \"\",\n      time: false,\n      progressBar: true,\n      transition: \"notification-transition\",\n      maxNotification: 5\n    }\n  },\n  getters: {\n    getSettings: state => {\n      return state.defaultSettings;\n    },\n    getLayout: state => layout => {\n      return state.notificationList.filter(notification => notification.layout === layout).slice(0, state.defaultSettings.maxNotification);\n    },\n    getLayoutList: state => {\n      let layoutList = [];\n      state.notificationList.forEach(notification => {\n        if (!layoutList.includes(notification.layout)) layoutList.push(notification.layout);\n      });\n      return layoutList;\n    }\n  },\n  mutations: {\n    addNotification(state, notification) {\n      let IDList = state.notificationList.map(x => x.id);\n      let freeID = 0;\n      console.log(\"setrv\");\n      while (IDList.includes(freeID)) {\n        freeID++;\n      }\n      state.notificationList.push(Object.freeze(Object.assign({}, notification, {\n        id: freeID\n      })));\n    },\n    removeNotification(state, notification) {\n      let index = state.notificationList.indexOf(state.notificationList.find(x => x.id === notification.id));\n      if (index !== -1) state.notificationList.splice(index, 1);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}