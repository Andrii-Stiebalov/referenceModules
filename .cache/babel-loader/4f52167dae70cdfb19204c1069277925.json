{"ast":null,"code":"import Doll from \"./Components/Icons/Doll.vue\";\nimport PageTitle from \"./Components/PageTitle.vue\";\nimport CdnResolverImage from \"@/Components/CdnResolverImage.vue\";\nexport default {\n  components: {\n    Doll,\n    PageTitle,\n    CdnResolverImage\n  },\n  data() {\n    return {\n      selectedVal: \"default\",\n      selectedType: \"cash\",\n      filterList: [\"Все\", \"Не установленные\", \"Установленные\"],\n      selectedFilter: \"Все\",\n      isPreventClose: false,\n      countOfComplect: 3,\n      settings: {\n        defaultCurrencyImg: \"coin.svg\" //путь cdn\n      },\n      bindRarity: {\n        1: \"#828282\",\n        2: \"#34c924\",\n        3: \"#2bd9d9\",\n        4: \"#a30eff\",\n        5: \"#ff5533\",\n        6: \"#ffcc4d\"\n      },\n      balanceList: [{\n        img: \"coin.svg\",\n        //путь cdn\n        value: 150\n      }, {\n        img: \"cash.svg\",\n        //путь cdn\n        value: 1539000\n      }, {\n        img: \"bank.svg\",\n        //путь cdn\n        value: 1000000\n      }],\n      selectedRim: null,\n      priviusselectedRim: null,\n      rimsList: []\n    };\n  },\n  computed: {\n    filterrimsList() {\n      if (this.selectedFilter === \"Все\") {\n        return this.rimsList;\n      }\n      return this.rimsList.filter(car => this.selectedFilter === \"Не установленные\" ? !car.isMounted : car.isMounted);\n    }\n  },\n  watch: {\n    selectedFilter() {\n      this.selectedRim = null;\n    },\n    selectedRim(val) {\n      if (!val) {\n        return;\n      }\n      if (!val.price && val.coinPrice) {\n        this.selectedVal = \"special\";\n      }\n      if (!val.coinPrice && val.price) {\n        this.selectedVal = \"default\";\n      }\n    },\n    rimsList() {\n      if (this.selectedRim) {\n        this.selectedRim = this.rimsList.find(item => item.id === this.selectedRim.id);\n      }\n    }\n  },\n  methods: {\n    formatMoney(amount) {\n      return amount.toLocaleString(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n        minimumFractionDigits: 0\n      }).replace(\"$\", \"\").replace(/,/g, \".\");\n    },\n    selectRim(car) {\n      this.selectedRim = car;\n      this.$callClient(\"C:TireService:SetRim\", car.id, car.typeId);\n    },\n    onBuy() {\n      this.isPreventClose = true;\n      const UniversalModalData = {\n        title: this.$t(\"Покупка дисков\"),\n        content: [{\n          type: \"description\",\n          value: this.$t(`Вы действительно хотите купить диски <span>{0}</span> за <span>{1}</span>`, [this.$t(this.selectedRim.name), this.selectedVal === \"default\" ? this.formatMoney(this.selectedRim.price) + \"$\" : this.formatMoney(this.selectedRim.coinPrice) + \"<coin/>\"])\n        }],\n        buttons: {\n          submit: {\n            name: this.$t(\"Да\"),\n            handler: () => {\n              this.isPreventClose = false;\n              this.$callClient(\"C:TireService:BuyRim\", this.selectedRim.id, this.selectedRim.typeId, this.selectedVal, this.selectedType === \"cash\");\n            }\n          },\n          cansel: {\n            name: this.$t(\"Отмена\"),\n            handler: () => {\n              this.isPreventClose = false;\n            }\n          }\n        }\n      };\n      this.$UniversalModal.create(UniversalModalData);\n    },\n    updateRimsList(data) {\n      this.rimsList = data;\n    },\n    onEnterScroll(value) {\n      this.$callClient(\"C:CarShowRoom:OnSection\", value);\n    },\n    onMount() {\n      this.$callClient(\"C:TireService:MountRim\", this.selectedRim.id, this.selectedRim.typeId);\n    },\n    onUnlock() {\n      this.isPreventClose = true;\n      const UniversalModalData = {\n        title: this.$t(\"Разблокировка диски\"),\n        content: [{\n          type: \"description\",\n          value: this.$t(`Вы действительно хотите разблокировать диски {0}, в наличии: {1} шт.`, [this.$t(this.selectedRim.name), this.selectedRim.countOfComplect])\n        }],\n        buttons: {\n          submit: {\n            name: this.$t(\"Да\"),\n            handler: () => {\n              this.isPreventClose = false;\n              this.$callClient(\"C:TireService:UnlockRim\", this.selectedRim.id, this.selectedRim.typeId);\n            }\n          },\n          cansel: {\n            name: this.$t(\"Отмена\"),\n            handler: () => {\n              this.isPreventClose = false;\n            }\n          }\n        }\n      };\n      this.$UniversalModal.create(UniversalModalData);\n    },\n    handleScroll(event) {\n      const container = event.currentTarget;\n      if (event.deltaY > 0) {\n        container.scrollLeft += 50;\n      } else {\n        container.scrollLeft -= 50;\n      }\n    },\n    close() {\n      if (this.isPreventClose) {\n        return;\n      }\n      this.$callClient(\"C:TireService:Close\");\n    },\n    onkeydown(e) {\n      if (e.keyCode === 27 && !window.isModalShow) {\n        this.close();\n      }\n    },\n    setData(data) {\n      Object.assign(this.$data, data);\n    }\n  },\n  mounted() {\n    this.$onClient(\"W:TireService:SetData\", this.setData);\n    this.$onClient(\"W:TireService:updateRimsList\", this.updateRimsList);\n    this.$callClient(\"C:TireService:Ready\");\n    window.addEventListener(\"keyup\", this.onkeydown);\n  },\n  beforeUnmount() {\n    this.$offClient(\"W:TireService:SetData\", this.setData);\n    this.$offClient(\"W:TireService:updateRimsList\", this.updateRimsList);\n    window.removeEventListener(\"keyup\", this.onkeydown);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}