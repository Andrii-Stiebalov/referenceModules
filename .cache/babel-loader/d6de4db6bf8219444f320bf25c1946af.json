{"ast":null,"code":"import CdnResolverImage from \"../../../../Components/CdnResolverImage.vue\";\nimport Select from \"../../../../Components/CustomSelect/CustomSelect.vue\";\nexport default {\n  data() {\n    return {\n      type: this.$route.params.type,\n      selectedCategory: \"\",\n      selectedItem: \"\",\n      selectedMultiplication: \"1\",\n      multiplicationList: [1, 2, 5, 10],\n      selectedPlace: \"\",\n      placeOptions: null,\n      categoriesList: [],\n      furnituresList: []\n    };\n  },\n  components: {\n    CdnResolverImage,\n    Select\n  },\n  watch: {\n    placeOptions() {\n      this.selectedPlace = this.placeOptionsNameList[0];\n    }\n  },\n  computed: {\n    getVuexGettersgetCdnResolver() {\n      return this.$store.getters.getCdnResolver;\n    },\n    placeOptionsNameList() {\n      if (!this.placeOptions) {\n        return [];\n      }\n      return Object.values(this.placeOptions).map(value => value ? this.$t(value) : \"\");\n    }\n  },\n  methods: {\n    setSelectedCategory(categoryId) {\n      this.selectedCategory = categoryId;\n      this.selectedItem = \"\";\n      this.selectedMultiplication = \"1\";\n      this.furnituresList = [];\n      this.$callClient(\"C:FurnitureStore:setCategory\", this.selectedCategory);\n    },\n    setSelectedItem(id) {\n      this.selectedItem = id;\n      this.selectedMultiplication = \"1\";\n    },\n    setMultiplication(multiplication) {\n      this.selectedMultiplication = multiplication;\n    },\n    setItemList(data) {\n      this.furnituresList = data;\n    },\n    getImgPath() {\n      return this.furnituresList.find(furniture => furniture.Identifier === this.selectedItem).ImagePath;\n    },\n    getCategoryPath(path) {\n      return this.getVuexGettersgetCdnResolver.serverLink + path.replace(\"cdn/\", \"\");\n    },\n    getCategoryName(categoryId) {\n      return this.categoriesList.find(category => category.id === categoryId)?.name || \"\";\n    },\n    getFurnitureName(furnituresId) {\n      return this.furnituresList.find(furniture => furniture.Identifier === furnituresId)?.Name || \"\";\n    },\n    formatNumberToCurrency(number) {\n      let formattedNumber = number.toString().replace(\".\", \",\");\n      formattedNumber = formattedNumber.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1.\");\n      formattedNumber = formattedNumber + \" $\";\n      return formattedNumber;\n    },\n    onBuyFurniture(type) {\n      if (this.selectedPlace) {\n        const placeIndex = this.placeOptionsNameList.indexOf(this.selectedPlace);\n        const placeId = Object.keys(this.placeOptions)[placeIndex];\n        const buyData = {\n          isCash: type === \"cash\",\n          count: this.selectedMultiplication,\n          furniture: this.selectedItem,\n          place: placeId\n        };\n        this.$callClient(\"C:FurnitureStore:Buy\", placeId, buyData);\n      }\n    },\n    setData(data) {\n      // this.data = Object.assign(this.$data, data);\n      // this.selectedPlace = this.placeOptionsNameList[0];\n      // this.$emit(\"setPlayerinfo\", data.playerData);\n    },\n    setPlayerData(data) {\n      this.$emit(\"setPlayerinfo\", data);\n    },\n    ClearAll() {\n      this.furnituresList = [];\n    },\n    AddFurniture(data) {\n      this.furnituresList = [...this.furnituresList, ...data];\n    },\n    SetSpawnStatus(id, status) {\n      const index = this.furnituresList.findIndex(item => item.Identifier !== id);\n      this.furnituresList[index].isMounted = status;\n    },\n    RemoveFurtinure(id) {\n      this.furnituresList = this.furnituresList.filter(item => item.Identifier !== id);\n    }\n  },\n  beforeUnmount() {\n    window.removeEventListener(\"keyup\", this.keydown);\n    this.$offClient(\"W:FurnitureStore:setData\", this.setData);\n    this.$offClient(\"W:FurnitureStore:setItemList\", this.setData);\n  },\n  mounted() {\n    this.$onClient(\"W:FurnitureStore:setData\", this.setData);\n    this.$onClient(\"W:FurnitureStore:setItemList\", this.setItemList);\n    this.$callClient(\"C:FurnitureStore:Ready\");\n  }\n};","map":null,"metadata":{},"sourceType":"module"}