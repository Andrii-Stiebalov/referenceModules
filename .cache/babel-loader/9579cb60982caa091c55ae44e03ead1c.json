{"ast":null,"code":"import Main from \"./Components/Main.vue\";\nconst Templates = {\n  main: Main\n};\nexport default {\n  components: {\n    ...Object.values(Templates)\n  },\n  data() {\n    return {\n      modals: [],\n      settings: {\n        modal: {\n          main: {\n            id: undefined,\n            template: \"main\",\n            title: \"\",\n            subtitle: \"\"\n          },\n          text: {\n            value: \"\",\n            placeholder: \"\"\n          },\n          range: {\n            min: 0,\n            max: 100,\n            value: 50\n          },\n          checkbox: {\n            value: false,\n            text: \"\"\n          },\n          button: {\n            isClose: false,\n            text: \"accept\"\n          }\n        }\n      }\n    };\n  },\n  computed: {\n    getActiveModals() {\n      return this.modals.slice(0, 1);\n    }\n  },\n  methods: {\n    getModalTemplate(modal) {\n      return Templates[modal.template] || null;\n    },\n    addModal(payload) {\n      this.modals = [];\n      if (typeof payload == \"object\") {\n        let settingsCopy = JSON.parse(JSON.stringify(this.settings));\n        payload = Object.assign({}, settingsCopy.modal.main, payload);\n        if (payload.id == undefined) {\n          const IDList = this.modals.map(modal => modal.id);\n          let freeID = 0;\n          while (IDList.includes(freeID)) freeID++;\n          payload.id = freeID;\n        }\n        [\"text\", \"range\", \"checkbox\", \"button\"].forEach(type => {\n          if (typeof payload[type] == \"object\") {\n            for (let property in payload[type]) {\n              payload[type][property] = Object.assign({}, settingsCopy.modal[type], payload[type][property]);\n            }\n          }\n        });\n        this.modals.push(payload);\n      }\n    },\n    updateModal(modalId, payload) {\n      let modal = this.modals.find(el => el.id === modalId);\n      if (modal) {\n        this.$recursiveAssign(payload, modal, true);\n      }\n    },\n    deleteModal(payload) {\n      if (typeof payload === \"object\") payload = payload.id;\n      let modalIndex = this.modals.findIndex(modal => modal.id === payload);\n      if (modalIndex !== -1) this.modals.splice(modalIndex, 1);\n    }\n  },\n  created() {\n    this.$onClient(\"W:Modals:Create\", this.addModal);\n    this.$onClient(\"W:Modals:Update\", this.updateModal);\n    this.$onClient(\"W:Modals:Remove\", this.deleteModal);\n    this.$callClient(\"C:Modals:Ready\");\n  },\n  beforeUnmount() {\n    this.$offClient(\"W:Modals:Create\", this.addModal);\n    this.$offClient(\"W:Modals:Update\", this.updateModal);\n    this.$offClient(\"W:Modals:Remove\", this.deleteModal);\n    this.$callClient(\"C:Modals:Destroyed\");\n  }\n};","map":null,"metadata":{},"sourceType":"module"}