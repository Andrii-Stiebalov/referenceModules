{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport rhombusMenuData from \"./Assets/rhombusMenu\";\nexport default {\n  data: function () {\n    return {\n      active: false,\n      locked: false,\n      menuData: [],\n      backupData: [],\n      menuSlots: 8,\n      menuSlotsMax: 24,\n      animation: {\n        timer: [],\n        timeCurrent: null,\n        timeFewSlots: 1,\n        timeMoreSlots: 1\n      },\n      playerGroup: \"\",\n      permission: [],\n      player: \"Toras_Netoras\",\n      selected: {},\n      previousCategoryList: [],\n      activeCategory: \"main\",\n      // This variable have property to dynamic change\n      activeCategoryStart: \"main\" // Static. From what category the menu must be rendered\n    };\n  },\n  mounted() {\n    document.addEventListener(\"keyup\", e => {\n      if (this.active && !this.locked && e.keyCode >= 48 && e.keyCode <= 56) {\n        document.querySelector(`.rhombus-menu__list-item[data-index=\"${e.key}\"`).click();\n      }\n      if (this.active && !this.locked && e.keyCode === 27) {\n        this.menuHandler(false);\n      }\n    });\n    document.addEventListener(\"contextmenu\", () => {\n      this.toBack();\n    });\n    this.$onClient(\"C:Rhombus:Menu:Open\", this.onOpen);\n    this.$onClient(\"C:Rhombus:Menu:menuHandler\", this.menuHandler);\n    this.$onClient(\"C:Rhombus:Menu:SetPlayer\", this.setPlayer);\n    this.$onClient(\"C:Rhombus:Menu:SetPlayerGroup\", this.setPlayerGroup);\n    this.$onClient(\"C:Rhombus:Menu:SetPermission\", this.setPermission);\n    this.$callClient(\"C:Rhombus:Menu:Ready\");\n  },\n  beforeUnmount() {\n    document.removeEventListener(\"keyup\", () => {});\n    document.removeEventListener(\"contextmenu\", () => {});\n    this.$offClient(\"C:Rhombus:Menu:menuHandler\", this.menuHandler);\n    this.$offClient(\"C:Rhombus:Menu:Open\", this.onOpen);\n    this.$offClient(\"C:Rhombus:Menu:SetPlayer\", this.setPlayer);\n    this.$offClient(\"C:Rhombus:Menu:SetPlayerGroup\", this.setPlayerGroup);\n    this.$offClient(\"C:Rhombus:Menu:SetPermission\", this.setPermission);\n  },\n  methods: {\n    getText(text) {\n      if (!text) return;\n      return this.$t(text);\n    },\n    setDefaultCategory(category) {\n      this.activeCategoryStart = category;\n    },\n    onOpen(defaultCategory, category, data) {\n      this.setDefaultCategory(defaultCategory);\n      this.renderCustom(category, data);\n    },\n    setPlayer(player) {\n      this.player = player;\n    },\n    setPlayerGroup(group) {\n      this.playerGroup = group;\n    },\n    setPermission(permission) {\n      this.permission = permission;\n    },\n    renderCustom(category, dataCustom) {\n      if (!this.locked) {\n        setTimeout(() => {\n          this.locked = false;\n        }, document.querySelectorAll(\".rhombus-menu__list-item\").length * this.animation.timeCurrent + 400);\n        this.activeCategory = category;\n        this.backupData = dataCustom;\n        this.init(this.backupData.reduce((a, b) => {\n          if (b.category === this.activeCategory) {\n            a.push(b);\n          }\n          return a;\n        }, [])).then(data => {\n          this.menuData = data;\n          this.menuHandler(true);\n          this.locked = true;\n        });\n      }\n    },\n    render(category) {\n      if (!this.locked) {\n        setTimeout(() => {\n          this.locked = false;\n        }, document.querySelectorAll(\".rhombus-menu__list-item\").length * this.animation.timeCurrent + 400);\n        this.activeCategory = category;\n        this.init(this.backupData.reduce((a, b) => {\n          if (b.category === this.activeCategory) {\n            a.push(b);\n          }\n          return a;\n        }, [])).then(data => {\n          this.menuData = data;\n          this.menuHandler(true);\n          this.locked = true;\n        });\n      }\n    },\n    async init(data) {\n      let arr = [];\n      let arrSubcategory = [];\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].category === this.activeCategory) {\n          if (data[i].hasOwnProperty(\"subCategory\")) {\n            for (let s = 0; s < data[i].subCategory.length; s++) {\n              if (data[i].subCategory[s].hasOwnProperty(\"group\")) {\n                if (data[i].subCategory[s].group.includes(this.playerGroup) || this.permission.includes(data[i].subCategory[s].permission)) {\n                  arrSubcategory.push(data[i].subCategory[s]);\n                }\n              } else {\n                arrSubcategory.push(data[i].subCategory[s]);\n              }\n            }\n            arr.push(...arrSubcategory);\n          } else {\n            if (data[i].hasOwnProperty(\"group\")) {\n              if (data[i].group.includes(this.playerGroup) || this.permission.includes(data[i].permission)) {\n                arr.push(data[i]);\n              }\n            } else {\n              arr.push(data[i]);\n            }\n          }\n        }\n      }\n      if (arr.length > this.menuSlots) {\n        this.animation.timeCurrent = this.animation.timeMoreSlots;\n        return [].concat(arr, new Array(this.menuSlotsMax - arr.length).fill({\n          empty: true,\n          category: this.activeCategory\n        }));\n      } else {\n        this.animation.timeCurrent = this.animation.timeFewSlots;\n        return [].concat(arr, new Array(this.menuSlots - arr.length).fill({\n          empty: true,\n          category: this.activeCategory\n        }));\n      }\n    },\n    changeCategory(e) {\n      if (!this.locked) {\n        setTimeout(() => {\n          this.locked = false;\n        }, document.querySelectorAll(\".rhombus-menu__list-item\").length * this.animation.timeCurrent + 400);\n        try {\n          this.categoryResolver(e.currentTarget).then(data => {\n            this.menuData = data;\n            this.menuHandler(true);\n          });\n          this.locked = true;\n        } catch (e) {\n          this.stackMessage(\"Failed to open category. Or it is action of list\", 2);\n        }\n      }\n    },\n    stackMessage(message, type) {\n      this.$callClient(\"C:Rhombus:stackMessage\", message, type);\n    },\n    toBack() {\n      if (!this.locked && this.active && this.previousCategoryList.length) {\n        let itemIndex = this.previousCategoryList.length - 1;\n        let {\n          id,\n          category,\n          trigger\n        } = this.backupData.find(a => a.category === this.previousCategoryList[itemIndex]);\n        this.render(this.previousCategoryList[itemIndex]);\n        this.selector({\n          dataset: {\n            id: id,\n            category: trigger,\n            trigger: category\n          }\n        });\n        this.previousCategoryList.splice(itemIndex, 1);\n      }\n    },\n    categoryResolver(item) {\n      if (item.classList.contains(\"empty\")) return this.menuData;\n      let arr = [];\n      this.selector(item);\n      this.previousCategoryHandler(item.dataset.category, item.dataset.trigger, item.dataset.type);\n      for (let i = 0; i < this.backupData.length; i++) {\n        if (item.dataset.type === \"list\") {\n          if (this.backupData[i].category === item.dataset.trigger) {\n            if (this.backupData[i].type === \"list\") {\n              this.activeCategory = item.dataset.trigger;\n              return this.init(this.backupData[i].subCategory);\n            }\n          }\n        }\n        if (item.dataset.type === \"action\") {\n          let searchAction = this.backupData.find(a => a.category === item.dataset.category);\n          if (searchAction.hasOwnProperty(\"subCategory\")) {\n            this.codeExecuter(searchAction.subCategory.find(a => a.id === Number(item.dataset.id)).action);\n          } else {\n            this.codeExecuter(this.backupData.find(a => a.category === item.dataset.category && a.id === Number(item.dataset.id)).action);\n          }\n          if (item.dataset.closeMenu) {\n            return this.menuHandler(false);\n          }\n          this.activeCategory = item.dataset.trigger;\n          for (let b = 0; b < this.backupData.length; b++) {\n            if (this.backupData[b].category === item.dataset.trigger) {\n              arr.push(this.backupData[b]);\n            }\n          }\n          return this.init(arr);\n        }\n      }\n    },\n    selector(item) {\n      try {\n        let searchCategory = this.backupData.find(a => a.category === item.dataset.category && a.id === Number(item.dataset.id));\n        console.log(this.activeCategoryStart);\n        console.log(item.dataset.trigger);\n        if (item.dataset.trigger === this.activeCategoryStart) {\n          return this.selected = {\n            title: null,\n            icon: null\n          };\n        }\n        if (!searchCategory) {\n          let searchSubCategory = this.backupData.find(a => a.category === item.dataset.category);\n          if (searchSubCategory.hasOwnProperty(\"subCategory\")) {\n            let searchCategoryById = searchSubCategory.subCategory.find(a => a.id === Number(item.dataset.id));\n            if (searchCategoryById.hasOwnProperty(\"setAsSelected\")) {\n              if (searchCategoryById.setAsSelected) {\n                this.selected = {\n                  player: this.player,\n                  title: searchCategoryById.title,\n                  icon: searchCategoryById.icon\n                };\n              }\n            }\n            return;\n          }\n        }\n        if (searchCategory.type === \"action\") {\n          if (searchCategory.hasOwnProperty(\"closeMenu\")) {\n            if (searchCategory.closeMenu) return;\n          }\n        }\n        if (searchCategory.type === \"list\") {\n          this.selected = {\n            player: this.player,\n            title: searchCategory.title,\n            icon: searchCategory.icon\n          };\n        }\n      } catch (e) {\n        this.stackMessage(\"Failed to set category\", 3);\n      }\n    },\n    previousCategoryHandler(category, trigger, type) {\n      if (trigger === this.activeCategoryStart && type === \"action\") {\n        return this.previousCategoryList = []; // For prevent stack ☺\n      }\n      this.previousCategoryList.push(category);\n    },\n    codeExecuter(action) {\n      try {\n        if (typeof action === \"string\") {\n          setTimeout(() => {\n            try {\n              eval(action);\n              console.log(action);\n            } catch (e) {\n              this.stackMessage(\"Failed to close rhombus menu\", 3);\n            }\n          }, document.querySelectorAll(\".rhombus-menu__list-item.animate-active\").length * this.animation.timeCurrent + 200);\n        }\n        if (typeof action === \"function\") {\n          setTimeout(() => {\n            try {\n              action();\n              console.log(action);\n            } catch (e) {\n              this.stackMessage(\"Failed to close rhombus menu\", 3);\n            }\n          }, document.querySelectorAll(\".rhombus-menu__list-item.animate-active\").length * this.animation.timeCurrent + 200);\n        }\n      } catch (e) {\n        this.stackMessage(\"Failed to execute the code\", 3);\n      }\n    },\n    menuHandler(switcher) {\n      this.$nextTick(() => {\n        try {\n          if (!switcher) {\n            if (this.locked) return;\n            this.active = false;\n            this.selected = {};\n            this.menuData = [];\n            this.previousCategoryList = [];\n            return document.querySelectorAll(\".rhombus-menu__list-item.animate-active\").forEach((item, index) => {\n              this.animation.timer.push(setTimeout(() => {\n                item.classList.remove(\"animate-active\");\n              }, index * this.animation.timeCurrent));\n            }), void this.$callClient(\"C:Rhombus:Close\");\n          }\n          this.active = true;\n          document.querySelectorAll(\".rhombus-menu__list-item.animate-active\").forEach(item => {\n            item.classList.remove(\"animate-active\");\n          });\n          for (let t = 0; t < this.animation.timer.length; t++) {\n            clearTimeout(this.animation.timer[t]);\n          }\n          document.querySelectorAll(\".rhombus-menu__list-item\").forEach((item, index) => {\n            this.animation.timer.push(setTimeout(() => {\n              item.classList.add(\"animate-active\");\n            }, index * this.animation.timeCurrent));\n          });\n        } catch (ex) {\n          var myStackTrace = ex.stack || ex.stacktrace || \"\";\n          console.log(`${myStackTrace} --- ${ex}`);\n        }\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}