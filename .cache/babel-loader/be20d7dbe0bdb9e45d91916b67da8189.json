{"ast":null,"code":"import { formatNumber } from \"../../Assets/functions\";\nexport default {\n  props: {\n    maxValue: {\n      type: [Number],\n      required: false\n    },\n    outsideValue: {\n      type: [Number, null, String],\n      required: false,\n      default: \"\"\n    },\n    placeholder: {\n      type: String,\n      required: false,\n      default: \"\"\n    },\n    icon: {\n      type: String,\n      required: false\n    },\n    type: {\n      type: String,\n      required: true\n    },\n    validate: {\n      type: String,\n      required: false,\n      default: \"any\"\n    },\n    readonly: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    theme: {\n      type: String,\n      required: false,\n      default: \"light\"\n    },\n    direction: {\n      type: String,\n      required: false,\n      default: \"right\"\n    }\n  },\n  data() {\n    return {\n      inputValue: this.outsideValue\n    };\n  },\n  mounted() {\n    if (!this.inputValue) {\n      this.setEmptyValue();\n    }\n  },\n  emits: [\"setValue\"],\n  methods: {\n    removeLeadingZero(value) {\n      const strValue = value.toString();\n      if (/^0\\d/.test(strValue)) {\n        return Number(strValue.replace(/^0+/, \"\"));\n      }\n      return Number(strValue);\n    },\n    validateInput(event) {\n      const input = event.target.value;\n      if (this.validate === \"number\") {\n        this.validateInputNumber(input);\n      } else {\n        this.$emit(\"setValue\", input);\n      }\n    },\n    validateInputNumber(input) {\n      let numericValue = this.removeLeadingZero(input.replace(/\\D/g, \"\"));\n      if (Number(numericValue)) {\n        if (this.maxValue !== undefined && numericValue > this.maxValue) {\n          numericValue = this.maxValue;\n        }\n        this.$emit(\"setValue\", numericValue);\n        this.inputValue = formatNumber(numericValue, \" \");\n      } else {\n        this.setEmptyValue();\n      }\n    },\n    setEmptyValue() {\n      if (this.validate === \"number\") {\n        this.inputValue = 0;\n        this.$emit(\"setValue\", 0);\n      } else {\n        this.inputValue = \"\";\n        this.$emit(\"setValue\", \"\");\n      }\n    }\n  },\n  watch: {\n    outsideValue(newVal) {\n      if (this.validate === \"number\") {\n        if (+this.inputValue) {\n          this.inputValue = formatNumber(+newVal, \" \");\n        } else {\n          this.setEmptyValue();\n        }\n      } else {\n        this.inputValue = newVal;\n      }\n    }\n  },\n  computed: {\n    getTextDirection() {\n      return this.direction === \"right\" ? \"start\" : \"end\";\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}