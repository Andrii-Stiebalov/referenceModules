{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\nimport AimCross from \"./AimIcons/Aim_cross.vue\";\nimport AimTriangle from \"./AimIcons/Aim_triangle.vue\";\nimport AimCircle from \"./AimIcons/Aim_circle.vue\";\nimport AimClassic from \"./AimIcons/Aim_classic.vue\";\nexport default {\n  data() {\n    return {\n      selectedAimType: null,\n      isShowMainColor: false,\n      isShowSecondColor: false,\n      selectedPreviewItem: null,\n      isShowSharing: false,\n      selectedIndexSaved: 0,\n      defaulSettings: {\n        aimType: \"Plus\",\n        isChanged: true,\n        configur: {\n          width: 2,\n          height: 5,\n          distance: 5\n        },\n        mainAim: {\n          hue: 100,\n          lightness: 50,\n          alpha: 0\n        },\n        inAiming: {\n          hue: 180,\n          lightness: 50,\n          alpha: 0\n        }\n      },\n      bindAim: {\n        Classic: AimClassic,\n        Plus: AimCross,\n        Polygon: AimTriangle,\n        Ellipse: AimCircle\n      },\n      aimShareId: \"\",\n      configAimList: {\n        Plus: [{\n          name: \"Длинна\",\n          valueName: \"height\",\n          default: 4,\n          min: 2\n        }, {\n          name: \"Ширина\",\n          valueName: \"width\",\n          default: 2,\n          min: 2\n        }, {\n          name: \"Расстояние\",\n          valueName: \"distance\",\n          default: 50,\n          min: 0\n        }, {\n          name: \"Точка в центре\",\n          valueName: \"withCircle\",\n          default: false,\n          isCheckbox: true\n        }],\n        Polygon: [{\n          name: \"Расстояние\",\n          valueName: \"distance\",\n          default: 50,\n          min: 0\n        }, {\n          name: \"Длинна\",\n          valueName: \"height\",\n          default: 4,\n          min: 2\n        }, {\n          name: \"Ширина\",\n          valueName: \"width\",\n          default: 2,\n          min: 2\n        }, {\n          name: \"Поворот\",\n          valueName: \"rotate\",\n          default: 0,\n          min: 0\n        }],\n        Ellipse: [{\n          name: \"Размер\",\n          valueName: \"width\",\n          default: 50,\n          step: 0.1,\n          min: 0.5\n        }]\n      },\n      // localListOfSavedSection: {\n      //   1: {\n      //     configur: {\n      //       width: 50,\n      //       height: 50,\n      //       distance: 50,\n      //     },\n      //     aimType: \"Plus\",\n      //     mainAim: {\n      //       hue: 180,\n      //       lightness: 50,\n      //       alpha: 0,\n      //     },\n      //     inAiming: {\n      //       hue: 180,\n      //       lightness: 50,\n      //       alpha: 0,\n      //     },\n      //   },\n      //   2: {\n      //     configur: {\n      //       width: 50,\n      //       height: 50,\n      //       distance: 50,\n      //     },\n      //     aimType: \"Plus\",\n      //     mainAim: {\n      //       hue: 180,\n      //       lightness: 50,\n      //       alpha: 0,\n      //     },\n      //     inAiming: {\n      //       hue: 180,\n      //       lightness: 50,\n      //       alpha: 0,\n      //     },\n      //   },\n      //   3: {},\n      //   4: {},\n      //   5: {\n      //     configur: {\n      //       width: 50,\n      //       height: 50,\n      //       distance: 50,\n      //     },\n      //     aimType: \"Plus\",\n      //     mainAim: {\n      //       hue: 180,\n      //       lightness: 50,\n      //       alpha: 0,\n      //     },\n      //     inAiming: {\n      //       hue: 180,\n      //       lightness: 50,\n      //       alpha: 0,\n      //     },\n      //   },\n      //   6: {},\n      //   7: {},\n      //   8: {},\n      // },\n      // selectedAimIndex: 1,\n      previewItemList: [{\n        title: \"День\",\n        iconName: \"Day\",\n        imgName: \"Day-img\"\n      }, {\n        title: \"Наведение\",\n        iconName: \"Aim\",\n        imgName: \"Day-img\"\n      }, {\n        title: \"Ночь\",\n        iconName: \"Night\",\n        imgName: \"Night-img\"\n      }],\n      localListOfSavedSection: null,\n      aimsData: {\n        configur: {\n          width: 50,\n          height: 50,\n          distance: 50\n        },\n        aimType: \"Plus\",\n        mainAim: {\n          hue: 180,\n          lightness: 50,\n          alpha: 0\n        },\n        inAiming: {\n          hue: 180,\n          lightness: 50,\n          alpha: 0\n        }\n      },\n      rangeValue: 0,\n      aimTypeList: [{\n        name: \"Стандартный\",\n        imgName: \"Classic\"\n      }, {\n        name: \"Перекрестие\",\n        imgName: \"Plus\"\n      }, {\n        name: \"Точка\",\n        imgName: \"Ellipse\"\n      }, {\n        name: \"Треугольники\",\n        imgName: \"Polygon\"\n      }]\n    };\n  },\n  watch: {\n    selectedIndexSaved(i) {\n      this.aimsData = Object.assign({}, this.localListOfSavedSection[i]);\n    },\n    listOfSavedSection(val) {\n      this.aimsData = Object.assign({}, this.localListOfSavedSection[this.selectedIndexSaved]);\n      this.localListOfSavedSection = Object.assign({}, this.listOfSavedSection);\n    },\n    settingsData(val) {\n      console.log(this.selectedAimIndex, val.Aim.selectedAimIndex);\n      const listOfValues = Object.values(this.listOfSavedSection);\n      if (val.Aim.selectedAimIndex != this.selectedIndexSaved) {\n        this.selectedIndexSaved = val.Aim.selectedAimIndex;\n      }\n      let index = 1;\n      console.log(this.localListOfSavedSection[index]);\n      // while (this.isEmptyObj(this.localListOfSavedSection[index])) {\n      //   index++;\n      //   if (index > listOfValues.length) {\n      //     index = 0;\n      //     break;\n      //   }\n      // }\n      //this.selectedIndexSaved = index;\n      this.localListOfSavedSection = Object.assign({}, val.Aim.listOfSavedSection);\n      this.aimsData = Object.assign({}, this.localListOfSavedSection[this.selectedIndexSaved]);\n    },\n    aimsData: {\n      deep: true,\n      handler(newVal, oldVal) {\n        if (newVal !== oldVal) {\n          return;\n        }\n        this.aimsData.isChanged = true;\n      }\n    }\n  },\n  components: {\n    AimCross\n  },\n  props: {\n    listOfSavedSection: Object,\n    selectedAimIndex: Number,\n    settingsData: Object\n  },\n  methods: {\n    isEmptyObj(obj) {\n      if (!obj) {\n        return;\n      }\n      return !Object.values(obj).length;\n    },\n    selectSaved(elem, i) {\n      if (this.isEmptyObj(elem)) {\n        this.localListOfSavedSection[i] = this.defaulSettings;\n      } else if (this.selectedIndexSaved === i) {\n        const listOfValues = Object.values(this.listOfSavedSection);\n        const countOfSelected = listOfValues.filter(saved => !this.isEmptyObj(saved));\n        if (countOfSelected.length === 1 && !this.isEmptyObj(this.listOfSavedSection[i])) {\n          return;\n        }\n        this.localListOfSavedSection[i] = {};\n        if (!this.isEmptyObj(this.listOfSavedSection[i])) {\n          this.$callClient(\"C:Aim:Delete\", i);\n        }\n        let index = 1;\n        while (this.isEmptyObj(this.localListOfSavedSection[index])) {\n          index++;\n          if (index > listOfValues.length) {\n            index = 0;\n            break;\n          }\n        }\n        this.selectedIndexSaved = index;\n        return;\n      }\n      this.selectedIndexSaved = i;\n    },\n    selectAimType(AimType) {\n      this.aimsData.aimType = AimType;\n      const configurObj = {};\n      if (!this.configAimList[AimType]) {\n        this.aimsData.configur = configurObj;\n        return;\n      }\n      this.configAimList[AimType].forEach(aimType => {\n        configurObj[aimType.valueName] = aimType.min;\n      });\n      if (!this.aimsData.mainAim) {\n        this.aimsData.mainAim = {\n          hue: 100,\n          lightness: 50,\n          alpha: 0\n        };\n        this.aimsData.inAiming = {\n          hue: 180,\n          lightness: 50,\n          alpha: 0\n        };\n      }\n      this.aimsData.configur = configurObj;\n    },\n    onSave() {\n      const copy = Object.assign({}, this.aimsData);\n      delete copy.isChanged;\n      this.$callClient(\"C:Aim:Save\", this.selectedIndexSaved, copy);\n    },\n    onSet() {\n      this.$callClient(\"C:Aim:Set\", this.selectedIndexSaved);\n    },\n    getAimShareById() {\n      this.$callClient(\"C:Aim:GetSharedAim\", this.aimShareId);\n    },\n    settingsToHash(setting, separator, separator2) {\n      const hashParts = [];\n      for (const key in setting) {\n        const value = setting[key];\n        hashParts.push(`${key[0].toUpperCase()}${separator}${typeof value === \"object\" ? this.settingsToHash(value, \"-\", \"$\") : value}`);\n      }\n      return hashParts.join(separator2);\n    },\n    compressText(text) {\n      const encoder = new TextEncoder();\n      const data = encoder.encode(text);\n      return crypto.subtle.digest(\"SHA-256\", data).then(hashBuffer => {\n        const hashArray = Array.from(new Uint8Array(hashBuffer));\n        const hashHex = hashArray.map(byte => byte.toString(16).padStart(2, \"0\")).join(\"\");\n        return hashHex;\n      });\n    },\n    hslaToHexA(hsla) {\n      if (!hsla) {\n        return \"\";\n      }\n      let {\n        hue,\n        lightness,\n        alpha\n      } = hsla;\n      alpha = (100 - alpha) / 100;\n      let saturation = 100;\n      hue = (hue % 360 + 360) % 360;\n      saturation = Math.min(100, Math.max(0, saturation)) / 100;\n      lightness = Math.min(100, Math.max(0, lightness)) / 100;\n      const c = (1 - Math.abs(2 * lightness - 1)) * saturation;\n      const x = c * (1 - Math.abs(hue / 60 % 2 - 1));\n      const m = lightness - c / 2;\n      let red, green, blue;\n      if (0 <= hue && hue < 60) {\n        red = c;\n        green = x;\n        blue = 0;\n      } else if (60 <= hue && hue < 120) {\n        red = x;\n        green = c;\n        blue = 0;\n      } else if (120 <= hue && hue < 180) {\n        red = 0;\n        green = c;\n        blue = x;\n      } else if (180 <= hue && hue < 240) {\n        red = 0;\n        green = x;\n        blue = c;\n      } else if (240 <= hue && hue < 300) {\n        red = x;\n        green = 0;\n        blue = c;\n      } else {\n        red = c;\n        green = 0;\n        blue = x;\n      }\n      red = Math.round((red + m) * 255);\n      green = Math.round((green + m) * 255);\n      blue = Math.round((blue + m) * 255);\n      alpha = Math.min(255, Math.max(0, Math.round(alpha * 255)));\n      const hexA = `${(\"00\" + red.toString(16)).slice(-2)}${(\"00\" + green.toString(16)).slice(-2)}${(\"00\" + blue.toString(16)).slice(-2)}${(\"00\" + alpha.toString(16)).slice(-2)}`;\n      return hexA;\n    }\n  },\n  mounted() {\n    this.localListOfSavedSection = Object.assign({}, this.listOfSavedSection);\n    this.selectedPreviewItem = this.previewItemList[0];\n    console.log(\"update\");\n    this.selectSaved(this.localListOfSavedSection[this.selectedAimIndex], this.selectedAimIndex);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}