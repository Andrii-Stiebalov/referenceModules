{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport propertyData from \"./Assets/Property.json\";\nimport PropertyExchange_property_setction from \"./Components/PropertyExchange__propertys-section.vue\";\nimport PropertyExchange_Car from \"./Components/PropertyExchange__block-info/PropertyExchange_Car.vue\";\nimport PropertyExchange_House from \"./Components/PropertyExchange__block-info/PropertyExchange_House.vue\";\nimport PropertyExchange_Business from \"./Components/PropertyExchange__block-info/PropertyExchange_Business.vue\";\nexport default {\n  data() {\n    return {\n      isActive: false,\n      player1: {},\n      player2: {},\n      onHoverProperty: {},\n      selectedProperty: {},\n      playerIsReady: false,\n      isSubmit: false,\n      objectTypes: {\n        Biz: \"Бизнес\",\n        House: \"Место проживания\",\n        Car: \"Транспортное средство\"\n      }\n    };\n  },\n  components: {\n    PropertyExchange_property_setction,\n    PropertyExchange_Car,\n    PropertyExchange_House,\n    PropertyExchange_Business\n  },\n  watch: {\n    selectedProperty: {\n      handler() {\n        this.playerIsReady = false;\n        this.$callClient(\"C:ExchangeProperty:IsReady\", this.playerIsReady);\n      },\n      deep: true\n    },\n    playerIsReady() {\n      this.$callClient(\"C:ExchangeProperty:IsReady\", this.playerIsReady);\n    }\n  },\n  computed: {\n    isBizSelected() {\n      if (!this.player1.Property || !this.selectedProperty.Property) {\n        return false;\n      }\n      const player = this.player1.Property.filter(x => this.selectedProperty.Property?.includes(x.ID));\n      return player.some(x => x.ObjectType === \"Biz\");\n    }\n  },\n  methods: {\n    setData(data) {\n      this.isActive = true;\n      this.player1 = data.Player1;\n      this.player2 = data.Player2;\n    },\n    UpdateTargetData(data) {\n      //this.playerIsReady = false;\n      this.player2 = data;\n    },\n    UpdateLocalReady(status) {\n      this.playerIsReady = status;\n    },\n    calculatingRangeInnerWidth(value) {\n      const maxValue = 100;\n      const maxWidth = 21;\n      const procent = value / maxValue;\n      return procent * maxWidth + \"rem\";\n    },\n    setOnHoverProperty(property) {\n      if (this.isObjectNoEmpty(property) && property?.ObjectType !== \"Money\") {\n        this.onHoverProperty = property;\n      }\n    },\n    convertToMoneyFormat(numb) {\n      return new Intl.NumberFormat(\"de-DE\").format(numb) + \"$\";\n    },\n    getCountOf(count, max) {\n      if (!+count) {\n        return this.$t(\"отсутствует\");\n      } else if (count == max) {\n        return \"MAX\";\n      }\n      return `${count}/${max}`;\n    },\n    getStrokeDashoffset(count, max) {\n      const procent = count / max * 100;\n      return 100 - procent;\n    },\n    selectProperty(selectedProperty, moneyForExchange) {\n      const obj = {\n        Property: this.player1.Property.filter(Property => selectedProperty.includes(Property.ID)).map(x => x.ID)\n      };\n      if (moneyForExchange) obj[\"Money\"] = moneyForExchange;\n      this.selectedProperty = obj;\n      this.$callClient(\"C:ExchangeProperty:SendSelected\", this.selectedProperty);\n    },\n    isObjectNoEmpty(obj) {\n      const values = Object.values(obj);\n      return !!values.length;\n    },\n    getPropertyName(property) {\n      if (property.Name) {\n        return property.Name;\n      } else if (property.ObjectType === \"House\") {\n        return this.$t(\"Дом\") + \" №\" + property.ID;\n      }\n      return \"\";\n    },\n    cancelReady() {\n      if (this.playerIsReady) {\n        this.playerIsReady = false;\n        this.$callClient(\"C:ExchangeProperty:IsReady\", this.playerIsReady);\n      } else {\n        this.close();\n      }\n    },\n    onSubmit() {\n      this.isSubmit = true;\n      this.playerIsReady = true;\n      this.$callClient(\"C:ExchangeProperty:IsReady\", this.playerIsReady);\n    },\n    onExchange() {\n      if (this.playerIsReady && this.player2.isReady) {\n        this.$callClient(\"C:ExchangeProperty:Exchange\", this.selectedProperty);\n      }\n    },\n    close() {\n      this.$router.push(\"/\");\n    },\n    onKeyUp(e) {\n      if (e.keyCode === 27 && !window.isModalShow) {\n        this.close();\n      }\n    }\n  },\n  created() {\n    this.$onClient(\"W:ExchangeProperty:setData\", this.setData);\n    this.$onClient(\"W:ExchangeProperty:UpdateTarget\", this.UpdateTargetData);\n    this.$onClient(\"W:ExchangeProperty:UpdateLocalReady\", this.UpdateLocalReady);\n    this.$callClient(\"C:ExchangeProperty:BrowserReady\");\n    window.addEventListener(\"keyup\", this.onKeyUp);\n  },\n  beforeUnmount() {\n    this.$offClient(\"W:ExchangeProperty:setData\", this.setData);\n    this.$offClient(\"W:ExchangeProperty:UpdateTarget\", this.UpdateTargetData);\n    this.$offClient(\"W:ExchangeProperty:UpdateLocalReady\", this.UpdateLocalReady);\n    this.$callClient(\"C:ExchangeProperty:closePage\");\n    window.removeEventListener(\"keyup\", this.onKeyUp);\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}