{"ast":null,"code":"import { hsvToRgb } from \"@/Functions/hsvUtils\";\n;\nexport default {\n  data() {\n    return {\n      indicatorX: 0,\n      indicatorY: 0\n    };\n  },\n  props: {\n    colorHsv: {\n      type: String\n    }\n  },\n  computed: {\n    colorStyle() {\n      return `rgb(${hsvToRgb(this.colorHsv.h, this.colorHsv.s, this.colorHsv.v).join(\",\")})`;\n    },\n    gradientMainColor() {\n      return `rgb(${hsvToRgb(this.colorHsv.h, 1, 1).join(\",\")})`;\n    },\n    getGradient() {\n      return `linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, #000 100%),\n    linear-gradient(270deg, rgba(255, 255, 255, 0) 0%, #fff 100%), ${this.gradientMainColor}`;\n    }\n  },\n  methods: {\n    movePicker(e) {\n      const rect = this.$refs.colorPickerField.getBoundingClientRect();\n      const clientX = e.touches ? e.touches[0].clientX : e.clientX;\n      const clientY = e.touches ? e.touches[0].clientY : e.clientY;\n      const x = clientX - rect.left;\n      const y = clientY - rect.top;\n      if (x < 0 || y < 0 || x > rect.width || y > rect.height) return;\n      const s = x / rect.width;\n      const v = 1 - y / rect.height;\n      this.$emit(\"change\", {\n        ...this.colorHsv,\n        s,\n        v\n      });\n    },\n    onMousedown(e) {\n      this.movePicker(e);\n      document.addEventListener(\"mousemove\", this.movePicker);\n      document.addEventListener(\"mouseup\", () => {\n        document.removeEventListener(\"mousemove\", this.movePicker);\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}