{"ast":null,"code":"import { mapState, mapGetters } from \"vuex\";\nimport CurrentPlayerMenu from \"./CurrentPlayerMenu\";\nimport CurrentPlayerCard from \"./CurrentPlayerCard\";\nexport default {\n  name: \"CurrentPlayer\",\n  components: {\n    CurrentPlayerMenu,\n    CurrentPlayerCard\n  },\n  data() {\n    return {\n      timer: null,\n      currentTime: null,\n      scaleIconProcent: null\n    };\n  },\n  computed: {\n    ...mapState(\"poker\", [\"currentPlayer\", \"activePlayer\", \"currentMoveTime\", \"ratesDone\", \"winCount\", \"minChipsValue\"]),\n    calcCircumference: function () {\n      let number = 2 * Math.PI * 48;\n      return number;\n    },\n    circleValue: function () {\n      const maxCircleValue = 0;\n      if (this.currentMoveTime <= 0 || this.currentTime <= 0) return maxCircleValue;\n      return 100 - this.currentTime / this.currentMoveTime * 100;\n    }\n  },\n  methods: {\n    addChips: function () {\n      this.$emit(\"setSaleOfChips\", true);\n    },\n    getDataFromState(title) {\n      return this.$store.getters[\"universalModal/getFormModalDataByTitle\"](title);\n    },\n    setOption: function () {\n      // this.$emit(\"setAvatarOption\", true);\n      const UniversalModalData = {\n        title: this.$t(\"Установить изображение на аватарку\"),\n        content: [\n        // {\n        //   type: \"description\",\n        //   value: this.$t(\n        //     \"Вставьте ссылку на изображение\"\n        //   ),\n        // },\n        {\n          type: \"input\",\n          options: {\n            label: this.$t(\"Ссылка на изображение\"),\n            valuesName: \"link\"\n          }\n        }],\n        buttons: {\n          submit: {\n            name: this.$t(\"Выставить\"),\n            handler: () => {\n              const link = this.getDataFromState(this.$t(\"Установить изображение на аватарку\").link);\n              window.mp.triggerServer(\"player::changeimage\", link);\n            }\n          },\n          cansel: {\n            name: this.$t(\"Отмена\")\n          }\n        }\n      };\n      this.$UniversalModal.create(UniversalModalData);\n    },\n    setScaleIconProcent() {\n      const fontSize = getComputedStyle(document.documentElement).fontSize;\n      const size = fontSize.slice(0, -2);\n      this.scaleIconProcent = +size / 10;\n    },\n    startTimer() {\n      this.currentTime = this.currentMoveTime;\n      this.timer = setInterval(() => {\n        this.currentTime -= 0.1;\n      }, 100);\n    },\n    stopTimer() {\n      clearInterval(this.timer);\n      this.timer = null;\n    }\n  },\n  watch: {\n    currentTime(val) {\n      if (val <= 0 && this.timer != null) {\n        this.stopTimer();\n      }\n    },\n    activePlayer(val) {\n      if (val !== this.currentPlayer.id) {\n        this.stopTimer();\n      }\n    },\n    currentMoveTime(val) {\n      if (val === 60) {\n        if (this.timer === null) this.startTimer();else this.currentTime = this.currentMoveTime;\n      } else if (val <= 0 && this.timer != null) {\n        this.stopTimer();\n      }\n    }\n  },\n  mounted() {\n    if (this.currentMoveTime === 60) {\n      this.startTimer();\n    }\n    this.setScaleIconProcent();\n  },\n  unmounted() {\n    this.stopTimer();\n  }\n};","map":null,"metadata":{},"sourceType":"module"}