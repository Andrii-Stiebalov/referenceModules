{"ast":null,"code":"const Browser = {\n  argsToString(args) {\n    return args.map(arg => {\n      if (typeof arg === \"object\") {\n        return JSON.stringify(arg);\n      } else if (typeof arg === \"string\") {\n        try {\n          JSON.parse(arg);\n          return arg;\n        } catch {\n          return `\"${arg}\"`;\n        }\n      } else {\n        return arg;\n      }\n    }).join(\",\");\n  },\n  emit(eventName, ...args) {\n    const strArgs = Browser.argsToString(args);\n    eval(`window.Environment.call(\"${eventName}\",${strArgs})`);\n  },\n  isReady() {\n    return new Promise(resolve => {\n      Browser.readyResolve = resolve;\n    });\n  },\n  execute(data) {\n    eval(data);\n  },\n  onBrowserReady() {\n    Browser.readyResolve();\n    window.mp.events.remove(\"C:Global:BrowserReady\", Browser.onBrowserReady);\n    Browser.emit(\"TEST\");\n  },\n  setRoute(routeName) {\n    Browser.emit(\"W:Global:SetRoute\", routeName);\n  },\n  setLanguage(locale) {\n    Browser.emit(\"W:Global:SetLanguage\", locale);\n  },\n  setStore(storePath, palyload) {\n    Browser.emit(\"W:Global:SetStore\", storePath, palyload);\n  }\n};\nwindow.mp.events.add(\"C:Global:BrowserReady\", Browser.onBrowserReady);\nexport default Browser;","map":null,"metadata":{},"sourceType":"module"}