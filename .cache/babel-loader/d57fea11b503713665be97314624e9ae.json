{"ast":null,"code":"import throttle from \"../../Functions/Throttle.js\";\nconst Parallax = {\n  isRunning: false,\n  elementsList: new Map(),\n  activeElements: 0,\n  onMouseMove(e) {\n    if (Parallax.activeElements) {\n      Parallax.elementsList.forEach(el => {\n        if (el.isActive) {\n          let xAxis = (window.innerWidth / 2 - e.pageX) / el.xAxis;\n          let yAxis = (window.innerHeight / 2 - e.pageY) / el.yAxis;\n          el.element.style.transform = `translate(${(xAxis / 10).toFixed(2)}rem, ${(yAxis / 10).toFixed(2)}rem)`;\n        }\n      });\n    }\n  },\n  getFreeId() {\n    let freeId = 0;\n    while (Parallax.elementsList.has(freeId)) freeId++;\n    return freeId;\n  },\n  addElement(element, options) {\n    let elementId = element.dataset.parallaxId;\n    if (elementId == undefined) {\n      elementId = Parallax.getFreeId();\n      const {\n        xAxis,\n        yAxis,\n        isActive\n      } = options;\n      if (isActive) {\n        element.classList.add(\"v-parallax\");\n        Parallax.activeElements++;\n      }\n      element.dataset.parallaxId = elementId;\n      Parallax.elementsList.set(elementId, {\n        element,\n        xAxis,\n        yAxis,\n        isActive\n      });\n    } else {\n      Parallax.updateElement(element, options);\n    }\n  },\n  updateElement(element, options) {\n    let elementId = element.dataset.parallaxId;\n    if (elementId != undefined && Parallax.elementsList.has(Number(elementId))) {\n      elementId = Number(elementId);\n      let currentElement = Parallax.elementsList.get(elementId);\n      let oldActive = currentElement.isActive;\n      Object.keys(currentElement).filter(key => key != \"element\").forEach(key => {\n        currentElement[key] = options[key];\n      });\n      let {\n        isActive\n      } = options;\n      if (!oldActive && isActive) {\n        element.classList.add(\"v-parallax\");\n        Parallax.activeElements++;\n      } else if (oldActive && !isActive) {\n        element.classList.remove(\"v-parallax\");\n        Parallax.activeElements--;\n      }\n    } else {\n      Parallax.addElement(element, options);\n    }\n  },\n  removeElement(element) {\n    let elementId = element.dataset.parallaxId;\n    if (elementId != undefined && Parallax.elementsList.has(Number(elementId))) {\n      elementId = Number(elementId);\n      const {\n        isActive\n      } = Parallax.elementsList.get(elementId);\n      if (isActive) Parallax.activeElements--;\n      Parallax.elementsList.delete(elementId);\n    }\n  }\n};\nif (!Parallax.isRunning) {\n  document.head.insertAdjacentHTML(\"beforeend\", `<style>\n      .v-parallax {\n        transition: 0.2s transform linear;\n      }\n    </style>`);\n  window.addEventListener(\"mousemove\", throttle(100, Parallax.onMouseMove));\n  Parallax.isRunning = true;\n}\nexport default {\n  mounted(el, options) {\n    Parallax.addElement(el, options.value);\n  },\n  updated(el, options) {\n    Parallax.updateElement(el, options.value);\n  },\n  unmounted(el, options) {\n    Parallax.removeElement(el, options.value);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}