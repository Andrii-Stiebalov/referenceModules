{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapGetters } from \"vuex\";\nimport { bindTail } from \"@/Plugins/Map.js\";\nimport FamilyTerritoryWarBrn from \"../Components/FamilyTerritoryWarBrn.vue\";\nimport CdnResolverImage from \"@/Components/CdnResolverImage.vue\";\nexport default {\n  data() {\n    return {\n      itemSize: 70,\n      mapWidth: 4150,\n      mapHeight: 5900,\n      gapSize: 6,\n      isTailWarActive: false,\n      playerCount: 1,\n      attackId: null,\n      isShowNewModal: false,\n      isShowInfoModal: false,\n      selectedBulletType: -1,\n      attackItem: null,\n      iskeyDown: false,\n      isShowInfoModalItem: false,\n      isEffect: false,\n      scale: 0\n    };\n  },\n  components: {\n    FamilyTerritoryWarBrn,\n    CdnResolverImage\n  },\n  computed: {\n    ...mapGetters(\"family\", {\n      territoriesData: \"getTerritoriesData\",\n      familyName: \"getFamilyName\",\n      territoriesStatus: \"getTerritoriesStatus\",\n      territoriesWarData: \"getTerritoriesWarData\",\n      Settings: \"getTerritoriesWarDataSettings\",\n      familyUID: \"getFamilyUID\"\n    }),\n    ...mapGetters({\n      map: \"getMap\"\n    }),\n    getContentStyles() {\n      return {\n        transform: `translate(${this.itemSize * 9 + \"px\"}, ${-this.itemSize + \"px\"})`,\n        gridTemplateColumns: `repeat(${this.countOfColumns}, ${this.itemSize}px)`,\n        gridTemplateRows: `repeat(${this.countOfRows}, ${this.itemSize}px)`,\n        gap: `${this.gapSize}px`\n      };\n    },\n    countOfOwnTerretory() {\n      return this.territoriesStatus.filter(data => data.familyName === this.familyName).length;\n    },\n    scopedRedraw() {\n      return this.redraw();\n    },\n    countOfRows() {\n      const countOfRows = Math.floor(this.mapHeight / (this.itemSize + this.gapSize));\n      return countOfRows + 1;\n    },\n    countOfColumns() {\n      const countOfColumns = Math.floor(this.mapWidth / (this.itemSize + this.gapSize));\n      return countOfColumns + 1;\n    },\n    clearMap() {\n      const result = [];\n      const countOfRows = this.countOfRows;\n      const countOfColumns = this.countOfColumns;\n      for (let i = 0; i < countOfRows; i++) {\n        for (let j = 0; j < countOfColumns; j++) {\n          result.push({\n            id: i + \" | \" + j\n          });\n        }\n      }\n      return result;\n    }\n  },\n  watch: {\n    Settings: {\n      handler(val) {\n        if (!val) {\n          return;\n        }\n        const {\n          MinPlayers\n        } = val;\n        this.playerCount = MinPlayers;\n      },\n      immediate: true\n    },\n    isShowInfoModalItem() {\n      setTimeout(() => {\n        this.setScale(this.scale);\n      });\n    }\n  },\n  methods: {\n    setScale(scale) {\n      this.scale = scale;\n      if (!this.$refs.infoModal?.[0]) {\n        return;\n      }\n      this.$refs.infoModal[0].style.transform = `translateX(-50%) translateY(100%) scale(${scale < 0.8 ? 4 * (1 - scale) : 4 * 0.2})`;\n    },\n    redraw() {\n      let count = 0;\n      return () => {\n        count++;\n        console.log(`redraw map`, count);\n      };\n    },\n    showModal(item, type) {\n      if (this.isEffect) {\n        return;\n      }\n      this.attackId = item.id;\n      const itemData = this.territoriesWarData[item.id];\n      if ((itemData?.isSpecial || itemData?.isBig) && !type) {\n        this.attackItem = itemData;\n        // this.isShowInfoModal = true;\n        this.isShowInfoModalItem = item.id;\n        return;\n      }\n      // this.isShowInfoModal = false;\n      this.isShowInfoModalItem = false;\n      if (itemData?.isWar) {\n        return;\n      }\n      this.isShowNewModal = true;\n    },\n    isTitle(id) {\n      if (!id) {\n        return;\n      }\n      const [y, x] = id.split(\" | \");\n      return y === \"0\" || x === \"0\" || y == this.countOfRows - 1 || x == this.countOfColumns - 1;\n    },\n    onCloseNewModal() {\n      this.isShowNewModal = false;\n    },\n    getGradient(current) {\n      const value = (current - this.Settings.MinPlayers) / (this.Settings.MaxPlayers - this.Settings.MinPlayers) * 100;\n      return `linear-gradient(to right, #40BF6A 0%, #40BF6A ${value}%, #151D1E ${value}%, #151D1E 100%)`;\n    },\n    onStartWar() {\n      const data = {\n        ZoneId: this.attackId,\n        MaxPlayers: this.playerCount,\n        AllowedBullets: this.selectedBulletType,\n        AllowedItems: this.Settings.ItemList.filter(item => item.value).map(item => item.id)\n      };\n      this.$callClient(\"C:Family:RequestCapture\", data);\n      this.isShowNewModal = false;\n      this.isShowInfoModalItem = null;\n      this.isTailWarActive = false;\n    },\n    setEffect(id) {\n      this.attackId = id;\n      const UniversalModalData = {\n        title: this.$t(\"Применнить эффект\"),\n        isSetToStore: true,\n        content: [{\n          type: \"description\",\n          value: this.$t(\"Укажите адресс поля на которое хотите применить эффект\", [id])\n        }, {\n          type: \"address\",\n          options: {\n            inputs: [{\n              label: this.$t(\"Номер ряда\"),\n              valuesName: \"row\",\n              isOnlyNumber: true\n            }, {\n              label: this.$t(\"Номер колонки\"),\n              valuesName: \"colmn\",\n              isOnlyNumber: true\n            }]\n          }\n        }],\n        buttons: {\n          submit: {\n            name: this.$t(\"Да\"),\n            handler: () => {\n              const modalData = this.getDataFromState(this.$t(\"Применнить эффект\"));\n              const {\n                row,\n                colmn\n              } = modalData || {};\n              this.$callClient(\"C:Family:RequestEffect\", id, `${row} | ${colmn}`);\n              this.isEffect = false;\n            }\n          },\n          cansel: {\n            name: this.$t(\"Отмена\")\n          }\n        }\n      };\n      this.$UniversalModal.create(UniversalModalData);\n    },\n    countOfTerretoryOfType(type) {\n      return this.territoriesStatus.filter(territory => territory.Status === type).length;\n    },\n    getDataFromState(title) {\n      return this.$store.getters[\"universalModal/getFormModalDataByTitle\"](title);\n    },\n    getBackground(item) {\n      let opacity;\n      if (!item?.isBig) {\n        opacity = \"66\";\n      } else {\n        opacity = \"BF\";\n      }\n      return item?.color + opacity;\n    },\n    getBigArea(id) {\n      const [y, x] = id.split(\" | \");\n      return `${+y + 1} / ${+x + 1} / ${+y + 3} / ${+x + 3}`;\n    },\n    onActive() {\n      this.isTailWarActive = !this.isTailWarActive;\n    },\n    keyup(e) {\n      if (e.keyCode === 32 && !this.isEffect) {\n        this.isTailWarActive = !this.isTailWarActive;\n        this.iskeyDown = false;\n      }\n    },\n    keydown(e) {\n      if (e.keyCode === 32) {\n        this.iskeyDown = true;\n      }\n    }\n  },\n  updated(val) {\n    console.log(`val`, val);\n  },\n  mounted() {\n    bindTail(this.map, this.$refs.tailWar, this.setScale);\n    window.addEventListener(\"keydown\", this.keydown);\n    window.addEventListener(\"keyup\", this.keyup);\n  },\n  beforeUnmount() {\n    window.removeEventListener(\"keyup\", this.keydown);\n    window.removeEventListener(\"keydown\", this.keyup);\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}