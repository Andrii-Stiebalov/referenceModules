{"ast":null,"code":"export default {\n  data() {\n    return {\n      consoleList: [],\n      isClearAfter: true,\n      selectedCommand: \"\",\n      selectedCommandName: \"\",\n      selectedIndex: -1,\n      isShowHint: true,\n      commandsInputValues: {},\n      isShowNoValidData: false,\n      commandsValue: \"\"\n    };\n  },\n  computed: {\n    splitedSelectedCommand() {\n      if (this.isShowHint) {\n        return [];\n      }\n      const splited = this.selectedCommand.replace(/]/g, \"\").split(\" [\").slice(1, this.selectedCommand.length - 1);\n      return splited;\n    },\n    titles() {\n      return this.$store.getters[\"adminPanel/getLogConfigs\"];\n    },\n    getDate() {\n      const currentDate = new Date();\n      const year = currentDate.getFullYear();\n      const month = String(currentDate.getMonth() + 1).padStart(2, \"0\");\n      const day = String(currentDate.getDate()).padStart(2, \"0\");\n      const hours = String(currentDate.getHours()).padStart(2, \"0\");\n      const minutes = String(currentDate.getMinutes()).padStart(2, \"0\");\n      const seconds = String(currentDate.getSeconds()).padStart(2, \"0\");\n      const formattedDate = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n      return formattedDate;\n    },\n    filteredHints() {\n      if (!this.commandsValue) {\n        return [];\n      }\n      const comandsName = Object.keys(this.titles).sort((a, b) => b.localeCompare(a));\n      return comandsName.filter(comandName => comandName.slice(0, this.commandsValue.length).includes(this.commandsValue)).slice(0, 4);\n    }\n  },\n  watch: {\n    filteredHints(val, old) {\n      if (val.length !== old.length) {\n        // this.selectedIndex = -1;\n      }\n    },\n    commandsValue() {\n      this.commandsInputValues = {};\n    }\n  },\n  methods: {\n    onBlur() {\n      setTimeout(() => this.isShowHint = false, 150);\n    },\n    onSubmit() {\n      let commandString;\n      if (!this.commandsValue) {\n        return;\n      }\n      const isEmpryData = !Object.values(this.commandsInputValues).length;\n      if (isEmpryData) {\n        commandString = this.commandsValue;\n      } else {\n        const values = Object.keys(this.splitedSelectedCommand).map(key => {\n          return this.commandsInputValues[key];\n        });\n        commandString = `${this.commandsValue} ${values.join(\" \")}`;\n      }\n      try {\n        mp.invoke(\"command\", `${commandString}`);\n      } catch {\n        // console.log(\"command\", `${commandString}`);\n      }\n      if (this.isClearAfter) {\n        this.commandsValue = \"\";\n        this.selectedCommand = \"\";\n        this.selectedCommandName = \"\";\n        this.commandsValue = \"\";\n      }\n      const consoleData = {\n        time: this.getDate,\n        data: `/${commandString}`\n      };\n      this.selectedIndex = -1;\n      this.consoleList.unshift(consoleData);\n    },\n    selectCommand(command, name) {\n      console.log(\"_______TEST_______\");\n      this.selectedCommand = command;\n      this.selectedCommandName = name;\n      this.commandsValue = name;\n      this.isShowHint = false;\n    },\n    inputValue(e, index) {\n      this.commandsInputValues[index] = e.target.value;\n    },\n    onkeydown(e) {\n      var activeElement = document.activeElement;\n      if (e.keyCode === 13) {\n        this.onSubmit();\n      }\n      if (activeElement.tagName !== \"INPUT\") {\n        return;\n      }\n      if (e.keyCode === 9) {\n        if (this.isShowHint) {\n          if (this.selectedIndex !== -1) {\n            const lastCommand = this.filteredHints[this.selectedIndex];\n            this.selectedCommandName = lastCommand;\n            this.commandsValue = lastCommand;\n            this.selectedCommand = this.titles[lastCommand];\n            this.isShowHint = false;\n          } else {\n            const lastIndex = this.filteredHints.length - 1;\n            const lastCommand = this.filteredHints[lastIndex];\n            this.selectedCommandName = lastCommand;\n            this.commandsValue = lastCommand;\n            this.selectedCommand = this.titles[lastCommand];\n            this.isShowHint = false;\n            return;\n          }\n          const interval = setInterval(() => {\n            if (this.$refs[\"input-1\"]) {\n              this.$refs[\"input-1\"][0].focus();\n              clearInterval(interval);\n            }\n          });\n        }\n        return;\n      }\n      if (e.keyCode === 38) {\n        console.log(this.selectedIndex);\n        e.preventDefault();\n        const maxLength = !this.isShowHint || !this.filteredHints.length ? this.consoleList.length - 1 : this.filteredHints.length - 1;\n        if (!this.isShowHint || !this.filteredHints.length) {\n          if (!this.consoleList[this.selectedIndex] || this.selectedIndex === -1) {\n            this.commandsValue = \"\";\n          } else {\n            const newCommandValue = this.consoleList[maxLength - this.selectedIndex]?.data?.split(\"\");\n            newCommandValue.shift();\n            this.commandsValue = newCommandValue.join(\"\");\n          }\n        }\n        this.selectedIndex = this.selectedIndex < 0 ? maxLength : this.selectedIndex - 1;\n        return;\n      }\n      if (e.keyCode === 40) {\n        e.preventDefault();\n        const maxLength = !this.isShowHint || !this.filteredHints.length ? this.consoleList.length - 1 : this.filteredHints.length - 1;\n        if (!this.isShowHint || !this.filteredHints.length) {\n          if (!this.consoleList[this.selectedIndex] || this.selectedIndex === -1) {\n            this.commandsValue = \"\";\n          } else {\n            const newCommandValue = this.consoleList[maxLength - this.selectedIndex]?.data?.split(\"\");\n            newCommandValue.shift();\n            this.commandsValue = newCommandValue.join(\"\");\n          }\n        }\n        console.log(this.selectedIndex >= maxLength ? -1 : this.selectedIndex + 1);\n        this.selectedIndex = this.selectedIndex >= maxLength ? -1 : this.selectedIndex + 1;\n        return;\n      }\n    }\n  },\n  mounted() {\n    window.addEventListener(\"keydown\", this.onkeydown);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}