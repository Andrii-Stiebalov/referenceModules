{"ast":null,"code":"import { mapGetters } from \"vuex\";\nimport api from \"./mixins/api.js\";\nimport CdnResolverImage from \"../../../../Components/CdnResolverImage.vue\";\nimport ModalTopUpBalance from \"./global/modal/TopUpBalance.vue\";\nimport ModalPayWay from \"./global/modal/PayWay.vue\";\nimport IconCoinAnimate1 from \"./assets/icons/coin-animate__1.vue\";\nimport IconArrow1 from \"./assets/icons/arrow-1.vue\";\nimport IconMoney1 from \"./assets/icons/money-1.vue\";\nimport IconUser1 from \"./assets/icons/user-1.vue\";\nconst listNavigation = {\n  news: [{\n    title: \"Новости проекта\",\n    route: \"/authentication/news\"\n  }, {\n    title: \"Авторизация\",\n    route: \"/authentication/login\"\n  }, {\n    title: \"Регистрация\",\n    route: \"/authentication/registration\"\n  }],\n  view: [{\n    title: \"Новости проекта\",\n    route: \"/authentication/news/view\"\n  }, {\n    title: \"Авторизация\",\n    route: \"/authentication/login\"\n  }, {\n    title: \"Регистрация\",\n    route: \"/authentication/registration\"\n  }],\n  login: [{\n    title: \"Новости проекта\",\n    route: \"/authentication/news\"\n  }, {\n    title: \"Авторизация\",\n    route: \"/authentication/login\"\n  }, {\n    title: \"Регистрация\",\n    route: \"/authentication/registration\"\n  }],\n  registration: [{\n    title: \"Новости проекта\",\n    route: \"/authentication/news\"\n  }, {\n    title: \"Авторизация\",\n    route: \"/authentication/login\"\n  }, {\n    title: \"Регистрация\",\n    route: \"/authentication/registration\"\n  }],\n  recovery: [{\n    title: \"Новости проекта\",\n    route: \"/authentication/news/view\"\n  }, {\n    title: \"Авторизация\",\n    route: \"/authentication/recovery\"\n  }, {\n    title: \"Регистрация\",\n    route: \"/authentication/registration\"\n  }],\n  confirm: [{\n    title: \"Новости проекта\",\n    route: \"/authentication/news/view\"\n  }, {\n    title: \"Авторизация\",\n    route: \"/authentication/recovery/confirm\"\n  }, {\n    title: \"Регистрация\",\n    route: \"/authentication/registration\"\n  }],\n  password: [{\n    title: \"Новости проекта\",\n    route: \"/authentication/news/view\"\n  }, {\n    title: \"Авторизация\",\n    route: \"/authentication/recovery/password\"\n  }, {\n    title: \"Регистрация\",\n    route: \"/authentication/registration\"\n  }]\n};\nconst listNavigationIsLoggIn = {\n  news: [{\n    title: \"Новости проекта\",\n    route: \"/authentication/news\"\n  }, {\n    title: \"Выбор персонажа\",\n    route: \"/authentication/character\"\n  }],\n  view: [{\n    title: \"Новости проекта\",\n    route: \"/authentication/news/view\"\n  }, {\n    title: \"Выбор персонажа\",\n    route: \"/authentication/character\"\n  }],\n  character: [{\n    title: \"Новости проекта\",\n    route: \"/authentication/news\"\n  }, {\n    title: \"Выбор персонажа\",\n    route: \"/authentication/character\"\n  }],\n  \"select-spawn\": [{\n    title: \"Место появления\",\n    route: \"/authentication/select-spawn\"\n  }]\n};\nexport default {\n  components: {\n    CdnResolverImage,\n    ModalTopUpBalance,\n    ModalPayWay,\n    IconCoinAnimate1,\n    IconArrow1,\n    IconMoney1,\n    IconUser1\n  },\n  mixins: [api],\n  props: {\n    route: {\n      type: String,\n      required: true\n    }\n  },\n  computed: {\n    ...mapGetters(\"global\", [\"getCdnResolver\", \"getPayment\", \"getModals\"]),\n    ...mapGetters(\"authentication\", [\"getProfile\", \"getCharacters\", \"getSelectSpawn\"]),\n    getRouteList() {\n      if (this.getProfile.isLoggIn) {\n        return listNavigationIsLoggIn[this.route];\n      } else {\n        return listNavigation[this.route];\n      }\n    },\n    getUserPicture() {\n      return \"cdn/authentication/users-pictures/default-picture.png\";\n      // return `cdn/authentication/users-pictures/${getProfile.login}.png`; -> To profile update\n    }\n  },\n  methods: {\n    dropdownHandler(e) {\n      e.currentTarget.classList.toggle(\"active\");\n    },\n    modalTopUpBalanceEscapeHandler() {\n      this.getModals.topUpBalance = false;\n      this.getPayment.amount = null;\n    },\n    modalTopUpBalanceDaggerHandler() {\n      this.getModals.topUpBalance = false;\n      this.getPayment.amount = null;\n    },\n    modalTopUpBalanceFormSubmit(e) {\n      e.preventDefault();\n      if (this.getPayment.amount < 1) {\n        return this.$Notification.create({\n          type: \"error\",\n          layout: \"compact-bottom__right\",\n          theme: \"compact\",\n          time: 5000,\n          text: `\n                        <div class=\"notification-text__item\">\n                            <div class=\"notification-text__item-title\">\n                                <span>${this.$t(\"Ошибка\")}</span>\n                            </div>\n                            <div class=\"notification-text__item-subtitle\">\n                                <span>${this.$t(\"Минимальная сумма для пополнения 10 рублей.\")}</span>\n                            </div>\n                        </div>\n                        <div class=\"notification-text__item\">\n                            <div class=\"notification-text__item-icon\">\n                                <span class=\"icon-error\"></span>\n                            </div>\n                        </div>\n                    `,\n          progressBar: false\n        });\n      }\n      if (this.getPayment.amount > 800) {\n        return this.$Notification.create({\n          type: \"error\",\n          layout: \"compact-bottom__right\",\n          theme: \"compact\",\n          time: 5000,\n          text: `\n                        <div class=\"notification-text__item\">\n                            <div class=\"notification-text__item-title\">\n                                <span>${this.$t(\"Ошибка\")}</span>\n                            </div>\n                            <div class=\"notification-text__item-subtitle\">\n                                <span>${this.$t(\"Максимальная сумма для пополнения 150.000 рублей.\")}</span>\n                            </div>\n                        </div>\n                        <div class=\"notification-text__item\">\n                            <div class=\"notification-text__item-icon\">\n                                <span class=\"icon-error\"></span>\n                            </div>\n                        </div>\n                    `,\n          progressBar: false\n        });\n      }\n      this.modalPayWayFormSubmit();\n    },\n    modalPayWayEscapeHandler() {\n      this.getModals.payWay = false;\n      this.getPayment.selectedPayWay = {};\n    },\n    modalPayWayDaggerHandler() {\n      this.getModals.payWay = false;\n      this.getPayment.selectedPayWay = {};\n    },\n    modalPayWayFormSubmit(e) {\n      if (e) e.preventDefault();\n      // if (Object.keys(this.getPayment.selectedPayWay).length) {\n      this.APIpayment({\n        id_merchant: 0,\n        merchant_name: \"interkassa\",\n        merchant_payway: \"\",\n        merchant_payway_id: \"\",\n        merchant_title: \"\"\n      }, this.getPayment.amount).then(data => {\n        if (data.status) {\n          this.getPayment.src = data.url;\n          this.getPayment.iframeActive = true;\n        } else {\n          switch (data.code) {\n            default:\n              this.getModals.payWay = false;\n              this.getPayment.selectedPayWay = {};\n              this.$Notification.create({\n                type: \"warning\",\n                layout: \"compact-bottom__right\",\n                theme: \"compact\",\n                time: 5000,\n                text: `\n                                            <div class=\"notification-text__item\">\n                                                <div class=\"notification-text__item-title\">\n                                                    <span>Внимание</span>\n                                                </div>\n                                                <div class=\"notification-text__item-subtitle\">\n                                                    <span>${this.$t(\"Что-то пошло не так. Обратитесь в техническую поддержку.\")}</span>\n                                                </div>\n                                            </div>\n                                            <div class=\"notification-text__item\">\n                                                <div class=\"notification-text__item-icon\">\n                                                    <span class=\"icon-warning\"></span>\n                                                </div>\n                                            </div>\n                                        `,\n                progressBar: false\n              });\n              break;\n          }\n        }\n      }).catch(() => {\n        this.$Notification.create({\n          type: \"error\",\n          layout: \"compact-bottom__right\",\n          theme: \"compact\",\n          time: 5000,\n          text: `\n                                <div class=\"notification-text__item\">\n                                    <div class=\"notification-text__item-title\">\n                                        <span>${this.$t(\"Ошибка\")}</span>\n                                    </div>\n                                    <div class=\"notification-text__item-subtitle\">\n                                        <span>${this.$t(\"Время ожидание от сервера вышло, попробуйте позже.\")}</span>\n                                    </div>\n                                </div>\n                                <div class=\"notification-text__item\">\n                                    <div class=\"notification-text__item-icon\">\n                                        <span class=\"icon-error\"></span>\n                                    </div>\n                                </div>\n                            `,\n          progressBar: false\n        });\n      });\n      /*} else {\r\n                this.$Notification.create({\r\n                    type: 'warning',\r\n                    layout: 'compact-bottom__right',\r\n                    theme: 'compact',\r\n                    time: 5000,\r\n                    text: `\r\n                        <div class=\"notification-text__item\">\r\n                            <div class=\"notification-text__item-title\">\r\n                                <span>Внимание</span>\r\n                            </div>\r\n                            <div class=\"notification-text__item-subtitle\">\r\n                                <span>${this.$t('Вы не выбрали способ оплаты.')}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"notification-text__item\">\r\n                            <div class=\"notification-text__item-icon\">\r\n                                <span class=\"icon-warning\"></span>\r\n                            </div>\r\n                        </div>\r\n                    `,\r\n                    progressBar: false\r\n                });\r\n            }*/\n    },\n    changeAccount() {\n      this.$RPC.call(\"Authentication.Character.Logout\").then(([status, error]) => {\n        if (status) {\n          this.getProfile.isLoggIn = false;\n          this.getCdnResolver.cdnKey = null;\n          this.getProfile.login = null;\n          this.getProfile.balance = null;\n          this.getCharacters.information = [];\n          this.getCharacters.selected = null;\n          this.getSelectSpawn.allow = [];\n          this.$router.push(\"/authentication/login\");\n        } else {\n          this.$Notification.create({\n            type: \"error\",\n            layout: \"compact-bottom__right\",\n            theme: \"compact\",\n            time: 5000,\n            text: `\n                                <div class=\"notification-text__item\">\n                                    <div class=\"notification-text__item-title\">\n                                        <span>${this.$t(\"Ошибка\")}</span>\n                                    </div>\n                                    <div class=\"notification-text__item-subtitle\">\n                                        <span>${error}</span>\n                                    </div>\n                                </div>\n                                <div class=\"notification-text__item\">\n                                    <div class=\"notification-text__item-icon\">\n                                        <span class=\"icon-error\"></span>\n                                    </div>\n                                </div>\n                            `,\n            progressBar: false\n          });\n        }\n      });\n    }\n  },\n  watch: {\n    \"getPayment.iframeActive\"(value) {\n      if (value) {\n        this.$RPC.call(\"Authentication.Navigation.PaymentClose\").then(([status]) => {\n          if (status) {\n            this.getPayment.amount = null;\n            this.getPayment.selectedPayWay = {};\n            this.getPayment.iframeActive = false;\n            this.getPayment.src = null;\n            this.getModals.topUpBalance = false;\n            this.getModals.payWay = false;\n            window.focus();\n          }\n        });\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}