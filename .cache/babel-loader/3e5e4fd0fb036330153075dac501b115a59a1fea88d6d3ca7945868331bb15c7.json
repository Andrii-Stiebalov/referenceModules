{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeStyle as _normalizeStyle, normalizeClass as _normalizeClass, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"arena-wrapper\"\n};\nconst _hoisted_2 = {\n  class: \"arena-main\"\n};\nconst _hoisted_3 = {\n  class: \"arena-main__wrapper grid\"\n};\nconst _hoisted_4 = {\n  class: \"arena-main__scroll\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  class: \"arena-card__image-title\"\n};\nconst _hoisted_7 = {\n  class: \"arena-card__main\"\n};\nconst _hoisted_8 = {\n  class: \"arena-card__line\"\n};\nconst _hoisted_9 = {\n  class: \"arena-card__line medium\"\n};\nconst _hoisted_10 = {\n  class: \"arena-additional additional\"\n};\nconst _hoisted_11 = {\n  class: \"arena-additional__wrapper\"\n};\nconst _hoisted_12 = {\n  class: \"arena-additional__main\"\n};\nconst _hoisted_13 = {\n  class: \"arena-additional__main-description\"\n};\nconst _hoisted_14 = {\n  class: \"arena-additional__main-list\"\n};\nconst _hoisted_15 = {\n  class: \"arena-string\"\n};\nconst _hoisted_16 = {\n  class: \"arena-string\"\n};\nconst _hoisted_17 = {\n  class: \"arena-string\"\n};\nconst _hoisted_18 = {\n  key: 0,\n  class: \"arena-additional__main-inputs\"\n};\nconst _hoisted_19 = {\n  key: 0\n};\nconst _hoisted_20 = [\"placeholder\", \"value\", \"onInput\", \"onFocus\", \"onBlur\"];\nconst _hoisted_21 = {\n  key: 1,\n  class: \"arena-additional__main-inputs\"\n};\nconst _hoisted_22 = {\n  class: \"arena-selection__wrapper\"\n};\nconst _hoisted_23 = {\n  class: \"arena-additional__buttons\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  const _component_Selection = _resolveComponent(\"Selection\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"p\", null, _toDisplayString(_ctx.$t(\"Режимы\")), 1), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.modes, mode => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: _normalizeClass([\"arena-card max\", {\n        active: mode.id == $data.activeMode.id\n      }]),\n      key: mode.id,\n      onClick: $event => $options.setAtciveMode(mode)\n    }, [_createElementVNode(\"div\", {\n      class: \"arena-card__image\",\n      style: _normalizeStyle({\n        background: `center / cover url('./img/Arena/${mode.mapName}.png') no-repeat`\n      })\n    }, [_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"p\", null, _toDisplayString(_ctx.$t($options.getMapName(mode.mapName))), 1)])], 4), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"p\", null, _toDisplayString(_ctx.$t($options.getGameName(mode.gameType))), 1)]), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"p\", null, _toDisplayString(_ctx.$t(\"Игроков: {0}-{1}\", [mode.minPlayers, mode.maxPlayers])), 1), _createElementVNode(\"p\", null, _toDisplayString(mode.command != 1 ? _ctx.$t(\"Команды: {0}\", [mode.command]) : _ctx.$t(\"Команды: Нету\")), 1)])])], 10, _hoisted_5);\n  }), 128))])])]), _createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"p\", null, [_createTextVNode(\" Esc\"), _createVNode(_component_router_link, {\n    tabindex: \"-1\",\n    to: \"/arena/main\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.$t(\"Назад\")), 1)]),\n    _: 1\n  })]), _createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"p\", null, _toDisplayString(_ctx.$t($options.getGameName($data.activeMode.gameType))), 1), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"p\", null, _toDisplayString(_ctx.$t(\"Описание режима\")), 1), _createElementVNode(\"p\", null, _toDisplayString(_ctx.$t($options.getGameDescription($data.activeMode.gameType))), 1)]), _createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"p\", _hoisted_15, [_createTextVNode(_toDisplayString(_ctx.$t(\"Длительность\")), 1), _createElementVNode(\"span\", null, _toDisplayString(_ctx.$t(\"{0} мин.\", [$data.activeMode.duration])), 1)]), _createElementVNode(\"p\", _hoisted_16, [_createTextVNode(_toDisplayString(_ctx.$t(\"Количество игроков\")), 1), _createElementVNode(\"span\", null, _toDisplayString($data.activeMode.minPlayers) + \"-\" + _toDisplayString($data.activeMode.maxPlayers), 1)]), _createElementVNode(\"p\", _hoisted_17, [_createTextVNode(_toDisplayString(_ctx.$t(\"Количество команд\")), 1), _createElementVNode(\"span\", null, _toDisplayString($data.activeMode.command), 1)])]), $data.currentStep == 1 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_18, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(Object.keys($data.inputs), input => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"arena-input\",\n      key: input\n    }, [_createElementVNode(\"p\", null, [_createTextVNode(_toDisplayString(_ctx.$t($options.getInputName(input))) + \" \", 1), input == 'password' ? (_openBlock(), _createElementBlock(\"span\", _hoisted_19, _toDisplayString(_ctx.$t(\"не обязательно\")), 1)) : _createCommentVNode(\"\", true)]), _createElementVNode(\"input\", {\n      type: \"text\",\n      placeholder: _ctx.$t($options.getInputPlaceholder(input)),\n      value: $data.inputs[input],\n      onInput: $event => $options.onInput(input, $event),\n      onFocus: $event => $options.onFocus(input, $event),\n      onBlur: $event => $options.onBlur(input, $event)\n    }, null, 40, _hoisted_20)]);\n  }), 128))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_21, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(['mapList', 'gunList'].filter(type => Object.keys($data.activeMode).includes(type)), select => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"arena-selection\",\n      key: select\n    }, [_createElementVNode(\"p\", null, _toDisplayString(_ctx.$t($options.getSelectionName(select))), 1), _createElementVNode(\"div\", _hoisted_22, [_createVNode(_component_Selection, {\n      active: $data.selects[select],\n      list: $data.activeMode[select],\n      onSelect: $event => $options.setList(select, $event)\n    }, null, 8, [\"active\", \"list\", \"onSelect\"])])]);\n  }), 128))]))]), _createElementVNode(\"div\", _hoisted_23, [_createElementVNode(\"button\", {\n    tabindex: \"-1\",\n    class: \"arena-button blue\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.createLobby && $options.createLobby(...args))\n  }, [_createElementVNode(\"p\", null, _toDisplayString(Object.keys(this.activeMode).some(x => x == \"mapList\" || x == \"gunList\") && $data.currentStep == 1 ? _ctx.$t(\"Готово\") : _ctx.$t(\"Создать игру\")), 1)])])])])]);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}