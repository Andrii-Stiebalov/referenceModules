{"ast":null,"code":"// import JSEncrypt from \"../../libs/jsencrypt.min.js\";\nimport { mapGetters, mapMutations } from \"vuex\";\nexport default {\n  props: {\n    path: {\n      type: String,\n      required: true\n    },\n    secondPath: {\n      type: String\n    },\n    cdnkey: {\n      type: String\n    },\n    user: {\n      type: String\n    }\n  },\n  data() {\n    return {\n      image: \"\"\n    };\n  },\n  computed: {\n    getCdnResolver() {\n      return this.$store.getters.getCdnResolver;\n    }\n  },\n  // mounted() {\n  //   if (this.getVuexGettersgetCdnResolver.images.has(this.path)) {\n  //     this.image = this.getVuexGettersgetCdnResolver.images.get(this.path);\n  //   } else {\n  //     this.image =\n  //       this.getVuexGettersgetCdnResolver.serverLink +\n  //       `/${this.path.replace(\"cdn/\", \"\")}`;\n  //     this.getVuexGettersgetCdnResolver.images.set(this.path, this.image);\n  //   }\n  // },\n  async mounted() {\n    if (this.getCdnResolver.images.has(this.path)) {\n      // Если изображение уже загружено в кеш, используем его\n      this.image = this.getCdnResolver.images.get(this.path);\n    } else {\n      // Проверяем существование изображения по пути\n      const imageExists = await this.checkImageExists(this.getCdnResolver.serverLink + `/${this.path.replace(\"cdn/\", \"\")}`);\n      if (imageExists) {\n        // Если изображение существует, устанавливаем его в атрибут src\n        this.image = this.getCdnResolver.serverLink + `/${this.path.replace(\"cdn/\", \"\")}`;\n        // Сохраняем изображение в кеш\n        this.getCdnResolver.images.set(this.path, this.image);\n      } else if (this.secondPath) {\n        // Если изображение не существует, можно установить альтернативное изображение или текст\n        // Например:\n        this.image = this.getCdnResolver.serverLink + `/${this.secondPath.replace(\"cdn/\", \"\")}`;\n      }\n    }\n  },\n  methods: {\n    async checkImageExists(imagePath) {\n      return new Promise(resolve => {\n        const img = new Image();\n        img.onload = () => resolve(true);\n        img.onerror = () => resolve(false);\n        img.src = imagePath;\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}