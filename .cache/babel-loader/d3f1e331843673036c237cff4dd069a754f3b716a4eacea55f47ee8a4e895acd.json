{"ast":null,"code":"import throttle from \"../../Functions/Throttle.js\";\nconst Parallax3D = {\n  isRunning: false,\n  elementsList: new Map(),\n  activeElements: 0,\n  onMouseMove(e) {\n    if (Parallax3D.activeElements) {\n      Parallax3D.elementsList.forEach(el => {\n        if (el.isActive) {\n          let xAxis = (window.innerWidth / 2 - e.pageX) / el.xAxis;\n          let yAxis = (window.innerHeight / 2 - e.pageY) / el.yAxis;\n          el.element.style.transform = `perspective(${el.perspective}rem) rotateY(${-xAxis * (el.xInvert ? -1 : 1)}deg) rotateX(${yAxis * (el.yInvert ? -1 : 1)}deg)`;\n        }\n      });\n    }\n  },\n  getFreeId() {\n    let freeId = 0;\n    while (Parallax3D.elementsList.has(freeId)) freeId++;\n    return freeId;\n  },\n  addElement(element, options) {\n    let elementId = element.dataset.Parallax3DId;\n    if (elementId == undefined) {\n      elementId = Parallax3D.getFreeId();\n      const {\n        xAxis,\n        yAxis,\n        isActive,\n        perspective,\n        xInvert,\n        yInvert\n      } = options;\n      if (isActive) {\n        element.classList.add(\"v-parallax3D\");\n        Parallax3D.activeElements++;\n      }\n      element.dataset.Parallax3DId = elementId;\n      Parallax3D.elementsList.set(elementId, {\n        element,\n        xAxis,\n        yAxis,\n        xInvert,\n        yInvert,\n        perspective,\n        isActive\n      });\n    } else {\n      Parallax3D.updateElement(element, options);\n    }\n  },\n  updateElement(element, options) {\n    let elementId = element.dataset.Parallax3DId;\n    if (elementId != undefined && Parallax3D.elementsList.has(Number(elementId))) {\n      elementId = Number(elementId);\n      let currentElement = Parallax3D.elementsList.get(elementId);\n      let oldActive = currentElement.isActive;\n      Object.keys(currentElement).filter(key => key != \"element\").forEach(key => {\n        currentElement[key] = options[key];\n      });\n      let {\n        isActive\n      } = options;\n      if (!oldActive && isActive) {\n        element.classList.add(\"v-parallax3D\");\n        Parallax3D.activeElements++;\n      } else if (oldActive && !isActive) {\n        element.classList.remove(\"v-parallax3D\");\n        Parallax3D.activeElements--;\n      }\n    } else {\n      Parallax3D.addElement(element, options);\n    }\n  },\n  removeElement(element) {\n    let elementId = element.dataset.Parallax3DId;\n    if (elementId != undefined && Parallax3D.elementsList.has(Number(elementId))) {\n      elementId = Number(elementId);\n      const {\n        isActive\n      } = Parallax3D.elementsList.get(elementId);\n      if (isActive) Parallax3D.activeElements--;\n      Parallax3D.elementsList.delete(elementId);\n    }\n  }\n};\nif (!Parallax3D.isRunning) {\n  document.head.insertAdjacentHTML(\"beforeend\", `<style>\n      .v-parallax3D {\n        transition: 0.2s transform linear;\n      }\n    </style>`);\n  window.addEventListener(\"mousemove\", throttle(100, Parallax3D.onMouseMove));\n  Parallax3D.isRunning = true;\n}\nexport default {\n  mounted(el, options) {\n    Parallax3D.addElement(el, options.value);\n  },\n  updated(el, options) {\n    Parallax3D.updateElement(el, options.value);\n  },\n  unmounted(el, options) {\n    Parallax3D.removeElement(el, options.value);\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}