{"ast":null,"code":"import { mapGetters, mapMutations } from \"vuex\";\nimport ProgressBar from \"./ProgressBar.vue\";\nexport default {\n  components: {\n    ProgressBar\n  },\n  props: {\n    notification: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      active: false,\n      progress: false,\n      timer: null\n    };\n  },\n  computed: {\n    ...mapGetters(\"notification\", [\"getSettings\"]),\n    getTime() {\n      return this.notification.time !== undefined ? this.notification.time : this.getSettings.time;\n    },\n    getType() {\n      return `notification-type__${this.notification.type !== undefined ? this.notification.type : this.getSettings.type}`;\n    },\n    getTheme() {\n      return `notification-theme__${this.notification.theme !== undefined ? this.notification.theme : this.getSettings.theme}`;\n    },\n    getTransition() {\n      return this.notification.transition !== undefined ? this.notification.transition : this.getSettings.transition;\n    },\n    getClasses() {\n      return `${this.getType} ${this.getTheme}`;\n    },\n    withProgressbar() {\n      return this.notification.progressBar !== undefined ? this.notification.progressBar : this.getSettings.progressBar;\n    }\n  },\n  methods: {\n    ...mapMutations(\"notification\", [\"removeNotification\"]),\n    remove() {\n      this.removeNotification(this.notification);\n    },\n    startTimer() {\n      if (this.getTime) {\n        this.timer = setTimeout(() => {\n          this.active = false;\n        }, this.getTime);\n      }\n      setTimeout(() => {\n        this.progress = true;\n      }, 50);\n    },\n    stopTimer() {\n      clearTimeout(this.timer);\n      this.progress = false;\n    },\n    closeNotification() {\n      this.active = false;\n    }\n  },\n  mounted() {\n    this.active = true;\n    this.startTimer();\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}