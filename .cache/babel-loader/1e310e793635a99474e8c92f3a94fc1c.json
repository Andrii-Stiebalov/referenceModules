{"ast":null,"code":"import { mapGetters } from \"vuex\";\nimport IconMail1 from \"./assets/icons/mail-1.vue\";\nimport IconUser2 from \"./assets/icons/user-2.vue\";\nimport IconCastle1 from \"./assets/icons/castle-1.vue\";\nimport IconEyeHide1 from \"./assets/icons/eye-hide__1.vue\";\nimport IconEyeShow1 from \"./assets/icons/eye-show__1.vue\";\nimport IconTicket1 from \"./assets/icons/ticket-1.vue\";\nexport default {\n  components: {\n    IconMail1,\n    IconUser2,\n    IconCastle1,\n    IconEyeHide1,\n    IconEyeShow1,\n    IconTicket1\n  },\n  data() {\n    return {\n      inputs: {\n        login: {\n          value: \"\",\n          focus: false,\n          valid: false,\n          handler: {\n            focus: () => {\n              this.inputs.login.focus = true;\n            },\n            blur: () => {\n              this.inputs.login.focus = false;\n            },\n            validate: e => {\n              let regExp = /^([\\da-zA-Z]){3,25}$/;\n              this.inputs.login.valid = regExp.test(e.target.value);\n              this.inputs.login.status.code = 1;\n              this.validateLoginTimeout && clearTimeout(this.validateLoginTimeout);\n              this.validateLoginTimeout = setTimeout(() => {\n                this.inputs.login.valid ? this.inputs.login.status.code = 3 : this.inputs.login.status.code = 2;\n              }, 1000);\n            }\n          },\n          status: {\n            code: 0\n          }\n        },\n        password: {\n          value: \"\",\n          focus: false,\n          show: false,\n          valid: false,\n          criterion: {\n            long: {\n              min: 8,\n              status: {\n                valid: false,\n                code: 2\n              }\n            },\n            regExp: {\n              entry: {\n                test: /^[\\da-zA-Z@#$!%^&*]+$/\n              },\n              letter: {\n                test: /[a-zA-Z^\\s]/,\n                status: {\n                  valid: false,\n                  code: 2\n                }\n              },\n              number: {\n                test: /[\\d@#$!%^&*]/,\n                status: {\n                  valid: false,\n                  code: 2\n                }\n              }\n            }\n          },\n          handler: {\n            focus: () => {\n              this.inputs.password.focus = true;\n            },\n            blur: () => {\n              this.inputs.password.focus = false;\n            },\n            eye: () => {\n              this.inputs.password.show = !this.inputs.password.show;\n            },\n            validate: e => {\n              this.inputs.password.valid = false;\n              this.inputs.password.criterion.long.status.code = 1;\n              this.inputs.password.criterion.regExp.letter.status.code = 1;\n              this.inputs.password.criterion.regExp.number.status.code = 1;\n              this.validatePasswordTimeout && clearTimeout(this.validatePasswordTimeout);\n              this.validatePasswordTimeout = setTimeout(() => {\n                if (e.target.value.length >= this.inputs.password.criterion.long.min) {\n                  this.inputs.password.criterion.long.status.valid = true;\n                  this.inputs.password.criterion.long.status.code = 3;\n                } else {\n                  this.inputs.password.criterion.long.status.valid = false;\n                  this.inputs.password.criterion.long.status.code = 2;\n                }\n                if (this.inputs.password.criterion.regExp.letter.test.test(e.target.value)) {\n                  this.inputs.password.criterion.regExp.letter.status.valid = true;\n                  this.inputs.password.criterion.regExp.letter.status.code = 3;\n                } else {\n                  this.inputs.password.criterion.regExp.letter.status.valid = false;\n                  this.inputs.password.criterion.regExp.letter.status.code = 2;\n                }\n                if (this.inputs.password.criterion.regExp.number.test.test(e.target.value)) {\n                  this.inputs.password.criterion.regExp.number.status.valid = true;\n                  this.inputs.password.criterion.regExp.number.status.code = 3;\n                } else {\n                  this.inputs.password.criterion.regExp.number.status.valid = false;\n                  this.inputs.password.criterion.regExp.number.status.code = 2;\n                }\n                if (!this.inputs.password.criterion.regExp.entry.test.test(e.target.value)) {\n                  this.inputs.password.criterion.regExp.number.status.valid = false;\n                  this.inputs.password.criterion.regExp.number.status.code = 2;\n                }\n                if (this.inputs.password.criterion.long.status.valid && this.inputs.password.criterion.regExp.letter.status.valid && this.inputs.password.criterion.regExp.number.status.valid) {\n                  this.inputs.password.valid = true;\n                }\n              }, 1000);\n            }\n          }\n        },\n        repeatPassword: {\n          value: \"\",\n          focus: false,\n          show: false,\n          valid: false,\n          handler: {\n            focus: () => {\n              this.inputs.repeatPassword.focus = true;\n            },\n            blur: () => {\n              this.inputs.repeatPassword.focus = false;\n            },\n            eye: () => {\n              this.inputs.repeatPassword.show = !this.inputs.repeatPassword.show;\n            }\n          }\n        },\n        email: {\n          value: \"\",\n          focus: false,\n          valid: false,\n          handler: {\n            focus: () => {\n              this.inputs.email.focus = true;\n            },\n            blur: () => {\n              this.inputs.email.focus = false;\n            },\n            validate: e => {\n              let regExp = /^[\\w-.]{1,50}@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/;\n              this.inputs.email.valid = regExp.test(e.target.value);\n              this.inputs.email.status.code = 1;\n              this.validateEmailTimeout && clearTimeout(this.validateEmailTimeout);\n              this.validateEmailTimeout = setTimeout(() => {\n                this.inputs.email.valid ? this.inputs.email.status.code = 3 : this.inputs.email.status.code = 2;\n              }, 1000);\n            }\n          },\n          status: {\n            code: 0\n          }\n        },\n        promocode: {\n          value: \"\",\n          focus: false,\n          valid: true,\n          handler: {\n            focus: () => {\n              this.inputs.promocode.focus = true;\n            },\n            blur: () => {\n              this.inputs.promocode.focus = false;\n            },\n            validate: e => {\n              let regExp = /^[\\da-zA-Z]+$/;\n              this.inputs.promocode.valid = regExp.test(e.target.value);\n              this.inputs.promocode.status.code = 1;\n              if (!this.inputs.promocode.value.length) {\n                this.inputs.promocode.valid = true;\n                this.inputs.promocode.status.code = 0;\n                return clearTimeout(this.validatePromocodeTimeout);\n              }\n              this.validatePromocodeTimeout && clearTimeout(this.validatePromocodeTimeout);\n              this.validatePromocodeTimeout = setTimeout(() => {\n                this.inputs.promocode.valid ? this.inputs.promocode.status.code = 3 : this.inputs.promocode.status.code = 2;\n              }, 1000);\n            }\n          },\n          status: {\n            code: 0\n          }\n        }\n      }\n    };\n  },\n  computed: {\n    ...mapGetters(\"global\", [\"getCdnResolver\"]),\n    ...mapGetters(\"authentication\", [\"getProfile\", \"getCharacters\", \"getRecovery\"])\n  },\n  methods: {\n    registration(e) {\n      e.preventDefault();\n      if (this.inputs.login.valid && this.inputs.password.valid && this.inputs.email.valid && this.inputs.promocode.valid) {\n        if (this.inputs.password.value === this.inputs.repeatPassword.value) {\n          this.$RPC.call(\"Authentication.Registration.Submit\", JSON.stringify({\n            login: this.inputs.login.value,\n            password: this.inputs.password.value,\n            email: this.inputs.email.value,\n            promocode: this.inputs.promocode.value\n          })).then(([status, data, error]) => {\n            try {\n              if (status) {\n                this.getProfile.login = data.user.login;\n                this.getProfile.balance = String(data.user.balance);\n                this.getCdnResolver.cdnKey = data.cdn.key;\n                this.getCharacters.information = data.characters;\n                this.getProfile.isLoggIn = true;\n                this.$router.push(\"/authentication/character\");\n                this.$Notification.create({\n                  type: \"success\",\n                  layout: \"compact-bottom__right\",\n                  theme: \"compact\",\n                  time: 5000,\n                  text: `\n                      <div class=\"notification-text__item\">\n                          <div class=\"notification-text__item-title\">\n                              <span>${this.$t(\"Успешная регистрация\")}</span>\n                          </div>\n                      </div>\n                      <div class=\"notification-text__item\">\n                          <div class=\"notification-text__item-icon\">\n                              <span class=\"icon-success\"></span>\n                          </div>\n                      </div>\n                      `,\n                  progressBar: false\n                });\n              } else {\n                this.$Notification.create({\n                  type: \"error\",\n                  layout: \"compact-bottom__right\",\n                  theme: \"compact\",\n                  time: 5000,\n                  text: `\n                      <div class=\"notification-text__item\">\n                          <div class=\"notification-text__item-title\">\n                              <span>${this.$t(\"Ошибка\")}</span>\n                          </div>\n                          <div class=\"notification-text__item-subtitle\">\n                              <span>${error}</span>\n                          </div>\n                      </div>\n                      <div class=\"notification-text__item\">\n                          <div class=\"notification-text__item-icon\">\n                              <span class=\"icon-error\"></span>\n                          </div>\n                      </div>\n                      `,\n                  progressBar: false\n                });\n              }\n            } catch (error) {\n              console.log(error);\n            }\n          });\n        } else {\n          this.$Notification.create({\n            type: \"error\",\n            layout: \"compact-bottom__right\",\n            theme: \"compact\",\n            time: 5000,\n            text: `\n                <div class=\"notification-text__item\">\n                    <div class=\"notification-text__item-title\">\n                        <span>${this.$t(\"Ошибка\")}</span>\n                    </div>\n                    <div class=\"notification-text__item-subtitle\">\n                        <span>${this.$t(\"Пароли не совпадают.\")}</span>\n                    </div>\n                </div>\n                <div class=\"notification-text__item\">\n                    <div class=\"notification-text__item-icon\">\n                        <span class=\"icon-error\"></span>\n                    </div>\n                </div>\n                `,\n            progressBar: false\n          });\n        }\n      }\n    }\n  },\n  beforeMount() {\n    if (this.getProfile.isLoggIn) {\n      return this.$router.push(\"/authentication/character\");\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}