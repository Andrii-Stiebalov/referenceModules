{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      appActive: true,\n      colors: [\"#161616\", \"#F4F4F4\", \"#BB2929\", \"#036DB9\", \"#12C258\"],\n      forms: [\"triangle\", \"round\", \"rectangle\", \"triangle2\"],\n      activeColor: \"\",\n      gameActive: false,\n      cursorX: 0,\n      cursorY: 0,\n      time: 0,\n      shapeCount: 10,\n      activeShapeCount: 1,\n      activeShape: {}\n    };\n  },\n  methods: {\n    isColorActive(color) {\n      return this.activeColor == color;\n    },\n    setActiveColor(color) {\n      if (!this.isColorActive(color)) this.activeColor = color;\n    },\n    onKeyDown(e) {\n      if (e.keyCode === 81 || e.keyCode === 69) {\n        let multiplier = e.keyCode === 81 ? -1 : 1;\n        this.activeColor = this.colors[this.colors.indexOf(this.activeColor) + multiplier] ? this.colors[this.colors.indexOf(this.activeColor) + multiplier] : multiplier > 0 ? this.colors[0] : this.colors[this.colors.length - 1];\n      }\n    },\n    onMarkerClick(e) {\n      if (!this.gameActive) {\n        this.timerLogic();\n        this.gameActive = true;\n        this.onMouseMove(e);\n        this.startGame();\n      }\n    },\n    onMouseMove(e) {\n      if (this.gameActive) {\n        [this.cursorX, this.cursorY] = [e.clientX, e.clientY];\n      }\n    },\n    timerLogic() {\n      if (!this.timer) {\n        this.timer = setInterval(() => {\n          this.time += 100;\n        }, 100);\n      }\n    },\n    closeApp() {\n      this.$router.push({\n        name: \"HUD\"\n      });\n    },\n    setResult(state) {\n      clearInterval(this.timer);\n      this.gameActive = false;\n      setTimeout(() => {\n        this.appActive = false;\n      }, 300);\n      if (state) this.$callClient(\"Drawer.GameResult\", this.time);else this.appActive = false;\n    },\n    generateShape() {\n      const boardSizes = this.$refs.board.getBoundingClientRect();\n      const [boardWidth, boardHeight] = [boardSizes.width, boardSizes.height];\n      const shapeSizes = {\n        width: Math.floor((Math.random() / 2 + 0.5) * boardWidth / 5),\n        height: Math.floor((Math.random() / 2 + 0.5) * boardHeight / 5)\n      };\n      const shapePosition = {\n        left: Math.floor(Math.random() * (boardWidth - shapeSizes.width)),\n        top: Math.floor(Math.random() * (boardHeight - shapeSizes.height))\n      };\n      const shapeColor = this.colors[Math.round(Math.random() * (this.colors.length - 1))];\n      const shapeForm = this.forms[Math.floor(Math.random() * (this.forms.length - 1))];\n      const activeShape = {\n        style: {\n          width: `${shapeSizes.width}px`,\n          height: `${shapeSizes.height}px`,\n          left: `${shapePosition.left}px`,\n          top: `${shapePosition.top}px`,\n          backgroundColor: shapeColor\n        },\n        class: shapeForm\n      };\n      this.activeShape = activeShape;\n    },\n    startGame() {\n      if (this.activeShapeCount <= this.shapeCount && this.gameActive) {\n        if (this.activeShapeCount > 1) {\n          if (this.activeShape.style.backgroundColor != this.activeColor) return;\n        }\n        this.activeShapeCount++;\n        this.generateShape();\n      } else {\n        this.setResult(true);\n      }\n    }\n  },\n  created() {\n    this.activeColor = this.colors[0];\n    window.addEventListener(\"keydown\", this.onKeyDown);\n    window.addEventListener(\"mousemove\", this.onMouseMove);\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}