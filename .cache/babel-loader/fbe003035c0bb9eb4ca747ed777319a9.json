{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/web.structured-clone.js\";\nimport { Howl } from \"howler\";\nimport data from \"../Assets/data.json\";\nimport trackList from \"../Assets/trackList.json\";\nimport { get } from \"jquery\";\nexport default {\n  data() {\n    return {\n      isActive: false,\n      selectedTrackId: 0,\n      listOfNames: [\"Cochise\", \"Bam\", \"Kozak\", \"NWA\", \"KUPALA\", \"JerryHeil\"\n      // \"BOY\",\n      // \"Bad\",\n      // \"BANDERA\",\n      ],\n      figureList: [],\n      viewFigureList: [],\n      canvasFigureList: [],\n      currentFigure: null,\n      figureListInterval: null,\n      IsRight: null,\n      showColor: false,\n      startTime: null,\n      // isDevMode: false, -------\n      isDevMode: false,\n      nextCurrentFigure: null,\n      priviusScore: 0,\n      width: 105,\n      height: 8.4,\n      speed: 1,\n      bindArrow: {\n        37: \"←\",\n        38: \"↑\",\n        39: \"→\",\n        40: \"↓\"\n      },\n      sound: null,\n      soundDuration: 0,\n      score: 0,\n      countOfRight: 0,\n      currentTimeout: null,\n      testList: [],\n      animationTime: 4000,\n      colorBind: {\n        orange: \"#FFCC4D\",\n        red: \"#F53\",\n        purple: \"#A30EFF\",\n        green: \"#34C924\"\n      },\n      availibleTimeGap: 250,\n      musicDeley: 500,\n      soundVolume: 50,\n      maxScore: 100000,\n      isFirstPlay: true,\n      isCanvas: true,\n      isGameEnd: false,\n      timerInterval: null,\n      timeoutList: [],\n      timer: 0\n    };\n  },\n  watch: {\n    soundVolume(value) {\n      this.sound.volume(value / 100);\n    }\n  },\n  computed: {\n    selectedName() {\n      return this.listOfNames[this.selectedTrackId];\n    },\n    isRandom() {\n      return !this.songData?.IsBinded;\n    },\n    getTrackData() {\n      return this.songData;\n    },\n    songData() {\n      return this.$store.getters[\"danceMingame/getSongById\"](this.selectedTrackId);\n    },\n    scoreByOneWin() {\n      return this.maxScore / this.figureList.length;\n    },\n    timeGap() {\n      return this.animationTime * 0.5;\n    },\n    timeGap2() {\n      return this.timeGap;\n    },\n    currentAnimationTime() {\n      const muliply = Math.floor(this.countOfRight / 3) / 10;\n      return Math.max(this.animationTime / (1 + muliply), 1300);\n    },\n    multiply() {\n      return 1 + this.countOfRight / 10;\n    },\n    gradient() {\n      const value = this.soundVolume;\n      return `linear-gradient(to right, #40BF6A 0%, #40BF6A ${value}%, #1C1C1E ${value}%, #1C1C1E 100%)`;\n    },\n    timestampData() {\n      return data[this.selectedTrackId];\n    }\n  },\n  methods: {\n    pxToRem(px) {\n      return `${px / parseFloat(getComputedStyle(document.documentElement).fontSize)}rem`;\n    },\n    remToPx(rem) {\n      return `${rem * parseFloat(getComputedStyle(document.documentElement).fontSize)}`;\n    },\n    setCanvas() {\n      const canvas = this.$refs.canvas;\n      canvas.width = this.remToPx(this.width);\n      canvas.height = this.remToPx(this.height);\n      this.canvas = canvas;\n      this.ctx = canvas.getContext(\"2d\");\n    },\n    drawFigure(figure) {\n      const {\n        key,\n        status,\n        x\n      } = figure;\n      const ctx = this.ctx;\n      if (!status) {\n        ctx.fillStyle = \"white\";\n      } else {\n        ctx.fillStyle = status === \"win\" ? \"#2bd9d9\" : \"#e32636\";\n      }\n      ctx.font = `bold 5rem Montserrat`;\n      ctx.fillText(`${this.bindArrow[key] || this.timestampData.name}`, this.canvas.width - 30 - this.canvas.width * (x / 100), this.canvas.height / 2 + 30 / 2);\n    },\n    setAnimationCanvasGame() {\n      const animation = () => {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this.canvasFigureList.forEach(figure => {\n          this.drawFigure(figure);\n        });\n        requestAnimationFrame(animation);\n      };\n      animation();\n    },\n    playCanvasGame() {\n      if (this.isDevMode) {\n        return;\n      }\n      this.setAnimationCanvasGame();\n      this.startGame = performance.now();\n      let currentItemIndex = 0;\n      let currentAnimationTime = this.currentAnimationTime;\n      const setTimer = () => {\n        const currentItem = this.figureList[currentItemIndex];\n        if (currentItem.isNewGroup) {\n          currentAnimationTime = this.currentAnimationTime;\n        }\n        currentItem.animationDuration = this.isRandom ? currentAnimationTime : this.animationTime;\n        const timer = setTimeout(() => {\n          this.canvasFigureList.push(currentItem);\n          const timer = setTimeout(() => {\n            this.setAnination(currentItem);\n          });\n          this.timeoutList.push(timer);\n          currentItemIndex++;\n          if (currentItemIndex < this.figureList.length) {\n            setTimer();\n          }\n          const timer2 = setTimeout(() => {\n            this.currentFigure = currentItem;\n            this.currentFigure.startTime = performance.now() - this.startTime;\n            this.currentTimeout = setTimeout(() => {\n              if (!this.currentFigure) {\n                return;\n              }\n              if (this.currentFigure.key === 0) {\n                return;\n              }\n              this.currentFigure.status = \"fail\";\n              this.currentFigure = null;\n              this.setScore(false, this.timeGap);\n            }, this.availibleTimeGap + 200);\n          }, currentItem.animationDuration * 0.5 - this.availibleTimeGap);\n          this.timeoutList.push(timer2);\n          setTimeout(() => {\n            this.canvasFigureList.shift();\n          }, this.animationTime);\n        }, this.getNewItemTime(currentItemIndex, currentItem));\n        this.timeoutList.push(timer);\n      };\n      setTimer();\n    },\n    setTimer(time) {\n      this.timer = time;\n      this.timerInterval = setInterval(() => {\n        this.timer--;\n        if (this.timer <= 0) {\n          clearInterval(this.timerInterval);\n        }\n      }, 1000);\n    },\n    getPerfomenceTimeGap(currentItemIndex, timeGap) {\n      if (this.isRandom) {\n        return 0;\n      }\n      const now = performance.now() - this.startTime;\n      const nextTimestamp = this.figureList[currentItemIndex]?.timestamp;\n      return nextTimestamp - (now + timeGap + this.timeGap);\n    },\n    roundTimestamp(timestamp) {\n      return Math.round(timestamp / 10) * 10;\n    },\n    getNewItemTime(currentItemIndex, currentItem) {\n      // const priviusTimeStamp = this.figureList[currentItemIndex - 1]?.timestamp;\n      const resut = currentItem.timestamp;\n      const performanceTimeGap = this.getPerfomenceTimeGap(currentItemIndex, resut);\n      return resut + performanceTimeGap;\n    },\n    setAnination(currentItem) {\n      const animationDuration = currentItem.animationDuration || this.animationTime;\n      const startTime = Date.now();\n      const animFallBtn = () => {\n        const now = Date.now();\n        const progress = (now - startTime) / animationDuration;\n        currentItem.x = progress * 100;\n        if (progress > 1) {\n          currentItem.x = 100;\n        } else {\n          requestAnimationFrame(animFallBtn);\n        }\n      };\n      requestAnimationFrame(animFallBtn);\n    },\n    generateRandomList() {\n      const figureList = [];\n      const keys = Object.keys(this.bindArrow);\n      const bpm = 158;\n      const step = 60000 / bpm;\n      let priviusTimeStamp = 1000;\n      while (priviusTimeStamp < this.soundDuration - 5000) {\n        const key = keys[Math.floor(Math.random() * keys.length)];\n        const random = this.getRandomSeconds();\n        const timestamp = random * step;\n        priviusTimeStamp += timestamp;\n        const isNewGroup = random > 1;\n        figureList.push({\n          key: +key,\n          timestamp,\n          isNewGroup\n        });\n      }\n      return figureList;\n    },\n    getRandomSeconds() {\n      const randomSection = Math.random();\n      if (randomSection < 0.6) {\n        return 1;\n      }\n      return Math.floor(Math.random() * 3) + 3;\n    },\n    playSound() {\n      if (this.isDevMode) {\n        this.startTime = performance.now();\n      }\n      this.sound.play();\n    },\n    addNewItem(e) {\n      if (!this.startTime) {\n        this.startTime = performance.now();\n      }\n      const obj = {\n        key: e.keyCode,\n        timestamp: (performance.now() - this.startTime) * this.speed\n      };\n      this.testList.push(obj);\n      console.log(this.testList);\n    },\n    async setScore(isRight, timeGap) {\n      this.IsRight = isRight;\n      this.showColor = true;\n      if (isRight) {\n        this.$callClient(\"W:DanceMiniGame:Game:Right\");\n        const procent = 1 - (timeGap / 200 + 0.01);\n        const newScore = this.scoreByOneWin * procent * this.multiply;\n        this.priviusScore = this.score;\n        this.score += Math.floor(newScore);\n        if (procent < 0.3) {\n          this.lastStatus = \"Погано\";\n        } else if (procent < 0.7) {\n          this.lastStatus = \"Добре\";\n        } else {\n          this.lastStatus = \"Відмінно\";\n        }\n        this.countOfRight++;\n      } else {\n        this.$callClient(\"W:DanceMiniGame:Game:Fail\");\n        this.countOfRight = 0;\n      }\n    },\n    handleTap(e) {\n      const arrows = Object.keys(this.bindArrow);\n      if (!arrows.includes(e.keyCode.toString())) {\n        return;\n      }\n      e.preventDefault();\n      if (!this.currentFigure) {\n        this.setScore(false);\n        return;\n      }\n      const now = performance.now() - this.startTime;\n      const currentFigure = this.currentFigure;\n      const isRight = currentFigure.key === e.keyCode;\n      const timeGap = Math.abs(currentFigure.startTime + 200 - now);\n      this.currentFigure.status = isRight ? \"win\" : \"fail\";\n      this.currentFigure = null;\n      this.setScore(isRight, timeGap);\n      clearTimeout(this.currentTimeout);\n    },\n    onSubmitPlay() {\n      this.startTime = performance.now();\n      const timer = setTimeout(() => {\n        this.playSound();\n      }, this.timestampData?.startTimeGap);\n      this.timeoutList.push(timer);\n      if (!this.isRandom && this.timestampData) {\n        this.animationDuration = this.timestampData.speed || this.animationDuration;\n        // ------\n        this.figureList = structuredClone(this.timestampData.timeList);\n      }\n    },\n    initGame() {\n      if (this.isRandom) {\n        this.figureList = this.generateRandomList();\n      }\n      this.onSubmitPlay();\n      const timer = setTimeout(() => {\n        this.playCanvasGame();\n      }, 0);\n      this.timeoutList.push(timer);\n    },\n    onSubmitDev() {\n      this.startTime = performance.now();\n      this.loadSound();\n    },\n    loadSound() {\n      if (!this.getTrackData?.link) {\n        this.$callClient(\"W:DanceMiniGame:Game:EventError\");\n        return;\n      }\n      this.sound = new Howl({\n        src: [this.getTrackData?.link],\n        volume: this.soundVolume / 100,\n        rate: this.speed,\n        onended: () => {},\n        onload: () => {\n          this.soundDuration = this.sound.duration() * 1000;\n          if (this.isDevMode) {\n            this.playSound();\n          }\n          if (this.isRandom) {\n            this.figureList = this.generateRandomList();\n          }\n          this.$callClient(\"W:DanceMiniGame:Game:SoundLoaded\");\n        }\n      });\n      this.sound.on(\"end\", () => {\n        this.$callClient(\"W:DanceMiniGame:Game:EndGame\", this.score);\n      });\n    },\n    setData(data) {\n      if (this.isDevMode) {\n        return;\n      }\n      console.log(`W:DanceMiniGame:Game:SetData => data`, data);\n      this.$recursiveAssign(data, this.$data, true);\n      this.loadSound();\n    }\n  },\n  mounted() {\n    this.isActive = true;\n    this.setCanvas();\n    if (!this.isDevMode) {\n      this.$onClient(\"W:DanceMiniGame:Game:SetData\", this.setData);\n      this.$onClient(\"W:DanceMiniGame:Game:PlayGame\", this.initGame);\n      this.$onClient(\"W:DanceMiniGame:Game:SetTimer\", this.setTimer);\n    }\n    this.$callClient(\"W:DanceMiniGame:Game:Ready\");\n    window.addEventListener(\"keydown\", !this.isDevMode ? this.handleTap : this.addNewItem);\n  },\n  beforeUnmount() {\n    this.isActive = false;\n    this.sound?.stop();\n    window.removeEventListener(\"keydown\", !this.isDevMode ? this.handleTap : this.addNewItem);\n    if (!this.isDevMode) {\n      this.$offClient(\"W:DanceMiniGame:Game:SetData\", this.setData);\n      this.$offClient(\"W:DanceMiniGame:Game:PlayGame\", this.initGame);\n    }\n    clearInterval(this.timerInterval);\n    this.timeoutList.forEach(timer => clearTimeout(timer));\n  }\n};","map":null,"metadata":{},"sourceType":"module"}