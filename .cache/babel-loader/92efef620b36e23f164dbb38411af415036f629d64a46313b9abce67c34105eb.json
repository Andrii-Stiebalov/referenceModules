{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport recursiveAssing from \"@/Functions/RecursiveAssign\";\nfunction parseArray(furnituresList) {\n  let array = [];\n  for (let item of furnituresList) {\n    array.push({\n      Identifier: item[0],\n      isMounted: item[1],\n      Price: item[2],\n      Name: item[3],\n      ImagePath: `cdn/furniture/images/${item[4]}.png`,\n      propName: item[4]\n    });\n  }\n  return array;\n}\nexport default {\n  namespaced: true,\n  state: {\n    furnituresList: [],\n    inWearhouse: 50,\n    mounted: 40\n  },\n  getters: {\n    getFurnituresList(state) {\n      return state.furnituresList;\n    },\n    getFurniturePlayerData(state) {\n      return {\n        inWearhouse: state.inWearhouse,\n        mounted: state.mounted\n      };\n    }\n  },\n  mutations: {\n    setData(state, data) {\n      recursiveAssing(data, state, true);\n      console.log(state);\n    },\n    ClearAll(state) {\n      state.furnituresList = [];\n    },\n    AddFurniture(state, data) {\n      state.furnituresList = [...state.furnituresList, ...parseArray(data)];\n    },\n    DespawnAll(state) {\n      state.furnituresList = state.furnituresList.map(item => {\n        return {\n          ...item,\n          isMounted: !true\n        };\n      });\n    },\n    SetSpawnStatus(state, [id, status]) {\n      let item = state.furnituresList.find(item => item.Identifier == id);\n      console.log(status);\n      if (item) {\n        item.isMounted = status;\n      }\n      state.furnituresList = [...state.furnituresList];\n    },\n    RemoveFurtinure(state, id) {\n      state.furnituresList = state.furnituresList.filter(item => item.Identifier != id);\n    }\n  },\n  actions: {\n    SetData({\n      commit\n    }, payload) {\n      commit(\"setData\", payload);\n    },\n    ClearAll({\n      commit\n    }, payload) {\n      commit(\"ClearAll\", payload);\n    },\n    AddFurniture({\n      commit\n    }, payload) {\n      commit(\"AddFurniture\", payload);\n    },\n    DespawnAll({\n      commit\n    }, payload) {\n      commit(\"DespawnAll\", payload);\n    },\n    SetSpawnStatus({\n      commit\n    }, payload) {\n      commit(\"SetSpawnStatus\", payload);\n    },\n    RemoveFurtinure({\n      commit\n    }, payload) {\n      commit(\"RemoveFurtinure\", payload);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}