{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nfunction findItemCardById(data, id, exceptions) {\n  for (const key in data) {\n    if (Array.isArray(data[key]) && !exceptions.includes(key)) {\n      for (const item of data[key]) {\n        if (item && item.id === id) {\n          return item;\n        }\n      }\n    }\n  }\n  return null;\n}\nfunction loadImages(data, playerData) {\n  if (!data) return;\n  console.log(data);\n  console.log(playerData);\n  let Images = [];\n  for (let index = 0; index < data.length; index++) {\n    let element = data[index];\n    element = element.replace(/^data:image\\/[a-z]+;base64,/, \"\");\n    Images.push(element);\n  }\n  const json = {\n    //data:image/png;base64,\n    Images: Images ? Images : null,\n    data: playerData\n  };\n  const options = {\n    method: \"POST\",\n    body: JSON.stringify(json),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  fetch(\"http://146.59.110.123:3006/upload\", options).then(response => {\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    return response.json();\n  }).then(data => {\n    console.log(\"Success:\", data);\n  }).catch(error => {\n    console.error(\"Error:\", error);\n  });\n}\nasync function UploadImageToCDN(imgURL) {\n  const createBlob = async name => {\n    return new Promise((res, rej) => {\n      fetch(`http://screenshots/take?${name}`).then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.blob();\n      }).then(blob => {\n        res(blob);\n      }).catch(error => {\n        // Этот блок catch отлавливает как ошибки сети, так и ошибки, брошенные выше\n        rej(error);\n      });\n    });\n  };\n  const resizeImage = (blob, maxWidth, maxHeight, callback) => {\n    const url = URL.createObjectURL(blob);\n    const img = new Image();\n    img.onload = () => {\n      URL.revokeObjectURL(url);\n      const canvas = document.createElement('canvas');\n      const scale = Math.min(maxWidth / img.width, maxHeight / img.height);\n      canvas.width = img.width * scale;\n      canvas.height = img.height * scale;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n      let pngDataUrl = canvas.toDataURL(`image/jpg`, 1);\n      callback(pngDataUrl);\n    };\n    img.src = url;\n  };\n  function loadImagesCustom(image, path) {\n    const json = {\n      path: path,\n      Image: image\n    };\n    const options = {\n      method: \"POST\",\n      body: JSON.stringify(json),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    fetch(\"http://146.59.110.123:3006/uploadimage\", options).then(response => {\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      return response.json();\n    }).then(data => {\n      console.log(\"Success:\", data);\n    }).catch(error => {\n      console.error(\"Error:\", error);\n    });\n  }\n  const blob = await createBlob(imgURL);\n  // Передаем blob в функцию resizeImage, которая изменит размер\n  // Нам потребуется обернуть вызов resizeImage в Promise, чтобы использовать с async/await\n  const resizedBlob = await new Promise((resolve, reject) => {\n    resizeImage(blob, 1920, 1080, resized => {\n      if (resized) {\n        console.log(resized);\n        loadImagesCustom(resized.replace(/^data:image\\/[a-z]+;base64,/, \"\"), `../${imgURL}`);\n        return resized;\n      } else {\n        reject(new Error('Ошибка изменения размера изображения'));\n      }\n    });\n  });\n}\nimport recursiveAssing from \"@/Functions/RecursiveAssign\";\nconst marketPlace = {\n  namespaced: true,\n  state: {\n    isFocusExchangeOffers: false,\n    favoritesId: [],\n    myListingsId: [],\n    selectedItem: null,\n    searchItems: [],\n    searchValue: null,\n    filtersItems: [],\n    temporaryData: {\n      extraImgs: []\n    },\n    config: {\n      myOffers: [],\n      auction: [],\n      estate: [],\n      business: [],\n      atms: [],\n      billboards: [],\n      items: [],\n      clothes: [],\n      transport: [],\n      services: [],\n      transportRent: [],\n      myListings: [],\n      createListing: [],\n      shoppingHistory: [],\n      stock: [],\n      moderation: []\n    },\n    settings: {\n      isTablet: null,\n      listingPricePerHour: null,\n      listingMinPostingHours: null,\n      listingMaxPostingHours: null,\n      listingMaxPostingPrice: null,\n      offerMaxPostingPrice: null,\n      coefficients: null,\n      exchangeOfferDeletePrice: null\n    },\n    filters: {\n      category: null,\n      sort: null,\n      transport: null,\n      rent: null,\n      gender: null,\n      dealership: null,\n      clothes: null\n    },\n    modalData: {\n      itemCard: null,\n      type: null\n    }\n  },\n  mutations: {\n    // Мои обьявления\n    setIsTablet(state, value) {\n      state.settings.isTablet = value;\n    },\n    setExtraImgs(state, extraImgs) {\n      state.temporaryData.extraImgs = extraImgs;\n    },\n    uploadExtraImgs(state, data) {\n      loadImages(state.temporaryData.extraImgs, data);\n      state.temporaryData.extraImgs = [];\n    },\n    uploadPlayerScreenToCdn(state, data) {\n      UploadImageToCDN(data);\n    },\n    resetExtraImgs(state) {\n      state.temporaryData.extraImgs = [];\n    },\n    switchFocusExchangeOffers(state) {\n      state.isFocusExchangeOffers = !state.isFocusExchangeOffers;\n    },\n    myListingsAdd(state, itemCardId) {\n      state.myListingsId.unshift(itemCardId);\n    },\n    myListingsDelete(state, itemCardId) {\n      state.myListingsId = state.myListingsId.filter(id => id !== itemCardId);\n    },\n    // Аукцион\n    auctionAddBet(state, [itemCardId, bet]) {\n      const itemCard = state.config.auction.find(itemCard => itemCard.id === itemCardId);\n      if (itemCard) {\n        itemCard.price = bet.newPrice;\n        if (!itemCard.data?.biddingList) {\n          itemCard.data.biddingList = [];\n        }\n        itemCard.data.biddingList.push(bet);\n      }\n    },\n    auctionContinue(state, [itemCardId, notify]) {\n      const itemCard = findItemCardById(state.config, itemCardId, []);\n      if (itemCard && notify) {\n        if (!itemCard.data?.biddingList) {\n          itemCard.data.biddingList = [];\n        }\n        itemCard.data.biddingList.push(notify);\n        itemCard.endTime = notify.continued;\n      }\n    },\n    // Карточка товара\n    itemSetDataAndSelect(state, [itemCardId, data]) {\n      const itemCard = findItemCardById(state.config, itemCardId, []);\n      if (itemCard) {\n        itemCard.data = data;\n        state.selectedItem = itemCard;\n      }\n    },\n    itemOfferSetDataAndSelect(state, [offerItemCardId, data]) {\n      const itemCard = findItemCardById(state.config, offerItemCardId, [\"items\"]);\n      if (itemCard) {\n        itemCard.data = data;\n        state.selectedItem = itemCard;\n      }\n    },\n    // Список карточек товара\n    itemsCardDeleteFromAll(state, itemCardId) {\n      for (const key in state.config) {\n        const itemCardIdx = state.config[key].findIndex(itemCard => itemCard.id === itemCardId);\n        if (itemCardIdx !== -1) {\n          state.config[key] = state.config[key].filter(itemCard => itemCard.id !== itemCardId);\n        }\n      }\n      if (state.selectedItem?.id === itemCardId) {\n        state.selectedItem = null;\n      }\n    },\n    itemsCardDelete(state, itemCardId) {\n      for (const key in state.config) {\n        const itemCardIdx = state.config[key].findIndex(itemCard => itemCard.id === itemCardId);\n        if (itemCardIdx !== -1 && ![\"shoppingHistory\", \"stock\", \"myOffers\"].includes(key)) {\n          state.config[key] = state.config[key].filter(itemCard => itemCard.id !== itemCardId);\n          if (state.selectedItem?.id === itemCardId) {\n            state.selectedItem = null;\n            state.modalData = {\n              itemCard: null,\n              type: null\n            };\n          }\n          return;\n        }\n      }\n    },\n    itemsCardListAdd(state, [itemCard, section]) {\n      state.config[section].unshift(itemCard);\n    },\n    // Сбросы свойств на null\n    resetSearch(state) {\n      state.searchValue = null;\n      state.searchItems = [];\n    },\n    resetFilters(state) {\n      for (let key in state.filters) {\n        state.filters[key] = null;\n      }\n    },\n    resetSelectedItem(state) {\n      state.selectedItem = null;\n    },\n    // Биржа\n    exchangeOfferDelete(state, [itemCardId, offerId]) {\n      const itemCard = findItemCardById(state.config, itemCardId, [\"myOffers\"]);\n      if (itemCard?.data?.buyInfo) {\n        itemCard.data.buyInfo = itemCard.data.buyInfo.filter(offer => offer.id !== offerId);\n      }\n    },\n    exchangeOfferEdit(state, [itemCardId, offerId, count]) {\n      const itemCard = findItemCardById(state.config, itemCardId, [\"myOffers\"]);\n      const offerItemCard = findItemCardById(state.config, offerId, [\"items\"]);\n      if (itemCard?.data?.buyInfo) {\n        const offer = itemCard.data.buyInfo.find(offer => offer.id === offerId);\n        offer.count = count;\n      }\n      if (offerItemCard) {\n        offerItemCard.count = count;\n      }\n    },\n    exchangeOfferAdd(state, [itemCardId, offer]) {\n      const itemCard = state.config.items.find(itemCard => itemCard.id === itemCardId);\n      if (itemCard) {\n        if (itemCard.data?.buyInfo === undefined) {\n          itemCard.data.buyInfo = [];\n        }\n        itemCard.data.buyInfo.unshift(offer);\n      }\n    },\n    // Жизненный цикл МаркетПлейса\n    setData(state, data) {\n      recursiveAssing(data, state, true);\n    },\n    setSelectedItem(state, itemCardId) {\n      const itemCard = findItemCardById(state.config, itemCardId, [\"myOffers\", \"stock\"]);\n      if (itemCard) {\n        state.selectedItem = itemCard;\n      }\n    },\n    setStartPriceById(state, [itemCardId, startPrice]) {\n      const itemCard = state.config.items.find(itemCard => itemCard.id === itemCardId);\n      if (itemCard) {\n        itemCard.startPrice = startPrice;\n      }\n    },\n    openMarketPlace() {},\n    closeMarketPlace(state) {\n      state.selectedItem = null;\n      state.modalData = {\n        itemCard: null,\n        type: null\n      };\n    },\n    setSearchItems(state, [section, searchValue]) {\n      state.searchValue = searchValue;\n      const listData = state.config[section];\n      if (listData) {\n        if (searchValue) {\n          state.searchItems = listData.filter(item => item.name.toLowerCase().includes(searchValue.toLowerCase()));\n        } else {\n          state.searchItems = [];\n        }\n      }\n    },\n    // Модальные окна\n    openModal(state, [itemCard, type]) {\n      state.modalData = {\n        itemCard: itemCard,\n        type: type\n      };\n    },\n    closeModal(state) {\n      state.modalData = {\n        itemCard: null,\n        type: null\n      };\n    },\n    favoriteAdd(state, itemCardId) {\n      const itemCard = findItemCardById(state.config, itemCardId, [\"myOffers\"]);\n      if (itemCard?.favorites !== undefined) {\n        itemCard.favorites++;\n      }\n      state.favoritesId.push(itemCardId);\n    },\n    favoriteDelete(state, itemCardId) {\n      const itemCard = findItemCardById(state.config, itemCardId, [\"myOffers\"]);\n      if (itemCard?.favorites !== undefined) {\n        itemCard.favorites--;\n      }\n      state.favoritesId = state.favoritesId.filter(id => itemCardId !== id);\n    },\n    setFilter(state, [filter, value]) {\n      state.filters[filter] = value;\n    },\n    selectItem(state, item) {\n      if (Object.keys(item).length) {\n        state.selectedItem = item;\n        console.log(\"Выбран\");\n      } else {\n        console.log(\"Пустой\");\n      }\n    },\n    itemSetCount(state, [sellItemId, count]) {\n      const itemCard = findItemCardById(state.config, sellItemId, []);\n      if (itemCard) {\n        itemCard.count = count;\n      }\n    },\n    stockSetCount(state, [itemCardId, count]) {\n      const itemCard = state.config.stock.find(itemCard => itemCard.id === itemCardId);\n      if (itemCard) {\n        itemCard.count = count;\n      }\n    },\n    itemCardContinue(state, [itemCardId, newEndTime, continueTime]) {\n      const itemCar = findItemCardById(state.config, itemCardId, [\"myOffers\"]);\n      if (itemCar) {\n        itemCar.continueTime = continueTime;\n        itemCar.endTime = newEndTime;\n      }\n    },\n    setFavoritesById(state, [itemCardId, favorites]) {\n      const itemCard = findItemCardById(state.config, itemCardId, [\"myOffers\"]);\n      if (itemCard) {\n        itemCard.favorites = favorites;\n      }\n    },\n    setViewsById(state, [itemCardId, views]) {\n      const itemCard = findItemCardById(state.config, itemCardId, [\"myOffers\"]);\n      if (itemCard) {\n        itemCard.views = views;\n      }\n    },\n    rewriteItemCard(state, [itemCardId, itemCard]) {\n      const oldItemCard = findItemCardById(state.config, itemCardId, []);\n      if (oldItemCard) {\n        recursiveAssing(itemCard, oldItemCard, true);\n      }\n    },\n    complainListing(state, itemCardId) {\n      const itemCard = findItemCardById(state.config, itemCardId, []);\n      if (itemCard) {\n        itemCard.data.isComplained = !itemCard.data.isComplained;\n      }\n    },\n    moderationDelete(state, itemCardId) {\n      state.config.moderation = state.config.moderation.filter(itemCard => itemCardId !== itemCard.id);\n      if (state.selectedItem?.id === itemCardId) {\n        state.selectedItem = null;\n      }\n    },\n    listingBusinessSet(state, [itemCardId, bizData]) {\n      const itemCard = findItemCardById(state.config, itemCardId, []);\n      if (itemCard) {\n        itemCard.data.bizData = bizData;\n      }\n    },\n    setExchangeGraph(state, [itemCardId, statistic]) {\n      const itemCard = state.config.items.find(itemCard => itemCard.id === itemCardId);\n      if (itemCard) {\n        itemCard.data.statistic = statistic;\n      }\n    },\n    stockDelete(state, itemCardId) {\n      const filteredStock = state.config.stock.filter(itemCard => itemCard.id !== itemCardId);\n      const filteredCreateListing = state.config.createListing.filter(itemCard => itemCard.id !== itemCardId);\n      state.config.stock = filteredStock;\n      state.config.createListing = filteredCreateListing;\n    },\n    myOffersDelete(state, offerId) {\n      const filtered = state.config.myOffers.filter(itemCard => itemCard.offerID !== offerId);\n      state.config.myOffers = filtered;\n    }\n  },\n  getters: {\n    getIsTablet(state) {\n      return state.settings.isTablet;\n    },\n    getIsFocusExchangeOffers(state) {\n      return state.isFocusExchangeOffers;\n    },\n    getFiltersItems: state => section => {\n      let itemCards = state.config[section];\n      if (state.filters.category) {\n        itemCards = itemCards.filter(itemCard => itemCard.objectType === state.filters.category);\n      }\n      if (state.filters.sort) {\n        if ([\"increasing\", \"decreasing\"].includes(state.filters.sort)) {\n          itemCards = itemCards.slice(0).sort((a, b) => a.price - b.price);\n          if (state.filters.sort === \"decreasing\") {\n            itemCards.reverse();\n          }\n        } else if (state.filters.sort === \"popular\") {\n          itemCards = itemCards.slice(0).sort((a, b) => b.views - a.views);\n        } else if ([\"addDate\", \"lifeTime\"].includes(state.filters.sort)) {\n          if (state.filters.sort === \"addDate\") {\n            itemCards = itemCards.slice(0).sort((a, b) => new Date(a.createdTime) - new Date(b.createdTime));\n          } else if (state.filters.sort === \"lifeTime\") {\n            itemCards = itemCards.slice(0).sort((a, b) => new Date(a.endTime) - new Date(b.endTime)).reverse();\n          }\n        }\n      }\n      if (state.filters.transport) {\n        itemCards = itemCards.filter(itemCard => itemCard.vehicleType === state.filters.transport);\n      }\n      if (state.filters.dealership) {\n        itemCards = itemCards.filter(itemCard => itemCard.carRoom === state.filters.dealership);\n      }\n      if (state.filters.rent) {\n        itemCards = itemCards.filter(itemCard => itemCard.data.rentType === state.filters.rent);\n      }\n      if (![null, undefined].includes(state.filters.gender)) {\n        itemCards = itemCards.filter(itemCard => itemCard.gender === state.filters.gender);\n      }\n      if (state.filters.clothes) {\n        itemCards = itemCards.filter(itemCard => itemCard.clothesType === state.filters.clothes);\n      }\n      return itemCards;\n    },\n    getListingPricePerHour(state) {\n      return state.settings.listingPricePerHour;\n    },\n    getOfferMaxPostingPrice(state) {\n      return state.settings.listingMaxPostingPrice;\n    },\n    getListingMaxPostingPrice(state) {\n      return state.settings.listingMaxPostingPrice;\n    },\n    getExchangeOfferDeletePrice(state) {\n      return state.settings.exchangeOfferDeletePrice;\n    },\n    getListingMinPostingHours(state) {\n      return state.settings.listingMinPostingHours;\n    },\n    getListingMaxPostingHours(state) {\n      return state.settings.listingMaxPostingHours;\n    },\n    getModalData(state) {\n      return state.modalData;\n    },\n    getCardsList: state => section => {\n      return state.config[section] || [];\n    },\n    getSearchValue(state) {\n      return state.searchValue;\n    },\n    getSearchItems(state) {\n      return state.searchItems;\n    },\n    getSelectedItem(state) {\n      return state.selectedItem;\n    },\n    getCoefficients(state) {\n      return state.settings.coefficients;\n    },\n    getFavoritesIdList(state) {\n      return state.favoritesId;\n    },\n    getFavoritesItems(state) {\n      const exceptions = [\"myOffers\", \"shoppingHistory\", \"stock\"];\n      const favoritesItems = [];\n      for (const key in state.config) {\n        if (Array.isArray(state.config[key]) && !exceptions.includes(key)) {\n          for (const itemCard of state.config[key]) {\n            if (state.favoritesId.includes(itemCard.id)) {\n              favoritesItems.unshift(itemCard);\n            }\n          }\n        }\n      }\n      return favoritesItems;\n    },\n    getMyListings(state) {\n      return Object.keys(state.config).filter(key => key !== \"shoppingHistory\").flatMap(key => state.config[key]).filter(advert => state.myListingsId.includes(advert.id));\n    },\n    getMyOffersItems(state) {\n      const myOffersItems = [];\n      state.config.myOffers.forEach(offerLink => {\n        const exchangeItem = state.config.items.find(exchangeItem => exchangeItem.id === offerLink.exchangeID);\n        if (exchangeItem) {\n          const offer = exchangeItem.data.buyInfo.find(offer => offer.id === offerLink.offerID);\n          if (offer) {\n            const offerLinkItem = Object.assign({}, exchangeItem);\n            delete offerLinkItem.favorites;\n            delete offerLinkItem.startPrice;\n            offerLinkItem.id = offerLink.offerID;\n            offerLinkItem.count = offer.count;\n            offerLinkItem.price = offer.count * offer.priceOfCount;\n            if (offer?.state !== undefined) {\n              offerLinkItem.state = offer.state;\n            }\n            offerLinkItem.endtime = offer.endTime;\n            offerLinkItem.createdTime = offer.createdTime;\n            offerLinkItem.data = {};\n            myOffersItems.push(offerLinkItem);\n          }\n        }\n      });\n      return myOffersItems;\n    }\n  },\n  actions: {\n    setStore({\n      commit\n    }, data) {\n      commit(\"setData\", data);\n    },\n    setFavoritesById({\n      commit\n    }, [itemCardId, favorites]) {\n      commit(\"setFavoritesById\", [itemCardId, favorites]);\n    },\n    setStartPriceById({\n      commit\n    }, [itemCardId, startPrice]) {\n      commit(\"setStartPriceById\", [itemCardId, startPrice]);\n    },\n    setViewsById({\n      commit\n    }, [itemCardId, favorites]) {\n      commit(\"setViewsById\", [itemCardId, favorites]);\n    },\n    itemSetData({\n      commit\n    }, [itemCardId, data]) {\n      commit(\"itemSetDataAndSelect\", [itemCardId, data]);\n    },\n    pickItemCard({\n      commit\n    }, itemCardId) {\n      commit(\"setSelectedItem\", itemCardId);\n    },\n    itemOfferSetData({\n      commit\n    }, [offerItemCardId, data]) {\n      commit(\"itemOfferSetDataAndSelect\", [offerItemCardId, data]);\n    },\n    stockUnload({\n      commit\n    }, itemCardId) {\n      commit(\"stockDelete\", itemCardId);\n      commit(\"closeModal\");\n    },\n    // Аукцион\n    auctionAddBet({\n      commit\n    }, [itemCardId, bet]) {\n      commit(\"auctionAddBet\", [itemCardId, bet]);\n    },\n    auctionContinue({\n      commit\n    }, [itemCardId, notify]) {\n      commit(\"auctionContinue\", [itemCardId, notify]);\n    },\n    auctionAddLot({\n      commit\n    }, newItemCard) {\n      commit(\"itemsCardListAdd\", [newItemCard, \"auction\"]);\n    },\n    //Склад \n    ItemCardAdd({\n      commit\n    }, [itemCardId, itemCard]) {\n      commit(\"itemsCardListAdd\", [itemCard, itemCardId]);\n    },\n    // Обьявления\n    listingBuy({\n      commit\n    }, [itemCardId, itemCard]) {\n      commit(\"closeModal\");\n      commit(\"itemsCardDelete\", itemCardId);\n      commit(\"itemsCardListAdd\", [itemCard, \"stock\"]);\n      commit(\"itemsCardListAdd\", [itemCard, \"shoppingHistory\"]);\n      commit(\"resetSelectedItem\");\n      commit(\"favoriteDelete\", itemCardId);\n      commit(\"myListingsDelete\", itemCardId);\n    },\n    listingRent({\n      commit\n    }, [itemCardId]) {\n      commit(\"closeModal\");\n      commit(\"itemsCardDelete\", itemCardId);\n      commit(\"resetSelectedItem\");\n      commit(\"favoriteDelete\", itemCardId);\n    },\n    listingAddEmpty({\n      commit\n    }, itemCard) {\n      commit(\"itemsCardListAdd\", [itemCard, \"services\"]);\n      commit(\"myListingsAdd\", itemCard.id);\n      commit(\"closeModal\");\n      commit(\"resetSelectedItem\");\n    },\n    listingAddRent({\n      commit\n    }, [sellItemCardId, itemCard]) {\n      commit(\"myListingsAdd\", itemCard.id);\n      commit(\"itemsCardDelete\", sellItemCardId);\n      commit(\"itemsCardListAdd\", [itemCard, \"transportRent\"]);\n      commit(\"closeModal\");\n      commit(\"resetSelectedItem\");\n    },\n    listingAdd({\n      commit\n    }, [sellItemCardId, itemCard]) {\n      let section = \"\";\n      switch (itemCard.objectType) {\n        case \"car\":\n          section = \"transport\";\n          break;\n        case \"house\":\n        case \"apart\":\n          section = \"estate\";\n          break;\n        case \"business\":\n          section = \"business\";\n          break;\n        case \"atms\":\n          section = \"atms\";\n          break;\n        case \"billboards\":\n          section = \"billboards\";\n          break;\n        case \"item\":\n          section = \"items\";\n          break;\n        case \"clothes\":\n          section = \"clothes\";\n          break;\n      }\n      commit(\"myListingsAdd\", itemCard.id);\n      commit(\"itemsCardDelete\", sellItemCardId);\n      commit(\"itemsCardListAdd\", [itemCard, section]);\n      commit(\"closeModal\");\n      commit(\"resetSelectedItem\");\n    },\n    deleteListingLocal({\n      commit\n    }, itemCardId) {\n      commit(\"itemsCardDelete\", itemCardId);\n      commit(\"favoriteDelete\", itemCardId);\n      commit(\"myListingsDelete\", itemCardId);\n      commit(\"closeModal\");\n    },\n    deleteListing({\n      commit\n    }, itemCardId) {\n      commit(\"itemsCardDelete\", itemCardId);\n      commit(\"favoriteDelete\", itemCardId);\n    },\n    // Биржа\n    exchangeDelete({\n      commit\n    }, [itemCardId, offerId]) {\n      commit(\"exchangeOfferDelete\", [itemCardId, offerId]);\n    },\n    exchangeDeleteLocal({\n      commit\n    }, [itemCardId, offerId]) {\n      commit(\"exchangeOfferDelete\", [itemCardId, offerId]);\n      commit(\"myOffersDelete\", offerId);\n      commit(\"myListingsDelete\", offerId);\n    },\n    exchangeBuy({\n      commit\n    }, itemCard) {\n      commit(\"itemsCardListAdd\", [itemCard, \"stock\"]);\n      commit(\"itemsCardListAdd\", [itemCard, \"shoppingHistory\"]);\n      commit(\"closeModal\");\n    },\n    exchangeAdd({\n      commit\n    }, [itemCardId, offer]) {\n      commit(\"exchangeOfferAdd\", [itemCardId, offer]);\n    },\n    exchangeAddLocal({\n      commit\n    }, [itemCardId, offer, offerLink]) {\n      commit(\"exchangeOfferAdd\", [itemCardId, offer]);\n      commit(\"itemsCardListAdd\", [offerLink, \"myOffers\"]);\n      commit(\"closeModal\");\n    },\n    myOffersDelete({\n      commit\n    }, itemCardId) {\n      commit(\"myOffersDelete\", itemCardId);\n    },\n    exchangeEdit({\n      commit\n    }, [itemCardId, offerId, count]) {\n      commit(\"exchangeOfferEdit\", [itemCardId, offerId, count]);\n    },\n    itemSetCount({\n      commit\n    }, [sellItemId, count]) {\n      commit(\"itemSetCount\", [sellItemId, count]);\n    },\n    stockSetCount({\n      commit\n    }, [itemCardId, count]) {\n      commit(\"stockSetCount\", [itemCardId, count]);\n      commit(\"closeModal\");\n    },\n    itemsCardDelete({\n      commit\n    }, itemCardId) {\n      commit(\"itemsCardDelete\", itemCardId);\n    },\n    itemsCardDeleteFromAll({\n      commit\n    }, itemCardId) {\n      commit(\"itemsCardDeleteFromAll\", itemCardId);\n    },\n    continueListing({\n      commit\n    }, [itemCardId, newEndTime, continueTime]) {\n      commit(\"itemCardContinue\", [itemCardId, newEndTime, continueTime]);\n      commit(\"closeModal\");\n      commit(\"resetSelectedItem\");\n    },\n    rewriteItemCard({\n      commit\n    }, [itemCardId, itemCard]) {\n      commit(\"rewriteItemCard\", [itemCardId, itemCard]);\n    },\n    moderationAdd({\n      commit\n    }, itemCard) {\n      commit(\"itemsCardListAdd\", [itemCard, \"moderation\"]);\n    },\n    moderationDelete({\n      commit\n    }, itemCardId) {\n      commit(\"moderationDelete\", itemCardId);\n    },\n    listingBusinessSet({\n      commit\n    }, [itemCardId, bizData]) {\n      commit(\"listingBusinessSet\", [itemCardId, bizData]);\n    },\n    setExchangeGraph({\n      commit\n    }, [itemCardId, statistic]) {\n      commit(\"setExchangeGraph\", [itemCardId, statistic]);\n    },\n    uploadExtraImgs({\n      commit\n    }, data) {\n      commit(\"uploadExtraImgs\", data);\n    },\n    uploadPlayerScreenToCdn({\n      commit\n    }, data) {\n      commit(\"uploadPlayerScreenToCdn\", data); //UploadImageToCDN(`marketplace/houses/1`)\n    },\n    resetExtraImgs({\n      commit\n    }) {\n      commit(\"resetExtraImgs\");\n    },\n    setIsTablet({\n      commit\n    }, value) {\n      commit(\"setIsTablet\", value);\n    },\n    stockAdd({\n      commit\n    }, itemCard) {\n      commit(\"itemsCardListAdd\", [itemCard, \"stock\"]);\n      commit(\"closeModal\");\n    }\n  }\n};\nexport default marketPlace;","map":null,"metadata":{},"sourceType":"module"}