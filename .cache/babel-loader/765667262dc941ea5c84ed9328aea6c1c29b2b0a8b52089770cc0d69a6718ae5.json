{"ast":null,"code":"import CdnResolverImage from \"../../../../Components/CdnResolverImage.vue\";\nexport default {\n  components: {\n    CdnResolverImage\n  },\n  data() {\n    return {\n      active: false,\n      fish: [],\n      items: [],\n      out: [],\n      title: \"\",\n      subtitle: \"\",\n      sum: 0,\n      inputHandler: null\n    };\n  },\n  directives: {\n    filter: {\n      inserted: function (el, binding, vnode) {\n        el.inputHandler = null;\n      },\n      beforeMount(el, binding) {\n        el.inputHandler = function (e) {\n          let ch = String.fromCharCode(e.which);\n          let re = new RegExp(binding.value);\n          let value = parseInt(e.target.value + e.key);\n          if (!ch.match(re)) {\n            e.preventDefault();\n          }\n          for (let i = 0; i < binding.instance.out.length; i++) {\n            if (binding.instance.out[i].id === +e.currentTarget.parentNode.parentNode.parentNode.parentNode.dataset.id) {\n              if (value === 0 || value > binding.instance.out[i].count) {\n                e.preventDefault();\n              }\n            }\n          }\n        };\n        el.addEventListener(\"keypress\", el.inputHandler);\n      },\n      unmounted(el) {\n        el.removeEventListener(\"keypress\", el.inputHandler);\n      }\n    }\n  },\n  methods: {\n    setData(fish, renderfish, title, subtitle) {\n      this.fish = fish;\n      this.title = title;\n      this.subtitle = subtitle;\n      this.render(renderfish);\n      this.active = true;\n    },\n    render(data) {\n      this.items = data;\n      this.out = JSON.parse(JSON.stringify(this.fish));\n      this.sum = 0;\n      for (let i = 0; i < this.items.length; i++) {\n        if (this.out.find(item => item.id === this.items[i].id)) {\n          for (let f = 0; f < this.out.length; f++) {\n            if (this.out[f].id === this.items[i].id) {\n              this.out[f].count = this.items[i].count;\n              this.out[f].counter = 1;\n              this.sum = this.sum + this.out[f].price * this.items[i].count; // ðŸ¤”\n              this.out[f].priceNew = this.out[f].counter * this.out[f].price;\n            }\n          }\n        }\n      }\n    },\n    counterDecrement(e) {\n      for (let i = 0; i < this.out.length; i++) {\n        if (this.out[i].id === +e.currentTarget.parentNode.parentNode.parentNode.dataset.id) {\n          if (this.out[i].counter > 1) {\n            this.out[i].counter--;\n            this.out[i].priceNew = this.out[i].counter * this.out[i].price;\n          }\n        }\n      }\n    },\n    counterIncrement(e) {\n      for (let i = 0; i < this.out.length; i++) {\n        if (this.out[i].id === +e.currentTarget.parentNode.parentNode.parentNode.dataset.id) {\n          if (this.out[i].counter !== this.out[i].count) {\n            this.out[i].counter++;\n            this.out[i].priceNew = this.out[i].counter * this.out[i].price;\n          }\n        }\n      }\n    },\n    inputCountValidation(e) {\n      for (let i = 0; i < this.out.length; i++) {\n        if (this.out[i].id === +e.currentTarget.parentNode.parentNode.parentNode.parentNode.dataset.id) {\n          this.out[i].priceNew = this.out[i].counter * this.out[i].price;\n        }\n      }\n    },\n    resetCounter(e) {\n      if (!e.target.value) {\n        for (let i = 0; i < this.out.length; i++) {\n          if (this.out[i].id === +e.currentTarget.parentNode.parentNode.parentNode.parentNode.dataset.id) {\n            this.out[i].counter = 1;\n            this.out[i].priceNew = this.out[i].counter * this.out[i].price;\n          }\n        }\n      }\n    },\n    sell(e) {\n      try {\n        this.$callClient('SellFishMenu:Sell', +this.out[e.currentTarget.parentNode.parentNode.dataset.index].counter, e.currentTarget.parentNode.parentNode.dataset.index);\n      } catch (e) {\n        console.error(`Failed to sell all fish: ${e}`);\n      }\n    },\n    sellAll() {\n      try {\n        this.$callClient('SellFishMenu:SellAll');\n      } catch (e) {\n        console.error(`Failed to sell all fish: ${e}`);\n      }\n    },\n    AppClose() {\n      this.$callClient('SellFishMenu:Close');\n    },\n    onKeyUp(e) {\n      if (e.keyCode === 27 && !window.isModalShow) {\n        // Escape\n        this.AppClose();\n      }\n    }\n  },\n  mounted() {\n    window.addEventListener(\"keyup\", this.onKeyUp);\n    this.$onClient(\"W:Fishing:SellMenu:SetData\", this.setData);\n    this.$callClient('C:Fishing:SellMenu:BrowserReady');\n  },\n  beforeUnmount() {\n    window.removeEventListener(\"keyup\", this.onKeyUp);\n    this.$offClient(\"W:Fishing:SellMenu:SetData\", this.setData);\n  },\n  watch: {\n    active: function (data) {\n      if (!data) {\n        // Reset to default\n        this.items = [];\n        this.out = [];\n        this.sum = 0;\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}