{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      startGameTime: 1,\n      isRecordMode: false,\n      isInputMode: false,\n      shuffleButtosnList: null,\n      visibleButtonsList: null,\n      isTrueAnswer: null,\n      enteredData: [],\n      countOfStep: 3,\n      textButtonType: 2,\n      timeToGame: 10000,\n      buttonsLists: {\n        1: [{\n          id: 1,\n          text: 1\n        }, {\n          id: 2,\n          text: 2\n        }, {\n          id: 3,\n          text: 3\n        }, {\n          id: 4,\n          text: 4\n        }, {\n          id: 5,\n          text: 5\n        }, {\n          id: 6,\n          text: 6\n        }, {\n          id: 7,\n          text: 7\n        }, {\n          id: 8,\n          text: 8\n        }, {\n          id: 9,\n          text: 9\n        }, {\n          id: 0,\n          text: 0\n        }],\n        2: [{\n          id: 1,\n          text: \"I\"\n        }, {\n          id: 2,\n          text: \"II\"\n        }, {\n          id: 3,\n          text: \"III\"\n        }, {\n          id: 4,\n          text: \"IV\"\n        }, {\n          id: 5,\n          text: \"V\"\n        }, {\n          id: 6,\n          text: \"VI\"\n        }, {\n          id: 7,\n          text: \"VII\"\n        }, {\n          id: 8,\n          text: \"VIII\"\n        }, {\n          id: 9,\n          text: \"IX\"\n        }, {\n          id: 0,\n          text: \"X\"\n        }],\n        3: [{\n          id: 1,\n          text: \"❤\"\n        }, {\n          id: 2,\n          text: \"♫\"\n        }, {\n          id: 3,\n          text: \"☎\"\n        }, {\n          id: 4,\n          text: \"☁\"\n        }, {\n          id: 5,\n          text: \"❆\"\n        }, {\n          id: 6,\n          text: \"★\"\n        }, {\n          id: 7,\n          text: \"☀\"\n        }, {\n          id: 8,\n          text: \"✂\"\n        }, {\n          id: 9,\n          text: \"✎\"\n        }, {\n          id: 0,\n          text: \"✘\"\n        }]\n      },\n      step: 0,\n      codeList: []\n    };\n  },\n  methods: {\n    onFinishGame() {\n      this.$callClient(\"C:HackCombinationLock:Win\");\n    },\n    setTimerOnGame() {\n      const style = {\n        width: 0\n      };\n      const innerTimer = document.getElementById(\"game-timer-inner\");\n      innerTimer.style.width = style.width;\n    },\n    getShuffleArray(arr) {\n      const shuffledArr = arr.slice();\n      for (let i = shuffledArr.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [shuffledArr[i], shuffledArr[j]] = [shuffledArr[j], shuffledArr[i]];\n      }\n      return shuffledArr;\n    },\n    chekNumber() {\n      this.isTrueAnswer = this.codeList[this.step].every((val, index) => val === this.enteredData[index]);\n    },\n    enterNumber(id) {\n      this.enteredData.push(id);\n      if (this.enteredData.length >= 4) {\n        this.chekNumber();\n        this.isInputMode = false;\n      }\n    },\n    formatTime(seconds) {\n      let minutes = Math.floor(seconds / 60);\n      seconds = Math.floor(seconds % 60);\n      minutes = minutes < 10 ? \"0\" + minutes : minutes;\n      seconds = seconds < 10 ? \"0\" + seconds : seconds;\n      return minutes + \":\" + seconds;\n    },\n    setTimer() {\n      this.startGameTime = 5;\n      const timer = setInterval(() => {\n        this.startGameTime--;\n        if (!this.startGameTime) {\n          clearInterval(timer);\n          this.showCode();\n        }\n      }, 1000);\n    },\n    showResults() {\n      const buttons = document.querySelectorAll(\".HackCombinLockMiniGame__dial-button\");\n      const keyframes = {\n        succses: [{\n          background: \"#0C1212\",\n          boxShadow: `2px solid #151D1E;`\n        }, {\n          background: \"#40BF6A\",\n          boxShadow: `0px 5px 10px rgba(43, 217, 217, 0.1)`\n        }, {\n          background: \"#0C1212\",\n          boxShadow: `2px solid #151D1E;`,\n          transform: \"scale(1)\"\n        }],\n        fail: [{\n          background: \"#0C1212\",\n          boxShadow: `2px solid #151D1E;`\n        }, {\n          background: \"#E32636\",\n          boxShadow: `0px 5px 10px rgba(43, 217, 217, 0.1)`\n        }, {\n          background: \"#0C1212\",\n          boxShadow: `2px solid #151D1E;`,\n          transform: \"scale(1)\"\n        }]\n      };\n      buttons.forEach(button => button.animate(this.isTrueAnswer ? keyframes.succses : keyframes.fail, 500));\n    },\n    playAnimation(elem) {\n      const keyframes = [{\n        background: \"#0C1212\",\n        boxShadow: `2px solid #151D1E;`\n      }, {\n        background: \"#2BD9D9\",\n        boxShadow: `0px 5px 10px rgba(43, 217, 217, 0.1)`,\n        transform: \"scale(0.9)\"\n      }, {\n        background: \"#0C1212\",\n        boxShadow: `2px solid #151D1E;`,\n        transform: \"scale(1)\"\n      }];\n      elem.animate(keyframes, 500);\n    },\n    setRandomCodeList() {\n      const codeList = [];\n      const codeLength = 4;\n      for (let i = 0; i < this.countOfStep; i++) {\n        let code = [];\n        for (let j = 0; j < codeLength; j++) {\n          const randomNumb = Math.round(Math.random() * 9);\n          code.push(randomNumb);\n        }\n        codeList.push(code);\n      }\n      this.codeList = codeList;\n    },\n    close() {\n      clearTimeout(this.timeout);\n      this.$callClient(\"C:HackCombinationLock:close\");\n    },\n    onKeyUp(e) {\n      if (e.key === \"Escape\") {\n        this.close();\n      }\n    },\n    showCode() {\n      let index = 0;\n      this.isRecordMode = true;\n      this.textButtonType = Math.round(Math.random() * 2) + 1;\n      this.visibleButtonsList = this.getShuffleArray(this.buttonsLists[this.textButtonType]);\n      const showCodeInterval = setInterval(() => {\n        const button = document.getElementById(this.codeList[this.step][index]);\n        this.playAnimation(button);\n        index++;\n        if (index > this.codeList[this.step].length - 1) {\n          clearInterval(showCodeInterval);\n          setTimeout(() => {\n            this.isRecordMode = false;\n            this.visibleButtonsList = this.buttonsLists[this.textButtonType];\n            this.setTimerOnGame();\n            this.timeout = setTimeout(() => this.$callClient(\"C:HackCombinationLock:Fail\"), this.timeToGame);\n          }, 700);\n        }\n      }, 500);\n    }\n  },\n  watch: {\n    isTrueAnswer(val) {\n      if (val === null) {\n        return;\n      }\n      this.showResults();\n      this.step++;\n      if (!val) {\n        clearTimeout(this.timeout);\n        this.$callClient(\"C:HackCombinationLock:Fail\");\n        return;\n      }\n      if (this.step >= this.countOfStep) {\n        clearTimeout(this.timeout);\n        this.$callClient(\"C:HackCombinationLock:Win\");\n        return;\n      } else {\n        clearTimeout(this.timeout);\n        const innerTimer = document.getElementById(\"game-timer-inner\");\n        setTimeout(() => innerTimer.style.width = \"25.6rem\", 1000);\n        this.enteredData = [];\n        this.isTrueAnswer = null;\n        setTimeout(() => {\n          this.setTimer();\n        }, 1000);\n      }\n    }\n  },\n  mounted() {\n    this.setRandomCodeList();\n    this.setTimer();\n    window.addEventListener(\"keyup\", this.onKeyUp);\n  },\n  beforeUnmount() {\n    window.removeEventListener(\"keyup\", this.onKeyUp);\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}