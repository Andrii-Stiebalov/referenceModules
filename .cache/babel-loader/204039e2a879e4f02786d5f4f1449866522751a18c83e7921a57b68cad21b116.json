{"ast":null,"code":"import ContractsInfoBlank from \"./ContractsInfoBlank.vue\";\nexport default {\n  data() {\n    return {\n      countOfPages: 1,\n      activePage: 1,\n      visibleBalance: 0,\n      typeOfSort: \"\",\n      typesOfSort: [\"по номеру\", \"по названию\"]\n    };\n  },\n  components: {\n    ContractsInfoBlank\n  },\n  watch: {\n    contractsData() {\n      this.setPagination();\n    }\n  },\n  computed: {\n    paginatedContracts() {\n      if (!this.contractsData) {\n        return [];\n      }\n      const startContracts = (this.activePage - 1) * 13;\n      const endContracts = startContracts + 13 > this.sortedContracts.length ? this.sortedContracts.length : startContracts + 13;\n      const contracts = [...this.sortedContracts];\n      return contracts.slice(startContracts, endContracts);\n    },\n    splitBalance() {\n      return this.visibleBalance.toString().replace(\".\", \",\").split(\"\");\n    },\n    sortedContracts() {\n      let sortedArray = [];\n      if (!this.contractsData) {\n        return [];\n      }\n      switch (this.typeOfSort) {\n        case \"по номеру\":\n          sortedArray = this.contractsData.slice().sort((a, b) => +a.id - +b.id);\n          break;\n        case \"по названию\":\n          sortedArray = this.contractsData.slice().sort((a, b) => {\n            const aName = a.customer === this.ownerName ? a.executor : a.customer;\n            const bName = b.customer === this.ownerName ? b.executor : b.customer;\n            return aName.localeCompare(bName);\n          });\n          break;\n        default:\n          sortedArray = this.contractsData;\n      }\n      return sortedArray;\n    }\n  },\n  props: {\n    typeShowContractsInfo: String,\n    contractsData: Array,\n    ownerName: String,\n    selectedContract: Boolean,\n    setSelectedContract: Function,\n    setTypeContractsInfo: Function,\n    currentBalance: Number,\n    dayTax: Number\n  },\n  methods: {\n    getData(data) {\n      return data.day + \" \" + data.month;\n    },\n    onChangeSortType() {\n      const index = this.typesOfSort.indexOf(this.typeOfSort);\n      this.typeOfSort = index + 1 < this.typesOfSort.length ? this.typesOfSort[index + 1] : this.typesOfSort[0];\n    },\n    formatMoney(amount) {\n      return amount.toLocaleString(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n        minimumFractionDigits: 0\n      }).replace(\"$\", \"\");\n    },\n    getTypeText(position) {\n      const types = {\n        active: {\n          onSricker: \"активных контрактов\",\n          onMark: \"Активные контракты\"\n        },\n        incoming: {\n          onSricker: \"входящих контрактов\",\n          onMark: \"Входящие контракты\"\n        },\n        outgoing: {\n          onSricker: \"Исходящих контрактов\",\n          onMark: \"Исходящие контракты\"\n        }\n      };\n      return types[this.typeShowContractsInfo][position];\n    },\n    setActiveContractsTab(tabId) {\n      this.activeContractsTab = tabId;\n    },\n    setPagination() {\n      const maxContracts = 13;\n      if (this.sortedContracts.length > maxContracts) {\n        this.countOfPages = Math.ceil(this.sortedContracts.length / 13);\n      }\n    },\n    increaseVisibleBalance() {\n      const step = Math.ceil(this.currentBalance / (1000 / 10));\n      if (this.visibleBalance < this.currentBalance) {\n        this.visibleBalance += step;\n        setTimeout(this.increaseVisibleBalance, 10);\n        return;\n      }\n      this.visibleBalance = this.currentBalance;\n    },\n    movePagination(paginationData) {\n      if (typeof paginationData === \"number\") {\n        this.activePage = paginationData;\n        return;\n      }\n      if (this.activePage === this.countOfPages && paginationData === \"+\") {\n        this.activePage = 1;\n        return;\n      }\n      if (this.activePage === 1 && paginationData === \"-\") {\n        this.activePage = this.countOfPages;\n        return;\n      }\n      paginationData === \"+\" ? this.activePage++ : this.activePage--;\n    }\n  },\n  mounted() {\n    this.setPagination();\n    this.typeOfSort = this.typesOfSort[0];\n    setTimeout(() => this.increaseVisibleBalance(), 300);\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}