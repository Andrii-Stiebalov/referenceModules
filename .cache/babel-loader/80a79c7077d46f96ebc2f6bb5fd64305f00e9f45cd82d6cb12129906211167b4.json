{"ast":null,"code":"import { mapGetters } from \"vuex\";\nimport Blank from \"./Blank.vue\";\nimport Tilt from \"vanilla-tilt-vue\";\nimport { setParticles } from \"../Assets/particles.js\";\nexport default {\n  data() {\n    return {\n      blankData: {\n        state: \"Лос Сантос\",\n        data: {\n          day: 23,\n          month: \"Март\"\n        },\n        customer: \"\",\n        executor: \"\",\n        selectedProduct: \"\",\n        count: \"\",\n        deadLineData: {\n          day: \"\",\n          month: \"\",\n          year: \"\",\n          hours: \"\",\n          minutes: \"\"\n        },\n        sum: \"\",\n        deadDay: \"\",\n        freezeBones: \"\",\n        signatureCustomer: \"\",\n        signatureExecutor: \"\"\n      },\n      onlyNumbFields: [\"sum\", \"deadDay\", \"deadLineData\", \"count\", \"freezeBones\"],\n      newContract: null,\n      isNoValidValueList: [],\n      filteredOptions: [],\n      placeholderText: \"\"\n    };\n  },\n  methods: {\n    setNewContract(contract) {\n      this.newContract = contract;\n    },\n    setGovContract(itemConfig) {\n      this.blankData = Object.assign(this.blankData, itemConfig);\n    },\n    onCreateNewContract() {\n      if (this.newContract.count && this.newContract.selectedProduct && this.newContract.signatureExecutor && /^[A-Za-z]+$/.test(this.newContract.signatureExecutor)) {\n        const config = this.govContract.itemConfig.find(item => item.name === this.newContract.selectedProduct);\n        const data = {\n          itemType: config.itemType,\n          count: this.newContract.count,\n          signature: this.newContract.signatureExecutor\n        };\n        this.$callClient(\"C:Office.Contract.Create\", data);\n        setTimeout(() => this.setisActiveNewContract(false), 200);\n      }\n    },\n    checkFields(obj) {\n      const allowedEmptyFields = [\"signatureExecutor\"];\n      for (let key in obj) {\n        if (typeof obj[key] === \"object\") {\n          if (!this.checkFields(obj[key])) {\n            return false;\n          }\n        } else if (!allowedEmptyFields.includes(key) && (obj[key] === null || obj[key] === undefined || obj[key] === \"\")) {\n          return false;\n        }\n      }\n      return true;\n    }\n  },\n  computed: {\n    ...mapGetters([\"isAnimated\"])\n  },\n  props: {\n    setisActiveNewContract: Function,\n    newContractMenuData: Object,\n    govContract: Object\n  },\n  components: {\n    Tilt,\n    Blank\n  },\n  created() {\n    this.setGovContract();\n  },\n  mounted() {\n    setParticles();\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}