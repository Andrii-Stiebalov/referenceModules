{"ast":null,"code":"\"use strict\";\n\n// (a, y, c, l, h) = (array, y[, cmp, lo, hi])\nfunction ge(a, y, c, l, h) {\n  var i = h + 1;\n  while (l <= h) {\n    var m = l + h >>> 1,\n      x = a[m];\n    var p = c !== undefined ? c(x, y) : x - y;\n    if (p >= 0) {\n      i = m;\n      h = m - 1;\n    } else {\n      l = m + 1;\n    }\n  }\n  return i;\n}\n;\nfunction gt(a, y, c, l, h) {\n  var i = h + 1;\n  while (l <= h) {\n    var m = l + h >>> 1,\n      x = a[m];\n    var p = c !== undefined ? c(x, y) : x - y;\n    if (p > 0) {\n      i = m;\n      h = m - 1;\n    } else {\n      l = m + 1;\n    }\n  }\n  return i;\n}\n;\nfunction lt(a, y, c, l, h) {\n  var i = l - 1;\n  while (l <= h) {\n    var m = l + h >>> 1,\n      x = a[m];\n    var p = c !== undefined ? c(x, y) : x - y;\n    if (p < 0) {\n      i = m;\n      l = m + 1;\n    } else {\n      h = m - 1;\n    }\n  }\n  return i;\n}\n;\nfunction le(a, y, c, l, h) {\n  var i = l - 1;\n  while (l <= h) {\n    var m = l + h >>> 1,\n      x = a[m];\n    var p = c !== undefined ? c(x, y) : x - y;\n    if (p <= 0) {\n      i = m;\n      l = m + 1;\n    } else {\n      h = m - 1;\n    }\n  }\n  return i;\n}\n;\nfunction eq(a, y, c, l, h) {\n  while (l <= h) {\n    var m = l + h >>> 1,\n      x = a[m];\n    var p = c !== undefined ? c(x, y) : x - y;\n    if (p === 0) {\n      return m;\n    }\n    if (p <= 0) {\n      l = m + 1;\n    } else {\n      h = m - 1;\n    }\n  }\n  return -1;\n}\n;\nfunction norm(a, y, c, l, h, f) {\n  if (typeof c === 'function') {\n    return f(a, y, c, l === undefined ? 0 : l | 0, h === undefined ? a.length - 1 : h | 0);\n  }\n  return f(a, y, undefined, c === undefined ? 0 : c | 0, l === undefined ? a.length - 1 : l | 0);\n}\nmodule.exports = {\n  ge: function (a, y, c, l, h) {\n    return norm(a, y, c, l, h, ge);\n  },\n  gt: function (a, y, c, l, h) {\n    return norm(a, y, c, l, h, gt);\n  },\n  lt: function (a, y, c, l, h) {\n    return norm(a, y, c, l, h, lt);\n  },\n  le: function (a, y, c, l, h) {\n    return norm(a, y, c, l, h, le);\n  },\n  eq: function (a, y, c, l, h) {\n    return norm(a, y, c, l, h, eq);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}