{"ast":null,"code":"import { createEventEmitter } from \"../Objects/EventEmitter.js\";\nimport MPEnvironment from \"./MPEnvironment.js\";\nfunction checkEnviroment(isEnvironmentDebug = false) {\n  return new Promise((resolve, reject) => {\n    // resolve();\n    switch (process.env.NODE_ENV) {\n      case \"development\":\n        resolve();\n        break;\n      case \"production\":\n        window.mp = MPEnvironment;\n        import(\"../../Backend/Startup.js\").then(() => {\n          resolve();\n        }).catch(exception => {\n          reject(exception);\n        });\n        break;\n    }\n    // const isProduction = process.env.NODE_ENV === \"production\";\n    // if (!isProduction || isEnvironmentDebug) {\n    //   window.mp = MPEnvironment;\n    //   import(\"../../Backend/Startup.js\")\n    //     .then(() => {\n    //       resolve();\n    //     })\n    //     .catch((exception) => {\n    //       reject(exception);\n    //     });\n    // } else if (isProduction && window.mp) {\n    //   resolve();\n    // } else if (!isEnvironmentDebug) {\n    //   reject(new Error(\"No environment found\"));\n    // } else {\n    //   resolve();\n    // }\n  });\n}\nfunction createEnviroment(isDebug = false, isEnvironmentDebug = false) {\n  return new Promise((resolve, reject) => {\n    checkEnviroment(isEnvironmentDebug).then(() => {\n      const Environment = {\n        ...createEventEmitter(false),\n        call(eventName, ...args) {\n          this._call(eventName, ...args);\n          if (isDebug) {\n            console.log(`Event \"${eventName}\" has been succesfully triggered`, ...args);\n          }\n        }\n      };\n      function callLocal(eventName, ...args) {\n        if (isDebug) console.log(`%ccallLocal: \"${eventName}\"`, \"color: #0000FF\", ...args);\n        Environment.call(eventName, ...args);\n      }\n      function pluginEmit(eventName, ...args) {\n        const wrappedArgs = args.map(arg => typeof arg === \"object\" ? JSON.stringify(arg) : arg);\n        if (isDebug) console.log(`%ccallClient: \"${eventName}\"`, \"color: #FF3333\", ...wrappedArgs);\n        window.mp.trigger(eventName, ...wrappedArgs);\n      }\n      function pluginError(error) {\n        if (isDebug) console.log(`callError: `, error);\n        window.mp.trigger(\"Global:Client:SendError\", error);\n      }\n      function pluginOn(eventName, callback) {\n        if (isDebug) console.log(`%cEvent \"${eventName}\" has been succesfully added`, \"color: #00FF00\");\n        Environment._use(true, eventName, callback);\n      }\n      function pluginOff(eventName, callback) {\n        if (isDebug) console.log(`%cEvent \"${eventName}\" has been succesfully removed`, \"color: #FF0000\");\n        Environment._use(false, eventName, callback);\n      }\n      window.onerror = (event, source, lineno, colno, error) => {\n        let {\n          message,\n          cause,\n          name,\n          stack\n        } = error;\n        let textMessage = {\n          message,\n          cause,\n          name,\n          stack\n        };\n        pluginError(JSON.stringify({\n          event,\n          source,\n          lineno,\n          colno,\n          textMessage\n        }));\n      };\n      const EnvironmentPlugin = {\n        install: app => {\n          app.config.globalProperties.$Environment = Environment;\n          app.config.globalProperties.$onClient = pluginOn;\n          app.config.globalProperties.$offClient = pluginOff;\n          app.config.globalProperties.$callClient = pluginEmit;\n          app.config.globalProperties.$callException = pluginError;\n          app.config.globalProperties.$callLocal = callLocal;\n        }\n      };\n      resolve({\n        Environment,\n        EnvironmentPlugin,\n        pluginError\n      });\n    }).catch(exception => {\n      reject(exception);\n    });\n  });\n}\nexport default createEnviroment;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}