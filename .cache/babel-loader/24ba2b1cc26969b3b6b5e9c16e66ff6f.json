{"ast":null,"code":"import Layout from \"./Components/Layout.vue\";\nexport default {\n  components: {\n    Layout\n  },\n  data() {\n    return {\n      announcements: [],\n      settings: {\n        queueSize: 5,\n        announcement: {\n          id: 0,\n          type: \"error\",\n          layout: \"topRight\",\n          template: \"main\",\n          theme: \"main\",\n          isTransitioned: true,\n          transition: \"mainAnnouncementTransition\",\n          text: \"\",\n          closeWith: [\"click\"],\n          timeout: false,\n          progressBar: true,\n          callbacks: {\n            beforeShow: false,\n            onShow: false,\n            onClose: false,\n            afterClose: false,\n            onHover: false,\n            onClick: false\n          }\n        }\n      }\n    };\n  },\n  computed: {\n    isActive() {\n      return this.announcements.length;\n    },\n    getActiveAnnouncements() {\n      return this.announcements.slice(0, this.settings.queueSize);\n    },\n    getLayouts() {\n      return this.getActiveAnnouncements.map(announcement => announcement.layout).reduce((acc, layout) => {\n        if (!acc.includes(layout)) acc.push(layout);\n        return acc;\n      }, []);\n    }\n  },\n  methods: {\n    getLayoutAnnouncements(layout) {\n      return this.getActiveAnnouncements.filter(announcement => announcement.layout === layout);\n    },\n    addAnnouncement(payload) {\n      if (typeof payload == \"object\") {\n        if (payload.id == undefined) {\n          const IDList = this.announcements.map(announcement => announcement.id);\n          let freeID = 0;\n          while (IDList.includes(freeID)) freeID++;\n          payload.id = freeID;\n        }\n        payload = Object.assign({}, this.settings.announcement, payload);\n        this.announcements.push(payload);\n      }\n    },\n    deleteAnnouncement(payload) {\n      if (typeof payload === \"object\") payload = payload.id;\n      let announcementIndex = this.announcements.findIndex(announcement => announcement.id === payload);\n      if (announcementIndex !== -1) this.announcements.splice(announcementIndex, 1);\n    }\n  },\n  created() {\n    this.$onClient(\"W:Announcements:Create\", this.addAnnouncement);\n    this.$onClient(\"W:Announcements:Remove\", this.deleteAnnouncement);\n    this.$callClient(\"C:Announcements:Ready\");\n  },\n  beforeUnmount() {\n    this.$offClient(\"W:Announcements:Create\", this.addAnnouncement);\n    this.$offClient(\"W:Announcements:Remove\", this.deleteAnnouncement);\n    this.$callClient(\"C:Announcements:Destroyed\");\n  }\n};","map":null,"metadata":{},"sourceType":"module"}