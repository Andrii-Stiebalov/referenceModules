{"ast":null,"code":"import $ from \"jquery\";\nexport default {\n  data: function () {\n    return {\n      active: true,\n      locale: \"ua\",\n      timeTotal: 10,\n      timeLeft: 0,\n      itemsTotal: 5,\n      itemsLeft: 0,\n      allItems: [{\n        id: \"0\",\n        img: \"glass1\",\n        class: \"0\"\n      }, {\n        id: \"1\",\n        img: \"glass2\",\n        class: \"0\"\n      }, {\n        id: \"2\",\n        img: \"organic1\",\n        class: \"1\"\n      }, {\n        id: \"3\",\n        img: \"organic2\",\n        class: \"1\"\n      }, {\n        id: \"4\",\n        img: \"plastic1\",\n        class: \"2\"\n      }, {\n        id: \"5\",\n        img: \"plastic2\",\n        class: \"2\"\n      }, {\n        id: \"6\",\n        img: \"paper1\",\n        class: \"3\"\n      }, {\n        id: \"7\",\n        img: \"paper2\",\n        class: \"3\"\n      }, {\n        id: \"8\",\n        img: \"paper3\",\n        class: \"3\"\n      }],\n      spawnItemID: 0,\n      totalTimer: 0\n    };\n  },\n  methods: {\n    endGame(sucsess) {\n      clearInterval(this.totalTimer);\n      this.$callClient(\"C:TrasherGame:EndGame\", sucsess);\n    },\n    generateRandomID() {\n      this.spawnItemID = Math.round(Math.random() * (this.allItems.length - 1));\n    },\n    startGame() {\n      this.timeLeft = this.timeTotal * 1000;\n      let lineWidth = $(\".timer__line\").width();\n      let widthMS = lineWidth / (this.timeTotal * 100);\n      this.totalTimer = setInterval(() => {\n        if (this.timeLeft > 0) {\n          lineWidth -= widthMS;\n          $(\".timer__line\").width(lineWidth);\n          this.timeLeft -= 10;\n        } else {\n          this.endGame(false);\n        }\n      }, 10);\n    },\n    setData(data) {\n      Object.assign(this.$data, data);\n    }\n  },\n  mounted() {\n    this.startGame();\n    this.itemsLeft = this.itemsTotal - 1;\n    this.generateRandomID();\n    const trasherGame = this;\n    $(\".spawn__item\").draggable({\n      scroll: false,\n      containment: $(\".main\"),\n      start: function (e) {\n        let item = $(this);\n        app.itemCordX = item.css(\"left\");\n        app.itemCordY = item.css(\"top\");\n      },\n      stop: function (e) {\n        let item = $(this);\n        $(\".trashsort-slots\").each(function () {\n          const slot = $(this);\n          if (e.pageY < slot.offset().top || e.pageY > slot.offset().top + slot.height() || e.pageX < slot.offset().left || e.pageX > slot.offset().left + slot.width()) {\n            item.css({\n              left: `${app.itemCordX}`,\n              top: `${app.itemCordY}`,\n              transition: \".1s ease\",\n              \"pointer-evenets\": \"none\"\n            });\n            setTimeout(() => {\n              item.css({\n                transition: \"unset\",\n                \"pointer-events\": \"all\"\n              });\n            }, 200);\n          } else {\n            if ($(this).data(\"slot\") == item.data(\"for-slot\")) {\n              if (trasherGame.itemsLeft > 0) {\n                item.hide();\n                item.css({\n                  left: `${app.itemCordX}`,\n                  top: `${app.itemCordY}`\n                });\n                trasherGame.generateRandomID();\n                setTimeout(() => {\n                  item.show();\n                }, 100);\n                item.data(\"for-slot\", trasherGame.allItems[trasherGame.spawnItemID].class);\n                trasherGame.itemsLeft--;\n                $(\".trashsort-alert\").addClass(\"success\");\n                setTimeout(() => {\n                  $(\".trashsort-alert\").removeClass(\"success\");\n                }, 500);\n              } else {\n                trasherGame.endGame(true);\n              }\n            } else {\n              item.css({\n                left: `${app.itemCordX}`,\n                top: `${app.itemCordY}`,\n                transition: \".1s ease\",\n                \"pointer-evenets\": \"none\"\n              });\n              setTimeout(() => {\n                item.css({\n                  transition: \"unset\",\n                  \"pointer-events\": \"all\"\n                });\n              }, 200);\n              $(\".trashsort-alert\").addClass(\"error\");\n              setTimeout(() => {\n                item.css({\n                  transition: \"unset\",\n                  \"pointer-events\": \"all\"\n                });\n                $(\".trashsort-alert\").removeClass(\"error\");\n              }, 500);\n            }\n          }\n        });\n      }\n    });\n    this.$onClient(\"W:TrasherGame:SetData\", this.setData);\n    this.$callClient(\"C:TrasherGame:Ready\");\n  },\n  beforeUnmount() {\n    clearInterval(this.totalTimer);\n    this.$offClient(\"W:TrasherGame:SetData\", this.setData);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}