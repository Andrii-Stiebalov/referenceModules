{"ast":null,"code":"export default {\n  data() {\n    return {\n      appActive: true,\n      lastPressed: null,\n      locale: \"ua\",\n      timer: null,\n      time: 0,\n      gameStatus: null,\n      saw: {\n        currentCoeff: 1,\n        specialCoeff: 4,\n        defaultCoeff: 1,\n        currentPosY: 32.563,\n        currentPosX: 35,\n        leftPosX: 39,\n        rightPosX: 29,\n        endPosY: 23.4\n      },\n      bar: {\n        width: 24.751,\n        maxPoints: 20,\n        currentPoints: 0,\n        minEffPoints: 12,\n        maxEffPoints: 16\n      }\n    };\n  },\n  computed: {\n    barWidth() {\n      return `width:${this.bar.width / this.bar.maxPoints * (this.bar.maxPoints - this.bar.currentPoints)}vw;`;\n    },\n    sawPosition() {\n      return `right:${this.saw.currentPosX}vw;bottom:${this.saw.currentPosY}vw;`;\n    },\n    getDone() {\n      return this.gameStatus !== null && this.gameStatus === true ? true : false;\n    },\n    getFail() {\n      return this.gameStatus !== null && this.gameStatus === false ? true : false;\n    }\n  },\n  methods: {\n    endGame(win) {\n      window.removeEventListener(\"keydown\", this.keyDown);\n      clearInterval(this.timer);\n      this.gameStatus = win;\n      this.$callClient(\"LumberJack:statusGame\", win);\n      setTimeout(() => {\n        this.appActive = false;\n      }, 500);\n    },\n    keyPressed() {\n      this.bar.currentPoints += 1;\n      this.saw.currentPosY -= this.saw.currentCoeff * 0.1;\n    },\n    keyDown(e) {\n      if (e.key === \"ArrowLeft\" || e.key === \"ArrowRight\") {\n        if (!this.lastPressed || this.lastPressed !== e.key) {\n          if (e.key === \"ArrowLeft\") {\n            document.getElementById(\"audio1\").play();\n          }\n          if (e.key === \"ArrowRight\") {\n            document.getElementById(\"audio2\").play();\n          }\n          if (!this.timer) this.startTimer();\n          e.key === \"ArrowLeft\" ? this.saw.currentPosX = this.saw.leftPosX : this.saw.currentPosX = this.saw.rightPosX;\n          this.lastPressed = e.key;\n          this.keyPressed();\n        }\n      }\n    },\n    startTimer() {\n      this.timer = setInterval(() => {\n        this.time += 1;\n        if (this.bar.currentPoints >= 0) {\n          this.bar.currentPoints -= 3 * (this.bar.currentPoints / this.bar.maxPoints) ** 2 / 100;\n        }\n      }, 1);\n    },\n    throttle(func, wait, options) {\n      var context, args, result;\n      var timeout = null;\n      var previous = 0;\n      if (!options) options = {};\n      var later = function () {\n        previous = options.leading === false ? 0 : Date.now();\n        timeout = null;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      };\n      return function () {\n        var now = Date.now();\n        if (!previous && options.leading === false) previous = now;\n        var remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0 || remaining > wait) {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = null;\n          }\n          previous = now;\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        } else if (!timeout && options.trailing !== false) {\n          timeout = setTimeout(later, remaining);\n        }\n        return result;\n      };\n    }\n  },\n  mounted() {\n    this.appActive = true;\n    this.startTimer();\n    window.addEventListener(\"keydown\", this.throttle(this.keyDown, 50));\n  },\n  watch: {\n    \"bar.currentPoints\": function (val) {\n      if (val > this.bar.maxPoints) {\n        this.bar.currentPoints = 20;\n        this.endGame(false);\n      }\n      this.bar.minEffPoints <= val && val <= this.bar.maxEffPoints ? this.saw.currentCoeff = this.saw.specialCoeff : this.saw.currentCoeff = this.saw.defaultCoeff;\n    },\n    \"saw.currentPosY\": function () {\n      if (this.saw.currentPosY < this.saw.endPosY) this.endGame(true);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}