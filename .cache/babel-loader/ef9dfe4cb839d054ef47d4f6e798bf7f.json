{"ast":null,"code":"import \"./Auction.scss\";\nrequire.context(\"./\", true, /\\.(png|jpe?g|svg)$/).keys().map(x => require(\"./Assets/\" + x.split(\"/\").splice(2).join(\"/\")));\nimport Main from \"./Pages/Main/Main.vue\";\nimport Item from \"./Pages/Item/Item.vue\";\nexport default {\n  components: {\n    Main,\n    Item\n  },\n  data() {\n    return {\n      appActive: false,\n      tabs: [{\n        id: \"property\",\n        name: \"Недвижимость\",\n        img: \"Auction-IconProperty\"\n      }, {\n        id: \"business\",\n        name: \"Бизнес\",\n        img: \"Auction-IconBusiness\"\n      }, {\n        id: \"car\",\n        name: \"Автомобили\",\n        img: \"Auction-IconCar\"\n      }, {\n        id: \"clothes\",\n        name: \"Одежда\",\n        img: \"Auction-IconClothes\"\n      }],\n      activeTab: null,\n      hints: [{\n        keys: [\"Esc\"],\n        name: \"Закрыть окно\"\n      }],\n      items: {},\n      activeItem: null\n    };\n  },\n  methods: {\n    isActiveTab(tab) {\n      return tab === this.activeTab;\n    },\n    setActiveTab(tab) {\n      if (!this.isActiveTab(tab)) {\n        this.activeTab = tab;\n        this.activeItem = null;\n      }\n    },\n    setActiveItem(item) {\n      this.activeItem = item;\n    },\n    getBack() {\n      this.activeItem = null;\n    },\n    onKeyDown(e) {\n      if (e.keyCode === 27 && !window.isModalShow) this.appActive = false;\n    },\n    onAfterLeave() {\n      this.$router.push(\"/\");\n      this.$callClient(\"Auction:Close\");\n    },\n    addNewLot(type, newLot) {\n      console.log(type, newLot);\n      let item = this.items[type].find(lot => lot.lotID == newLot.lotID);\n      if (item) {\n        let index = this.items[type].indexOf(item);\n        this.items[type].splice(index, 1, newLot);\n        if (item === this.activeItem) this.activeItem = this.items[type][index];\n      } else {\n        this.items[type].unshift(newLot);\n      }\n    },\n    removeLot(type, lotID) {\n      let item = this.items[type].find(lot => lot.lotID == lotID);\n      if (item) {\n        let index = this.items[type].indexOf(item);\n        this.items[type].splice(index, 1);\n        if (this.activeItem === item) this.activeItem = null;\n      }\n    }\n  },\n  computed: {\n    filteredItems() {\n      return this.activeTab ? this.items[this.activeTab.id] ? this.items[this.activeTab.id] : [] : [];\n    }\n  },\n  created() {\n    window.addEventListener(\"keydown\", this.onKeyDown);\n    this.$EBus.on(\"Auction:AddNewLot\", this.addNewLot);\n    this.$EBus.on(\"Auction:RemoveLot\", this.removeLot);\n    this.$RPC.call(\"Auction:GetAllData\").then(([items]) => {\n      this.items = items;\n      this.interval = setInterval(() => {\n        for (let prop in this.items) {\n          for (let item of this.items[prop]) {\n            //console.log(item);\n            if (item.timeLeft !== undefined && item.timeLeft != -1) {\n              item.timeLeft -= 1;\n              if (!item.timeLeft) {\n                if (this.activeItem === item) this.activeItem = null;\n                this.items[prop].splice(this.items[prop].indexOf(item), 1);\n              }\n            }\n          }\n        }\n        //console.log('------------------------');x\n      }, 1000);\n      this.activeTab = this.tabs[0];\n      console.log(this.activeTab);\n      this.appActive = true;\n    });\n  },\n  beforeUnmount() {\n    if (this.interval) clearInterval(this.interval);\n    window.removeEventListener(\"keydown\", this.onKeyDown);\n    this.$EBus.off(\"Auction:AddNewLot\");\n    this.$EBus.off(\"Auction:RemoveLot\");\n  }\n};","map":null,"metadata":{},"sourceType":"module"}