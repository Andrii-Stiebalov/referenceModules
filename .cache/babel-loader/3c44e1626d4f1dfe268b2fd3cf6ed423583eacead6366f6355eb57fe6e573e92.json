{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapGetters } from \"vuex\";\nimport api from \"../mixins/api.js\";\nexport default {\n  mixins: [api],\n  data() {\n    return {\n      inputs: {\n        recoveryCode: {\n          currentInput: 0,\n          value: [],\n          input1: {\n            value: \"\",\n            focus: false,\n            valid: false,\n            maxLength: 1,\n            handler: {\n              focus: e => {\n                this.inputs.recoveryCode.currentInput = 1;\n                this.inputs.recoveryCode.input1.focus = true;\n                e.target.select();\n              },\n              blur: () => {\n                this.inputs.recoveryCode.input1.focus = false;\n              },\n              validate: e => {\n                let regExp = /^[a-zA-Z]+$/;\n                this.inputs.recoveryCode.input1.valid = regExp.test(this.inputs.recoveryCode.input1.value);\n                if (this.inputs.recoveryCode.input1.valid) {\n                  if (e.type !== \"keyup\") {\n                    if (this.inputs.recoveryCode.input1.value.length >= this.inputs.recoveryCode.input1.maxLength && this.$refs[`inputRecoveryCode_${this.inputs.recoveryCode.currentInput + 1}`]) {\n                      this.$refs[`inputRecoveryCode_${this.inputs.recoveryCode.currentInput + 1}`].focus();\n                    }\n                  }\n                  this.inputs.recoveryCode.value[0] = this.inputs.recoveryCode.input1.value;\n                } else {\n                  this.inputs.recoveryCode.input1.value = this.inputs.recoveryCode.input1.value.slice(0, this.inputs.recoveryCode.input1.value.length - 1);\n                }\n              }\n            }\n          },\n          input2: {\n            value: \"\",\n            focus: false,\n            valid: false,\n            maxLength: 1,\n            handler: {\n              focus: e => {\n                this.inputs.recoveryCode.currentInput = 2;\n                this.inputs.recoveryCode.input2.focus = true;\n                e.target.select();\n              },\n              blur: () => {\n                this.inputs.recoveryCode.input2.focus = false;\n              },\n              validate: e => {\n                let regExp = /^[a-zA-Z]+$/;\n                this.inputs.recoveryCode.input2.valid = regExp.test(this.inputs.recoveryCode.input2.value);\n                if (e.keyCode === 8) {\n                  if (!this.inputs.recoveryCode.input2.value && this.inputs.recoveryCode.input2.focus) {\n                    return this.$refs[`inputRecoveryCode_${this.inputs.recoveryCode.currentInput - 1}`].focus();\n                  }\n                }\n                if (this.inputs.recoveryCode.input2.valid) {\n                  if (e.type !== \"keyup\") {\n                    if (this.inputs.recoveryCode.input2.value.length >= this.inputs.recoveryCode.input2.maxLength && this.$refs[`inputRecoveryCode_${this.inputs.recoveryCode.currentInput + 1}`]) {\n                      this.$refs[`inputRecoveryCode_${this.inputs.recoveryCode.currentInput + 1}`].focus();\n                    }\n                  }\n                  this.inputs.recoveryCode.value[1] = this.inputs.recoveryCode.input2.value;\n                } else {\n                  this.inputs.recoveryCode.input2.value = this.inputs.recoveryCode.input2.value.slice(0, this.inputs.recoveryCode.input2.value.length - 1);\n                }\n              }\n            }\n          },\n          input3: {\n            value: \"\",\n            focus: false,\n            valid: false,\n            maxLength: 1,\n            handler: {\n              focus: e => {\n                this.inputs.recoveryCode.currentInput = 3;\n                this.inputs.recoveryCode.input3.focus = true;\n                e.target.select();\n              },\n              blur: () => {\n                this.inputs.recoveryCode.input3.focus = false;\n              },\n              validate: e => {\n                let regExp = /^[a-zA-Z]+$/;\n                this.inputs.recoveryCode.input3.valid = regExp.test(this.inputs.recoveryCode.input3.value);\n                if (e.keyCode === 8) {\n                  if (!this.inputs.recoveryCode.input3.value && this.inputs.recoveryCode.input3.focus) {\n                    return this.$refs[`inputRecoveryCode_${this.inputs.recoveryCode.currentInput - 1}`].focus();\n                  }\n                }\n                if (this.inputs.recoveryCode.input3.valid) {\n                  if (e.type !== \"keyup\") {\n                    if (this.inputs.recoveryCode.input3.value.length >= this.inputs.recoveryCode.input3.maxLength && this.$refs[`inputRecoveryCode_${this.inputs.recoveryCode.currentInput + 1}`]) {\n                      this.$refs[`inputRecoveryCode_${this.inputs.recoveryCode.currentInput + 1}`].focus();\n                    }\n                  }\n                  this.inputs.recoveryCode.value[2] = this.inputs.recoveryCode.input3.value;\n                } else {\n                  this.inputs.recoveryCode.input3.value = this.inputs.recoveryCode.input3.value.slice(0, this.inputs.recoveryCode.input3.value.length - 1);\n                }\n              }\n            }\n          },\n          input4: {\n            value: \"\",\n            focus: false,\n            valid: false,\n            maxLength: 1,\n            handler: {\n              focus: e => {\n                this.inputs.recoveryCode.currentInput = 4;\n                this.inputs.recoveryCode.input4.focus = true;\n                e.target.select();\n              },\n              blur: () => {\n                this.inputs.recoveryCode.input4.focus = false;\n              },\n              validate: e => {\n                let regExp = /^[a-zA-Z]+$/;\n                this.inputs.recoveryCode.input4.valid = regExp.test(this.inputs.recoveryCode.input4.value);\n                if (e.keyCode === 8) {\n                  if (!this.inputs.recoveryCode.input4.value && this.inputs.recoveryCode.input4.focus) {\n                    return this.$refs[`inputRecoveryCode_${this.inputs.recoveryCode.currentInput - 1}`].focus();\n                  }\n                }\n                if (this.inputs.recoveryCode.input4.valid) {\n                  if (e.type !== \"keyup\") {\n                    if (this.inputs.recoveryCode.input4.value.length >= this.inputs.recoveryCode.input4.maxLength && this.$refs[`inputRecoveryCode_${this.inputs.recoveryCode.currentInput + 1}`]) {\n                      this.$refs[`inputRecoveryCode_${this.inputs.recoveryCode.currentInput + 1}`].focus();\n                    }\n                  }\n                  this.inputs.recoveryCode.value[3] = this.inputs.recoveryCode.input4.value;\n                } else {\n                  this.inputs.recoveryCode.input4.value = this.inputs.recoveryCode.input4.value.slice(0, this.inputs.recoveryCode.input4.value.length - 1);\n                }\n              }\n            }\n          }\n        }\n      }\n    };\n  },\n  computed: {\n    ...mapGetters(\"authentication\", [\"getProfile\", \"getRecovery\"]),\n    recoveryCodeValue() {\n      return this.inputs.recoveryCode.value.join(\"\");\n    }\n  },\n  methods: {\n    recoveryCodeReset() {\n      this.inputs.recoveryCode.input1.value = \"\";\n      this.inputs.recoveryCode.input2.value = \"\";\n      this.inputs.recoveryCode.input3.value = \"\";\n      this.inputs.recoveryCode.input4.value = \"\";\n      this.inputs.recoveryCode.value = [];\n      this.$refs.inputRecoveryCode_1.focus();\n    },\n    recoveryConfirm(e) {\n      e.preventDefault();\n      if (this.getRecovery.email && this.inputs.recoveryCode.input1.valid && this.inputs.recoveryCode.input2.valid && this.inputs.recoveryCode.input3.valid && this.inputs.recoveryCode.input4.valid) {\n        this.$refs.buttonRecoveryConfirm.disabled = true;\n        this.APIuserRecoveryConfirm(this.getRecovery.email, this.recoveryCodeValue).then(data => {\n          if (data.status) {\n            this.getRecovery.code = this.recoveryCodeValue;\n            this.$router.push(\"/authentication/recovery/password\");\n          } else {\n            this.$refs.buttonRecoveryConfirm.disabled = false;\n            switch (data.code) {\n              case \"2.0\":\n                this.$Notification.create({\n                  type: \"error\",\n                  layout: \"compact-bottom__right\",\n                  theme: \"compact\",\n                  time: 5000,\n                  text: `\n                          <div class=\"notification-text__item\">\n                            <div class=\"notification-text__item-title\">\n                                <span>${this.$t(\"Ошибка\")}</span>\n                            </div>\n                            <div class=\"notification-text__item-subtitle\">\n                                <span>${this.$t(\"Пользователя с таким Email адресом не существует.\")}</span>\n                            </div>\n                          </div>\n                          <div class=\"notification-text__item\">\n                            <div class=\"notification-text__item-icon\">\n                              <span class=\"icon-error\"></span>\n                            </div>\n                          </div>\n                        `,\n                  progressBar: false\n                });\n                break;\n              case \"2.1\":\n                this.$Notification.create({\n                  type: \"error\",\n                  layout: \"compact-bottom__right\",\n                  theme: \"compact\",\n                  time: 5000,\n                  text: `\n                           <div class=\"notification-text__item\">\n                              <div class=\"notification-text__item-title\">\n                                 <span>${this.$t(\"Ошибка\")}</span>\n                              </div>\n                              <div class=\"notification-text__item-subtitle\">\n                                 <span>${this.$t(\"Вы не указали Email адрес.\")}</span>\n                              </div>\n                           </div>\n                           <div class=\"notification-text__item\">\n                              <div class=\"notification-text__item-icon\">\n                                 <span class=\"icon-error\"></span>\n                              </div>\n                           </div>\n                        `,\n                  progressBar: false\n                });\n                break;\n              case \"2.2\":\n                this.$Notification.create({\n                  type: \"error\",\n                  layout: \"compact-bottom__right\",\n                  theme: \"compact\",\n                  time: 5000,\n                  text: `\n                           <div class=\"notification-text__item\">\n                              <div class=\"notification-text__item-title\">\n                                 <span>${this.$t(\"Ошибка\")}</span>\n                              </div>\n                              <div class=\"notification-text__item-subtitle\">\n                                 <span>${this.$t(\"Вы не указали секретный код.\")}</span>\n                              </div>\n                           </div>\n                           <div class=\"notification-text__item\">\n                              <div class=\"notification-text__item-icon\">\n                                 <span class=\"icon-error\"></span>\n                              </div>\n                           </div>\n                        `,\n                  progressBar: false\n                });\n                break;\n              case \"2.3\":\n                this.$Notification.create({\n                  type: \"error\",\n                  layout: \"compact-bottom__right\",\n                  theme: \"compact\",\n                  time: 5000,\n                  text: `\n                           <div class=\"notification-text__item\">\n                              <div class=\"notification-text__item-title\">\n                                 <span>${this.$t(\"Ошибка\")}</span>\n                              </div>\n                              <div class=\"notification-text__item-subtitle\">\n                                 <span>${this.$t(\"Вы указали неверный секретный код.\")}</span>\n                              </div>\n                           </div>\n                           <div class=\"notification-text__item\">\n                              <div class=\"notification-text__item-icon\">\n                                 <span class=\"icon-error\"></span>\n                              </div>\n                           </div>\n                        `,\n                  progressBar: false\n                });\n                this.recoveryCodeReset();\n                break;\n              case \"2.4\":\n                this.$Notification.create({\n                  type: \"error\",\n                  layout: \"compact-bottom__right\",\n                  theme: \"compact\",\n                  time: 5000,\n                  text: `\n                           <div class=\"notification-text__item\">\n                              <div class=\"notification-text__item-title\">\n                                 <span>${this.$t(\"Ошибка\")}</span>\n                              </div>\n                              <div class=\"notification-text__item-subtitle\">\n                                 <span>${this.$t(\"Вы перевысили лимит попыток ввода секретного кода, попробуйте еще раз.\")}</span>\n                              </div>\n                           </div>\n                           <div class=\"notification-text__item\">\n                              <div class=\"notification-text__item-icon\">\n                                 <span class=\"icon-error\"></span>\n                              </div>\n                           </div>\n                        `,\n                  progressBar: false\n                });\n                this.getRecovery.status = false;\n                this.getRecovery.code = \"\";\n                this.$router.push(\"/authentication/recovery\");\n                break;\n              default:\n                this.$Notification.create({\n                  type: \"error\",\n                  layout: \"compact-bottom__right\",\n                  theme: \"compact\",\n                  time: 5000,\n                  text: `\n                           <div class=\"notification-text__item\">\n                              <div class=\"notification-text__item-title\">\n                                 <span>${this.$t(\"Ошибка\")}</span>\n                              </div>\n                              <div class=\"notification-text__item-subtitle\">\n                                 <span>${this.$t(\"Что-то пошло не так. Обратитесь к администрации.\")}</span>\n                              </div>\n                           </div>\n                           <div class=\"notification-text__item\">\n                              <div class=\"notification-text__item-icon\">\n                                 <span class=\"icon-error\"></span>\n                              </div>\n                           </div>\n                        `,\n                  progressBar: false\n                });\n                break;\n            }\n          }\n        }).catch(() => {\n          this.$refs.buttonRecoveryConfirm.disabled = false;\n          this.$Notification.create({\n            type: \"error\",\n            layout: \"compact-bottom__right\",\n            theme: \"compact\",\n            time: 5000,\n            text: `\n                  <div class=\"notification-text__item\">\n                     <div class=\"notification-text__item-title\">\n                        <span>${this.$t(\"Ошибка\")}</span>\n                     </div>\n                     <div class=\"notification-text__item-subtitle\">\n                        <span>${this.$t(\"Время ожидание от сервера вышло, попробуйте позже.\")}</span>\n                     </div>\n                  </div>\n                  <div class=\"notification-text__item\">\n                     <div class=\"notification-text__item-icon\">\n                        <span class=\"icon-error\"></span>\n                     </div>\n                  </div>\n               `,\n            progressBar: false\n          });\n        });\n      }\n    },\n    returnBack(route) {\n      this.getRecovery.status = false;\n      this.getRecovery.code = \"\";\n      this.$router.push(route);\n    }\n  },\n  beforeMount() {\n    if (this.getProfile.isLoggIn) {\n      return this.$router.push(\"/authentication/character\");\n    }\n    if (!this.getRecovery.status) {\n      return this.$router.push(\"/authentication/recovery\");\n    }\n  },\n  mounted() {\n    if (this.getRecovery.code) {\n      this.inputs.recoveryCode.input1.value = this.getRecovery.code[0];\n      this.inputs.recoveryCode.input2.value = this.getRecovery.code[1];\n      this.inputs.recoveryCode.input3.value = this.getRecovery.code[2];\n      this.inputs.recoveryCode.input4.value = this.getRecovery.code[3];\n      this.inputs.recoveryCode.input1.valid = true;\n      this.inputs.recoveryCode.input2.valid = true;\n      this.inputs.recoveryCode.input3.valid = true;\n      this.inputs.recoveryCode.input4.valid = true;\n      this.inputs.recoveryCode.value = this.getRecovery.code.split(\"\");\n      return;\n    }\n    this.$refs.inputRecoveryCode_1.focus();\n  },\n  watch: {\n    recoveryCodeValue(value) {\n      value.length === 4 && this.$refs.buttonRecoveryConfirm.click();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}