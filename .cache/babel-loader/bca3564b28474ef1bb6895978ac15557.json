{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"arena-select__list\"\n};\nconst _hoisted_2 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass([\"arena-select\", {\n      active: $data.isSelection,\n      selected: $props.active\n    }])\n  }, [_createElementVNode(\"div\", {\n    class: \"arena-select__head\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.openSelection && $options.openSelection(...args))\n  }, _toDisplayString(!$props.active ? _ctx.$t(\"Выбрать\") : $options.getMapName($props.active) ? _ctx.$t($options.getMapName($props.active)) : $options.getWeaponName($props.active) ? _ctx.$t($options.getWeaponName($props.active)) : $props.active), 1), _createElementVNode(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.list, item => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"arena-select__list-item\",\n      key: item,\n      onClick: $event => $options.selectItem(item)\n    }, _toDisplayString($options.getMapName(item) ? _ctx.$t($options.getMapName(item)) : $options.getWeaponName(item) ? _ctx.$t($options.getWeaponName(item)) : item), 9, _hoisted_2);\n  }), 128))])], 2);\n}","map":null,"metadata":{},"sourceType":"module"}