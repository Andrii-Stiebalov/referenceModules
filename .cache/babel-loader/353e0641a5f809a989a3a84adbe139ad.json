{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport Loader from \"../../../Components/Loading.vue\";\nexport default {\n  data() {\n    return {\n      donateAmount: \"\",\n      convertAmount: \"\",\n      iframeUrl: \"\",\n      isShowIframePay: \"\",\n      isShowLoader: false\n    };\n  },\n  components: {\n    Loader\n  },\n  computed: {\n    donateValue() {\n      return this.convertAmount * this.donateRate;\n    },\n    donateRate() {\n      return this.$store.getters[\"playerMenu/getDonateRate\"];\n    },\n    Login() {\n      return this.$store.getters[\"playerMenu/getLogin\"];\n    }\n  },\n  methods: {\n    goToRoute(route) {\n      this.$router.push(`/playerMenu/shop/${route}`);\n    },\n    validValue(e, valueName) {\n      const value = e.target.value;\n      const numericRegex = /\\D/g;\n      this[valueName] = value.replace(numericRegex, \"\");\n    },\n    onDonate() {\n      const UniversalModalData = {\n        title: this.$t(\"Пополнение счета\"),\n        content: [{\n          type: \"description\",\n          value: this.$t(`Вы хотите пополнить счет вашего аккаунта на сумму: %0`).replace(\"%0\", `<span> ${this.donateAmount} ${this.$t(\"₴\")}<span>`)\n        }],\n        buttons: {\n          submit: {\n            name: this.$t(\"Пополнить\"),\n            handler: () => {\n              // this.$callClient(\"C:Shop:Donate\", this.donateAmount);\n              this.getPaymentData(this.donateAmount);\n            }\n          },\n          cansel: {\n            name: this.$t(\"Отмена\")\n          }\n        }\n      };\n      if (this.donateAmount) {\n        this.$UniversalModal.create(UniversalModalData);\n      }\n    },\n    exchangeDonate() {\n      this.$callClient(\"C:Shop:ExchangeDonate\", this.convertAmount);\n      this.convertAmount = \"\";\n    },\n    getPaymentData() {\n      this.isShowLoader = true;\n      fetch(`https://s3.nexus-rp.net/api/payment/pay-way-types?locale=${this.$i18n.locale}`).then(response => response.json()).then(response => this.sendPaymentData(response.merchants[0].id)).catch(error => {\n        console.error(\"ERROR\", error);\n        this.isShowLoader = false;\n      });\n    },\n    async sendPaymentData(id) {\n      const paymentData = {\n        id: id,\n        login: this.Login,\n        count: this.donateAmount\n      };\n      fetch(`https://s3.nexus-rp.net/api/payment?locale=${this.$i18n.locale}`, {\n        method: \"post\",\n        body: JSON.stringify(paymentData),\n        headers: {\n          \"content-type\": \"application/json\"\n        }\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error(`${response.status}`);\n        }\n        return response.json();\n      }).then(data => {\n        //this.iframeUrl = data.url;\n        //this.isShowIframePay = true;\n        this.$callClient(`Kinguin.Open`, data.url);\n        this.isShowLoader = false;\n      }).catch(error => {\n        console.error(\"ERROR\", error);\n        this.isShowLoader = false;\n      });\n    }\n  },\n  beforeUnmount() {\n    // removeFake3D();\n  },\n  mounted() {}\n};","map":null,"metadata":{},"sourceType":"module"}