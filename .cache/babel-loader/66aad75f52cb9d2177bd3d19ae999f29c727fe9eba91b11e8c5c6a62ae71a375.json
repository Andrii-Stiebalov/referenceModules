{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  el: \".fisherman\",\n  data() {\n    return {\n      active: true,\n      hide: true,\n      locale: \"ua\",\n      config: {\n        detectZone: 100,\n        // Percentages from latitudes of the screen\n        hookAnimationIn: 2,\n        hookAnimationInType: \"ease-in-out\",\n        hookAnimationOut: 1,\n        hookAnimationOutType: \"ease-in-out\",\n        hookPositionMin: 5,\n        hookPositionMax: 60,\n        hookInterval: null,\n        fishesList: [\"fish-1\", \"fish-2\", \"fish-3\", \"fish-3\", \"fish-2\", \"fish-1\"],\n        countOfSpawnFish: 1,\n        radiusToDetect: 100,\n        // px\n        fish: {\n          // When the game start\n          spawnTimeoutFrom: 3,\n          // 2s\n          spawnTimeoutTo: 15,\n          // 5s\n          // The interval between spawn the fish (working when count of spawn fish > 1)\n          spawnIntervalFrom: 3,\n          // 1s\n          spawnIntervalTo: 15,\n          // 10s\n          speedIntervalFrom: 12,\n          // 12s\n          speedIntervalTo: 18,\n          // 18s\n          speedAnimationType: \"ease-in-out\"\n        },\n        progressBar: {\n          ratioIncrement: 7.5,\n          rationDecrement: 1.0,\n          decrementOnNotAllowClick: 5\n        },\n        intervalToDeclineClick: 3000,\n        interlvalToDecrementBarStatus: 4500,\n        catchOnHookTime: 60,\n        // 60s Сколько времени игрок может держать рыбу на крюке,\n        afkToKickTime: 360,\n        // AFK timeout\n        throttle: 200 // 2ms\n      },\n      priviusInDetectZone: false,\n      inGameProvider: {\n        win: false,\n        status: false,\n        hold: false,\n        depthOfHook: 0,\n        // In px\n        fishes: [],\n        eventHandlerInterval: null,\n        fishInRadius: false,\n        catched: false,\n        catchedFish: {},\n        currenHookDepth: 0,\n        progressBarWidth: 0,\n        progressBarStatus: 0,\n        progressBarIntervalToDeclineClick: null,\n        progressBarInterval: null,\n        progressBarIntervalDecrementStatus: null,\n        allowClick: false,\n        inDetectZone: false,\n        catchOnHookTimeout: null,\n        afkToKickTimeout: null,\n        throttleTimeout: null\n      }\n    };\n  },\n  computed: {\n    getHookDepth() {\n      if (this.inGameProvider.catched) {\n        return `height: ${this.inGameProvider.currenHookDepth}%`;\n      } else {\n        if (this.inGameProvider.hold) {\n          return `height: ${this.config.hookPositionMax}%; transition: ${this.config.hookAnimationIn}s ${this.config.hookAnimationInType};`;\n        } else {\n          return `height: ${this.config.hookPositionMin}%; transition: ${this.config.hookAnimationOut}s ${this.config.hookAnimationInType};`;\n        }\n      }\n    },\n    getProgressBarWidth() {\n      return `width: ${this.inGameProvider.progressBarWidth}%`;\n    }\n  },\n  methods: {\n    gameStart() {\n      setTimeout(() => {\n        this.getFish();\n      }, this.getRandom(this.config.fish.spawnTimeoutFrom, this.config.fish.spawnTimeoutTo) * 1000);\n      /*  setTimeout(() => {\r\n                for (let i = 0; i < this.config.countOfSpawnFish; i++) {\r\n                    if (this.config.countOfSpawnFish > 1) {  ///////////////////////NOT IMPLEMENTED MULTI FISH\r\n                        if (i === 0) {\r\n                            this.getFish();\r\n                        } else {\r\n                            setTimeout(() => {\r\n                                this.getFish();\r\n                            }, this.getRandom(this.config.fish.spawnIntervalFrom, this.config.fish.spawnIntervalTo) * 1000);\r\n                        }\r\n                    } else \r\n                    {\r\n                        setTimeout(() => {\r\n                            this.getFish();\r\n                        }, this.getRandom(this.config.fish.spawnTimeoutFrom, this.config.fish.spawnTimeoutTo) * 1000);\r\n                    }\r\n                }\r\n           }, this.getRandom(this.config.fish.spawnTimeoutFrom, this.config.fish.spawnTimeoutTo) * 1000); */\n      // Start main event loop\n      this.inGameProvider.eventHandlerInterval && clearInterval(this.inGameProvider.eventHandlerInterval);\n      this.inGameProvider.eventHandlerInterval = setInterval(() => {\n        Object.keys(this.inGameProvider.catchedFish).length && clearInterval(this.inGameProvider.eventHandlerInterval);\n        if (this.$refs.divFishes) {\n          for (let f = 0; f < this.$refs.divFishes.length; f++) {\n            this.inGameProvider.inDetectZone = this.$refs.divFishes[f].offsetLeft > this.$refs.divDetectZone.offsetLeft && this.$refs.divFishes[f].offsetLeft < this.$refs.divDetectZone.offsetLeft + this.$refs.divDetectZone.offsetWidth;\n            if (this.getDistance(this.$refs.divHook.offsetLeft, this.inGameProvider.depthOfHook, this.$refs.divFishes[f].offsetLeft, this.$refs.divFishSpawnArea.offsetTop + this.$refs.divFishes[f].offsetTop - this.$refs.divFishSpawnArea.offsetHeight / 2 + this.$refs.divFishes[f].offsetHeight / 2) <= this.config.radiusToDetect) {\n              this.inGameProvider.fishes[f].inRadius = true;\n              setTimeout(() => {\n                if (Object.keys(this.inGameProvider.catchedFish) <= 1 && this.inGameProvider.fishes[f].inRadius) {\n                  this.inGameProvider.catched = true;\n                  this.inGameProvider.catchedFish = Object.assign(this.inGameProvider.fishes[f], {});\n                  this.$refs.spanDetectAura.style.width = \"0%\";\n                  this.$refs.spanDetectAura.style.height = \"0%\";\n                  this.inGameProvider.fishInRadius = false;\n                  this.inGameProvider.fishes[f].hide = true;\n                }\n              }, 300);\n            } else {\n              this.inGameProvider.fishes[f].inRadius = false;\n            }\n          }\n        }\n      }, 1);\n    },\n    getFish() {\n      this.inGameProvider.fishes.push({\n        position: {\n          top: this.getRandom(0, 100),\n          align: this.getRandom(0, 10) < 5 ? \"left\" : \"right\"\n        },\n        speed: `${this.getRandom(this.config.fish.speedIntervalFrom, this.config.fish.speedIntervalTo)}s ${this.config.fish.speedAnimationType}`,\n        type: this.config.fishesList[this.getRandom(0, this.config.fishesList.length - 1)],\n        inRadius: false,\n        hide: false\n      });\n      this.$nextTick(() => {\n        for (let f = 0; f < this.$refs.divFishes.length; f++) {\n          setTimeout(() => {\n            if (!this.$refs.divFishes[f].classList.contains(\"active\")) {\n              this.$refs.divFishes[f].classList.add(\"active\");\n            }\n          }, 100);\n        }\n      });\n      setTimeout(() => {\n        if (!this.inGameProvider.catched) {\n          this.getFish();\n        }\n      }, this.getRandom(this.config.fish.spawnTimeoutFrom, this.config.fish.spawnTimeoutTo) * 1000);\n    },\n    gameStartBar() {\n      if (!this.inGameProvider.status) {\n        this.inGameProvider.status = true;\n        this.inGameProvider.progressBarStatus = 1;\n        this.inGameProvider.allowClick = true;\n        this.inGameProvider.progressBarIntervalToDeclineClick = setInterval(() => {\n          this.inGameProvider.allowClick = !this.inGameProvider.allowClick;\n        }, this.config.intervalToDeclineClick);\n        this.inGameProvider.progressBarInterval = setInterval(() => {\n          if (this.inGameProvider.progressBarWidth > 0) {\n            this.inGameProvider.progressBarWidth = Math.round(this.inGameProvider.progressBarWidth - this.config.progressBar.rationDecrement);\n          }\n        }, 200);\n        this.inGameProvider.hookInterval = setInterval(() => {\n          this.inGameProvider.currenHookDepth = this.config.hookPositionMax - this.inGameProvider.progressBarWidth / 100 * this.config.hookPositionMax;\n        }, 100);\n      }\n    },\n    gameLogic() {\n      if (!this.inGameProvider.allowClick) {\n        this.inGameProvider.progressBarStatus++;\n        if (this.inGameProvider.progressBarWidth > this.config.progressBar.decrementOnNotAllowClick) {\n          this.inGameProvider.progressBarWidth = this.inGameProvider.progressBarWidth - this.config.progressBar.decrementOnNotAllowClick;\n        }\n        this.inGameProvider.progressBarIntervalDecrementStatus && clearInterval(this.inGameProvider.progressBarIntervalDecrementStatus);\n        this.inGameProvider.progressBarIntervalDecrementStatus = setInterval(() => {\n          if (this.inGameProvider.progressBarStatus > 1) {\n            this.inGameProvider.progressBarStatus--;\n          }\n        }, this.config.interlvalToDecrementBarStatus);\n        if (this.inGameProvider.progressBarStatus > 4) {\n          this.$refs.audioLose.play();\n          console.log(\"lose\");\n          //return this.gameReset();\n          this.active = false;\n        }\n      }\n      this.inGameProvider.progressBarWidth = this.inGameProvider.progressBarWidth + this.config.progressBar.ratioIncrement;\n      if (this.inGameProvider.currenHookDepth <= 0 && this.inGameProvider.progressBarWidth >= 100) {\n        this.$refs.audioWin.play();\n        this.inGameProvider.win = true;\n        //console.log('win');\n        //return this.gameReset();\n        this.active = false;\n      }\n    },\n    getFishImage(image) {\n      return `./images/fishes/${image}`;\n    },\n    getRandom(min, max) {\n      return Number(Math.floor((Math.random() * (max - min) + min).toFixed(1)));\n    },\n    getDistance(x, y, x1, y1) {\n      return Math.sqrt(Math.pow(x1 - x, 2) + Math.pow(y1 - y, 2));\n    },\n    gameReset() {\n      clearTimeout(this.inGameProvider.catchOnHookTimeout);\n      clearInterval(this.inGameProvider.eventHandlerInterval);\n      clearInterval(this.inGameProvider.progressBarIntervalToDeclineClick);\n      clearInterval(this.inGameProvider.progressBarInterval);\n      clearInterval(this.inGameProvider.hookInterval);\n      clearInterval(this.inGameProvider.progressBarIntervalDecrementStatus);\n      this.inGameProvider = {\n        status: false,\n        hold: false,\n        depthOfHook: 0,\n        fishes: [],\n        eventHandlerInterval: null,\n        fishInRadius: false,\n        catched: false,\n        catchedFish: {},\n        currenHookDepth: 0,\n        progressBarWidth: 0,\n        progressBarStatus: 0,\n        progressBarIntervalToDeclineClick: null,\n        progressBarInterval: null,\n        progressBarIntervalDecrementStatus: null,\n        allowClick: false\n      };\n    },\n    antiAfk() {\n      clearTimeout(this.inGameProvider.afkToKickTimeout);\n      this.inGameProvider.afkToKickTimeout = setTimeout(() => {\n        this.active = false;\n      }, this.config.afkToKickTime * 1000);\n    },\n    fishermanHandler(action) {\n      this.$callClient(\"Fisherman:Handler\", action, this.inGameProvider.win);\n    },\n    setIsHide(value) {\n      this.hide = value;\n    }\n  },\n  mounted() {\n    this.antiAfk(); // Анти афк, не удалять\n\n    setTimeout(() => {\n      //this.hide = false; // Debug -> default true\n      this.gameStart();\n    }, 1000);\n    document.addEventListener(\"click\", e => {\n      if (this.inGameProvider.catched) {\n        if (!this.inGameProvider.throttleTimeout) {\n          this.inGameProvider.throttleTimeout = setTimeout(() => {\n            this.gameStartBar();\n            this.gameLogic();\n            clearTimeout(this.inGameProvider.throttleTimeout);\n            this.inGameProvider.throttleTimeout = null;\n          }, this.config.throttle);\n        }\n      }\n    });\n    document.addEventListener(\"mousedown\", () => {\n      this.inGameProvider.hold = true;\n    });\n    document.addEventListener(\"mouseup\", () => {\n      this.inGameProvider.hold = false;\n    });\n    this.$onClient(\"Fisherman:SetIsHide\", this.setIsHide);\n    this.$callClient(\"Fisherman:Ready\");\n  },\n  beforeUnmount() {\n    this.$offClient(\"Fisherman:SetIsHide\", this.setIsHide);\n  },\n  watch: {\n    hide(value) {\n      this.antiAfk();\n      if (value) {\n        this.$refs.audioBackground.pause();\n      } else {\n        this.$refs.audioBackground.play();\n      }\n    },\n    \"inGameProvider.inDetectZone\": {\n      handler() {\n        if (this.priviusInDetectZone === this.inGameProvider.inDetectZone) return;\n        this.priviusInDetectZone = this.inGameProvider.inDetectZone;\n        if (this.inGameProvider.inDetectZone) {\n          //console.log('In Detect zone'); //to do\n          this.$callClient(\"Fisher.UpdateHUD\", true);\n        } else {\n          //console.log('Out from detect zone'); //to do trigger\n          this.$callClient(\"Fisher.UpdateHUD\", false);\n        }\n      },\n      deep: true\n    },\n    \"inGameProvider.hold\": {\n      handler(value) {\n        this.antiAfk();\n        if (value) {\n          this.interval && clearInterval(this.interval);\n          this.timeout && clearTimeout(this.timeout);\n          this.interval = setInterval(() => {\n            if (this.$refs && this.$refs.divHook) {\n              this.inGameProvider.depthOfHook = this.$refs.divHook.offsetTop;\n            } else {\n              this.interval && clearInterval(this.interval);\n            }\n          }, 1);\n        } else {\n          this.timeout = setTimeout(() => {\n            clearInterval(this.interval);\n            this.inGameProvider.depthOfHook = 0;\n          }, this.config.hookAnimationOut * 1000);\n        }\n      },\n      deep: true\n    },\n    \"inGameProvider.fishes\": {\n      handler() {\n        if (this.inGameProvider.fishes.find(a => a.inRadius)) {\n          this.inGameProvider.fishInRadius = true;\n          this.$refs.spanDetectAura.style.width = \"100%\";\n          this.$refs.spanDetectAura.style.height = \"100%\";\n        } else {\n          this.inGameProvider.fishInRadius = false;\n          this.$refs.spanDetectAura.style.width = \"0%\";\n          this.$refs.spanDetectAura.style.height = \"0%\";\n        }\n      },\n      deep: true\n    },\n    \"inGameProvider.catched\": {\n      handler(value) {\n        if (value) {\n          this.$callClient(\"Fisherman:Handler\", false, true);\n          /* this.$callClient('Fisher:GotFish');\r\n                    this.inGameProvider.currenHookDepth = Math.round(this.inGameProvider.depthOfHook / (this.$refs.divItemGameRod.offsetHeight * this.config.hookPositionMax / 100) * this.config.hookPositionMax);\r\n                    this.inGameProvider.catchOnHookTimeout = setTimeout(() => {\r\n                        this.$refs.audioLose.play();\r\n                        //this.gameReset();\r\n                        this.active = false;\r\n                    }, this.config.catchOnHookTime * 1000);*/\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}