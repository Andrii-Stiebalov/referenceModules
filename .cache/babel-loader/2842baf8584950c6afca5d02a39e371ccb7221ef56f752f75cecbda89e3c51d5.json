{"ast":null,"code":"import BlackJackButton from \"./Components/BlackJackButton.vue\";\nimport Glow from \"./Components/BlackJackGlow.vue\";\nexport default {\n  data() {\n    return {\n      gameStatus: \"\",\n      lastBetData: 0,\n      userAmount: \"\",\n      selectedHelpNav: \"rules\",\n      animData: {\n        win: {\n          color: \"#40BF6A\",\n          soundName: \"onWinSound\"\n        },\n        lose: {\n          color: \"#E32636\",\n          soundName: \"onLoseSound\"\n        },\n        draw: {\n          color: \"#FFCC4D\",\n          soundName: \"onLoseSound\"\n        }\n      },\n      isShowAnim: false,\n      isShowModal: false,\n      isShowHelpModal: false,\n      helpActionInfo: [{\n        title: \"Hit (Взять карту)\",\n        description: `Вы берете дополнительную карту из колоды\n              в текущую активную руку.`,\n        subtitile: `Используйте \"Hit\", если ваша текущая сумма очков меньше 12, чтобы приблизиться к 21.`,\n        imgName: \"hit\",\n        mainColor: \"#40BF6A\"\n      }, {\n        title: \"Stand (Остановиться)\",\n        description: `Вы прекращаете брать карты и оставляете свою текущую руку.`,\n        subtitile: `Воспользуйтесь \"Stand\", если у вас уже есть сумма очков 17 и вы боитесь перебора (больше 21).`,\n        imgName: \"stand\",\n        mainColor: \"#40BF6A\"\n      }, {\n        title: \"Double (Удвоить ставку)\",\n        description: `Вы удваиваете свою ставку и получаете только одну дополнительную карту.`,\n        subtitile: `Используйте \"Double\", если у вас 10 или 11 очков и уверены, что следующая карта поможет вам.`,\n        imgName: \"double\",\n        mainColor: \"#40BF6A\"\n      }, {\n        title: \"Split (Разделить карты)\",\n        description: `Вы можете разделить две одинаковые карты на две руки и продолжить играть обеими руками.`,\n        subtitile: `Воспользуйтесь \"Split\", когда у вас на руках пара карт. Например, разделите две восьмерки.`,\n        imgName: \"split\",\n        mainColor: \"#40BF6A\"\n      }],\n      actionModalType: \"\",\n      gameData: null,\n      actionBind: {\n        double: \"Удвоить\",\n        hit: \"Взять карту\",\n        stand: \"Остановиться\",\n        split: \"Разделить ставку\"\n      },\n      bindKeys: [\"a\", \"s\", \"d\", \"f\"],\n      betData: {\n        minBet: 50,\n        maxBet: 100\n      }\n    };\n  },\n  watch: {\n    isShowHelpModal(value) {\n      this.$callClient(\"toggleShowCursor\", value);\n    }\n  },\n  methods: {\n    validInput(e) {\n      const value = e.target.value;\n      const numericRegex = /\\D/g;\n      this.userAmount = value.replace(numericRegex, \"\");\n    },\n    setBet() {\n      if (this.userAmount < this.betData.minBet || this.userAmount > this.betData.maxBet || this.userAmount > this.gameData.playerBalance) {\n        this.$Notification.create({\n          type: \"error\",\n          layout: \"compact-bottom__right\",\n          theme: \"compact\",\n          time: 5000,\n          text: `\n                  <div class=\"notification-text__item\">\n                      <div class=\"notification-text__item-title\">\n                          <span>${this.$t(\"Ошибка\")}</span>\n                      </div>\n                      <div class=\"notification-text__item-subtitle\">\n                          <span>${this.$t(\"Недопустимая ставка\")}</span>\n                      </div>\n                  </div>\n                  <div class=\"notification-text__item\">\n                      <div class=\"notification-text__item-icon\">\n                          <span class=\"icon-error\"></span>\n                      </div>\n                  </div>\n              `,\n          progressBar: false\n        });\n      }\n      this.$callClient(\"C:BlackJack:SetBet\", this.userAmount);\n    },\n    close() {\n      this.$callClient(\"toggleShowCursor\", true);\n      const UniversalModalData = {\n        title: this.$t(\"Вы действительно хотите уйти?\"),\n        content: [{\n          type: \"description\",\n          value: this.$t(\"Покидая стол - Вы автоматически проиграете и потеряете вашу ставку.\")\n        }],\n        buttons: {\n          submit: {\n            name: this.$t(\"Да\"),\n            handler: () => {\n              this.$callClient(\"C:BlackJack:Leave\");\n              this.isShowModal = false;\n              this.$callClient(\"toggleShowCursor\", false);\n            }\n          },\n          cansel: {\n            name: this.$t(\"Отмена\"),\n            handler: () => {\n              this.isShowModal = false;\n              this.$callClient(\"toggleShowCursor\", false);\n            }\n          }\n        }\n      };\n      this.$UniversalModal.create(UniversalModalData);\n      this.isShowModal = true;\n      return;\n    },\n    onSubmit() {\n      const buttonElem = this.$refs.betButton;\n      if (!buttonElem) {\n        return;\n      }\n      this.animateButton(this.$refs.betButton);\n      setTimeout(() => {\n        this.setBet();\n      });\n    },\n    getCountOfScore(i) {\n      if (i === 13) {\n        return this.$t(`+1 или 11 очков`);\n      }\n      if (i > 9) {\n        return `+${10} ${this.$t(\"очков\")}`;\n      }\n      if (i > 3) {\n        return `+${i + 1} ${this.$t(\"очков\")}`;\n      }\n      return `+${i + 1} ${this.$t(\"очка\")}`;\n    },\n    onKeyUp(e) {\n      if (e.keyCode === 73) {\n        this.isShowHelpModal = !this.isShowHelpModal;\n        return;\n      }\n      if (e.keyCode === 13) {\n        this.onSubmit();\n      }\n      if (e.keyCode === 69) {\n        if (!this.isShowModal) {\n          this.close();\n        }\n        return;\n      }\n      const bindKeyCode = {\n        65: \"a\",\n        83: \"s\",\n        68: \"d\",\n        70: \"f\"\n      };\n      const index = this.bindKeys.indexOf(bindKeyCode[e.keyCode]);\n      if (index !== -1) {\n        const action = this.gameData.actionList[index];\n        if (action) {\n          this.animateButton(this.$refs[action][0]);\n          this.gameAction(action);\n        }\n      }\n    },\n    animateButton(elem) {\n      elem.animate([{\n        transform: \"scale(1)\"\n      }, {\n        transform: \"scale(0.8)\"\n      }, {\n        transform: \"scale(1)\"\n      }], {\n        duration: 300\n      });\n    },\n    gameAction(action) {\n      if (this.actionModalType) {\n        return;\n      }\n      this.$refs.onActionSound.currentTime = 0;\n      this.$refs.onActionSound.play();\n      this.actionModalType = action;\n      setTimeout(() => this.actionModalType = \"\", 800);\n      this.$callClient(\"C:BlackJack:Action\", action);\n    },\n    getImgPath(i) {\n      const bindCards = {\n        11: \"J\",\n        12: \"Q\",\n        13: \"K\",\n        14: \"A\"\n      };\n      return require(`./Assets/Cards/icon_card-${bindCards[i] || i}.png`);\n    },\n    setBetData(betData) {\n      this.betData = betData;\n    },\n    updateTimer(time) {\n      this.gameData.timer = time;\n    },\n    playStatusSound(status) {\n      this.$refs[this.animData[status].soundName].play();\n    },\n    updateGameData(data) {\n      this.gameData = data;\n      if (Object.keys(this.animData).includes(data.gameStatus)) {\n        this.isShowAnim = true;\n        this.gameStatus = data.gameStatus;\n        this.lastBetData = data.bet;\n        setTimeout(() => {\n          this.isShowAnim = false;\n        }, 5000);\n        this.playStatusSound(data.gameStatus);\n      }\n      if (data.gameStatus === \"bet\") {\n        setTimeout(() => {\n          this.$refs.betInput.focus();\n        }, 500);\n      }\n    }\n  },\n  components: {\n    BlackJackButton,\n    Glow\n  },\n  mounted() {\n    this.$onClient(\"C:BlackJack:UpdateGameData\", this.updateGameData);\n    this.$onClient(\"C:BlackJack:UpdateTimer\", this.updateTimer);\n    this.$onClient(\"C:BlackJack:SetBetData\", this.setBetData);\n    this.$callClient(\"C:BlackJack:Ready\");\n    window.addEventListener(\"keyup\", this.onKeyUp);\n    const gameData = {\n      scoreData: {\n        dealer: 0,\n        hand: 21\n      },\n      timer: 50,\n      bet: 500,\n      playerBalance: 3150,\n      actionList: [\"hit\", \"stand\"],\n      gameStatus: \"wait\"\n    };\n    const gameData2 = {\n      scoreData: {\n        dealer: 0,\n        hand: {\n          1: 21,\n          2: 1\n        }\n      },\n      timer: 50,\n      bet: 0,\n      currentHand: 2,\n      playerBalance: 3250,\n      actionList: [\"hit\", \"stand\"],\n      gameStatus: \"wait\"\n    };\n    const gameData3 = {\n      scoreData: {\n        dealer: 0,\n        hand: {\n          1: 21,\n          2: 8\n        }\n      },\n      timer: 50,\n      bet: 0,\n      currentHand: 1,\n      playerBalance: 3250,\n      actionList: [\"hit\", \"stand\", \"stand\", \"split\"],\n      gameStatus: \"action\"\n    };\n    // this.updateGameData(gameData);\n    // setTimeout(() => {\n    //   this.updateGameData(gameData2);\n    // }, 1000);\n    // setTimeout(() => {\n    //   this.updateGameData(gameData3);\n    // }, 2000);\n  },\n  beforeUnmount() {\n    this.$offClient(\"C:BlackJack:UpdateGameData\", this.updateGameData);\n    this.$offClient(\"C:BlackJack:UpdateTimer\", this.updateTimer);\n    this.$offClient(\"C:BlackJack:SetBetData\", this.setBetData);\n    window.removeEventListener(\"keyup\", this.onKeyUp);\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}