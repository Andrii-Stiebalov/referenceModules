{"ast":null,"code":"import { drawLine, clearCanvas } from \"../../Assets/Canvas/exchange_canvas.js\";\nexport default {\n  data() {\n    return {\n      businessItems: {\n        Stock: {\n          Name: \"Ёмкость склада\",\n          IconName: \"Stock\",\n          Data: [\"Stock\", \"StockMax\"]\n        },\n        Rent: {\n          Name: \"Аренда\",\n          IconName: \"Calendar\",\n          Data: [\"RentDayPassed\", \"RentDayAll\"]\n        },\n        Mafia: {\n          Name: \"Крыша\",\n          IconName: \"Mafia\"\n        },\n        Tax: {\n          Name: \"Аренда в сутка\",\n          IconName: \"Tax\"\n        },\n        Precent: {\n          Name: \"Наценка\",\n          IconName: \"Precent\"\n        }\n      },\n      deagramInfo: null\n    };\n  },\n  props: {\n    onHoverProperty: Object\n  },\n  methods: {\n    setDeagramInfo(e, money) {\n      const offset = e.toElement.getBoundingClientRect();\n      const deagramInfoWidth = document.querySelector(\"#deagramInfo\").offsetWidth;\n      this.deagramInfo = {\n        top: offset.y - deagramInfoWidth * 1.25 + \"px\",\n        left: offset.left - deagramInfoWidth / 2 + offset.width / 2 + \"px\",\n        money\n      };\n    },\n    convertToMoneyFormat(numb) {\n      return new Intl.NumberFormat(\"de-DE\").format(numb) + \"$\";\n    },\n    calculatingLevelLenght(money) {\n      const maxHeight = 12.5 - 2;\n      const procent = money / this.maxMoney || 0;\n      return maxHeight * procent + \"rem\";\n    },\n    calculatingMinMax(history) {\n      this.maxMoney = history.reduce((max, {\n        money\n      }) => {\n        return +money > +max ? money : max;\n      }, 0);\n      this.minMoney = history.reduce((min, {\n        money\n      }) => {\n        return +money < +min ? money : min;\n      }, 0);\n    }\n  },\n  watch: {\n    onHoverProperty() {\n      this.calculatingMinMax(this.onHoverProperty.Schedules);\n      const draw = setInterval(() => {\n        clearCanvas();\n        drawLine();\n      }, 1);\n      setTimeout(() => {\n        clearInterval(draw);\n      }, 350);\n    }\n  },\n  unmounted() {\n    clearCanvas();\n  },\n  beforeMount() {\n    this.calculatingMinMax(this.onHoverProperty.Schedules);\n  },\n  mounted() {\n    drawLine();\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}