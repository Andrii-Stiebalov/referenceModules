{"ast":null,"code":"import recursiveAssing from \"@/Functions/RecursiveAssign\";\nimport SMPPlayerItem from \"./Components/SMP-PlayerItem.vue\";\nimport SMPStorageItem from \"./Components/SMP-StorageItem.vue\";\nimport MPModal from \"../MarketPlace/Components/MP-Modal/MP-Modal.vue\";\nexport default {\n  components: {\n    SMPPlayerItem,\n    SMPStorageItem,\n    MPModal\n  },\n  data() {\n    return {\n      selectedNavItem: null,\n      playerItems: {},\n      navItemNames: {\n        inventory: \"Мій інвентар\",\n        bag: \"Рюкзак\",\n        trunk: \"Багажник\"\n      },\n      modalData: {\n        item: null,\n        type: null\n      }\n    };\n  },\n  methods: {\n    selectNavItem(navItem) {\n      this.selectedNavItem = navItem;\n    },\n    setData(data) {\n      recursiveAssing(data, this.playerItems, true);\n    },\n    onUnload(modalData) {\n      this.modalData = modalData;\n    },\n    onPut(itemData) {\n      if (itemData?.count) {\n        itemData.section = this.selectedNavItem;\n        this.$store.commit(\"marketPlace/openModal\", [itemData, \"stockPut\"]);\n      } else {\n        this.$callClient(\"C:MarketPlaceStock:Put\", itemData.id, 1, this.selectedNavItem);\n      }\n    },\n    playerItemsDelete(itemId, section) {\n      const filtered = this.playerItems[section].filter(item => item.id !== itemId);\n      this.playerItems[section] = filtered;\n    },\n    playerItemsEdit(itemId, section, leftCount) {\n      const item = this.playerItems[section].find(item => item.id === itemId);\n      if (item) {\n        item.count = leftCount;\n      }\n    },\n    playerItemsAdd(item, section) {\n      this.playerItems[section].push(item);\n    },\n    onClose() {\n      this.$callClient(\"C:MarketPlaceStorage:Close\");\n      this.$store.commit(\"marketPlace/closeModal\");\n    },\n    onCloseKeyboard(event) {\n      if (event.key === \"Escape\") {\n        this.onClose();\n      }\n    }\n  },\n  computed: {\n    getNavList() {\n      if (Object.prototype.toString.call(this.playerItems) === \"[object Object]\") {\n        const navItems = [];\n        Object.keys(this.playerItems).forEach(key => {\n          if (this.playerItems[key]?.length) {\n            navItems.push({\n              name: this.$t(this.navItemNames[key]) || \"\",\n              value: key\n            });\n          }\n        });\n        return navItems;\n      } else {\n        return [];\n      }\n    },\n    getPlayerItems() {\n      if (this.selectedNavItem) {\n        return this.playerItems[this.selectedNavItem];\n      }\n      return [];\n    },\n    getStorageItems() {\n      return this.$store.getters[\"marketPlace/getCardsList\"](\"stock\");\n    },\n    getModalData() {\n      return this.$store.getters[\"marketPlace/getModalData\"];\n    }\n  },\n  watch: {\n    \"getNavList.length\": {\n      handler(newVal) {\n        if (newVal) {\n          this.selectNavItem(this.getNavList[0].value);\n        }\n      },\n      immediate: true\n    }\n  },\n  mounted() {\n    this.$onClient(\"W:MarketPlaceStock:SetData\", this.setData);\n    this.$onClient(\"W:MarketPlaceStock:Delete\", this.playerItemsDelete);\n    this.$onClient(\"W:MarketPlaceStock:Add\", this.playerItemsAdd);\n    this.$onClient(\"W:MarketPlaceStock:Edit\", this.playerItemsEdit);\n    this.$callClient(\"C:MarketPlaceStock:Ready\");\n    window.addEventListener(\"keyup\", this.onCloseKeyboard);\n  },\n  beforeUnmount() {\n    this.$offClient(\"W:MarketPlaceStock:SetData\", this.setData);\n    this.$offClient(\"W:MarketPlaceStock:Delete\", this.playerItemsDelete);\n    this.$offClient(\"W:MarketPlaceStock:Add\", this.playerItemsAdd);\n    this.$offClient(\"W:MarketPlaceStock:Edit\", this.playerItemsEdit);\n    this.$store.commit(\"marketPlace/closeModal\");\n    window.removeEventListener(\"keyup\", this.onCloseKeyboard);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}