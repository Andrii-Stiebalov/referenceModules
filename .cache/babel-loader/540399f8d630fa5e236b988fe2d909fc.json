{"ast":null,"code":"export default {\n  data() {\n    return {\n      setOfKeysName: \"\",\n      setOfKeysNewName: \"\",\n      isShowRename: false,\n      selectedKeys: [],\n      listOfKeys: []\n    };\n  },\n  methods: {\n    toggleSetKey(key, index, isAdd) {\n      if (!isAdd) {\n        this.$callClient(\"C:SetOfKeys:Remove\", index);\n        return;\n      }\n      if (!(Object.keys(this.selectedKeys).length < 20)) {\n        return;\n      }\n      this.$callClient(\"C:SetOfKeys:Add\", key);\n    },\n    updateSelectedKeys(data) {\n      this.selectedKeys = data;\n    },\n    setData(setOfKeysName, selectedKeys, listOfKeys) {\n      console.log(selectedKeys, listOfKeys);\n      this.setOfKeysName = setOfKeysName || \"\";\n      this.setOfKeysNewName = setOfKeysName || \"\";\n      this.selectedKeys = selectedKeys || [];\n      this.listOfKeys = listOfKeys || [];\n    },\n    validateNewName(e) {\n      let validateValue = e.target.value.replace(/[^a-zA-Zа-яА-ЯіІїЇєЄ0-9\\s-]/g, \"\").slice(0, 15).replace(\"і\", \"i\").replace(\"І\", \"I\");\n      this.setOfKeysNewName = validateValue;\n    },\n    getNameFormKey(str) {\n      const regex = /\\[(.*?)\\]/;\n      const matches = regex.exec(str);\n      return matches[1];\n    },\n    checkValidValue() {\n      console.log(this.setOfKeysNewName !== this.setOfKeysName && this.setOfKeysNewName.length);\n      return this.setOfKeysNewName !== this.setOfKeysName && this.setOfKeysNewName.length;\n    },\n    close() {\n      this.$callClient(\"C:SetOfKeys:CloseBundle\");\n    },\n    setNewName(value) {\n      if (!value) {\n        this.isShowRename = false;\n        return;\n      }\n      this.setOfKeysName = this.setOfKeysNewName;\n      this.isShowRename = false;\n      this.$callClient(\"C:SetOfKeys:RenameBundle\", this.setOfKeysNewName);\n    }\n  },\n  computed: {\n    listOfUUID() {\n      return Object.values(this.selectedKeys)?.map(key => key.UUID);\n    }\n  },\n  mounted() {\n    this.$onClient(\"W:SetOfKeys:setData\", this.setData);\n    this.$onClient(\"W:SetOfKeys:UpdateBundle\", this.updateSelectedKeys);\n    this.$callClient(\"C:SetOfKeys:Ready\");\n    // const data = {\n    //   setOfKeysName: \"Pipa\",\n    //   selectedKeys: {\n    //     1: {\n    //       Type: \"CarKey\",\n    //       Count: 1,\n    //       Data: \"67890_12\",\n    //       Name: \"Ключи от машины [XYZ789]\",\n    //       Weight: 0.5,\n    //       SlotID: 4,\n    //       UUID: 67890,\n    //       ImageID: 0,\n    //     },\n    //     2: {\n    //       Type: \"CarKey\",\n    //       Count: 1,\n    //       Data: \"12345_6\",\n    //       Name: \"Ключи от машины [ABC123]\",\n    //       Weight: 0.5,\n    //       SlotID: 3,\n    //       UUID: 12345,\n    //       ImageID: 0,\n    //     },\n    //   },\n    //   listOfKeys: {\n    //     1: {\n    //       Type: \"CarKey\",\n    //       Count: 1,\n    //       Data: \"12345_6\",\n    //       Datas: \"Bla\",\n    //       Name: \"Ключи от машины [ABC123]\",\n    //       Weight: 0.5,\n    //       SlotID: 3,\n    //       UUID: 19345,\n    //       ImageID: 0,\n    //     },\n    //     2: {\n    //       Type: \"CarKey\",\n    //       Count: 1,\n    //       Data: \"45678_9\",\n    //       Name: \"Ключи от машины [ZYX321]\",\n    //       Weight: 0.5,\n    //       SlotID: 5,\n    //       UUID: 45678,\n    //       ImageID: 0,\n    //     },\n    //   },\n    // };\n    // this.setData(data.setOfKeysName, data.selectedKeys, data.listOfKeys);\n  },\n  beforeMount() {\n    this.$offClient(\"W:SetOfKeys:setData\", this.setData);\n    this.$offClient(\"W:SetOfKeys:UpdateBundle\", this.updateSelectedKeys);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}