{"ast":null,"code":"export function hexToHsv(hex) {\n  // Remove the # if it's there\n  hex = hex.replace(\"#\", \"\");\n\n  // Convert hex to RGB\n  let r = parseInt(hex.substring(0, 2), 16) / 255;\n  let g = parseInt(hex.substring(2, 4), 16) / 255;\n  let b = parseInt(hex.substring(4, 6), 16) / 255;\n\n  // Find min and max values of RGB\n  let max = Math.max(r, g, b);\n  let min = Math.min(r, g, b);\n  let h,\n    s,\n    v = max;\n  let delta = max - min;\n\n  // Calculate saturation\n  if (max !== 0) {\n    s = delta / max;\n  } else {\n    // r = g = b = 0\n    s = 0;\n    h = -1;\n    return [h, s, v];\n  }\n\n  // Calculate hue\n  if (r === max) {\n    h = (g - b) / delta;\n  } else if (g === max) {\n    h = 2 + (b - r) / delta;\n  } else {\n    h = 4 + (r - g) / delta;\n  }\n\n  // Convert hue to degrees\n  h *= 60;\n  if (h < 0) {\n    h += 360;\n  }\n  return [h / 360, s, v].map(item => {\n    if (item > 1) return 1;\n    if (item < 0) return 0;\n    console.log(item);\n    return item;\n  });\n}\nexport function hsvToHex(h, s, v) {\n  let [r, g, b] = hsvToRgb(h, s, v);\n  const rgbToHex = c => {\n    const hex = Math.round(c).toString(16);\n    return hex.length === 1 ? \"0\" + hex : hex;\n  };\n  const hexColor = \"#\" + rgbToHex(r) + rgbToHex(g) + rgbToHex(b);\n  return hexColor.toUpperCase();\n}\nexport function hsvToRgb(h, s, v) {\n  h = h < 0 ? 0 : h > 1 ? 1 : h;\n  s = s < 0 ? 0 : s > 1 ? 1 : s;\n  v = v < 0 ? 0 : v > 1 ? 1 : v;\n  let r, g, b;\n  const i = Math.floor(h * 6);\n  const f = h * 6 - i;\n  const p = v * (1 - s);\n  const q = v * (1 - f * s);\n  const t = v * (1 - (1 - f) * s);\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n  return [r * 255, g * 255, b * 255];\n}","map":null,"metadata":{},"sourceType":"module"}