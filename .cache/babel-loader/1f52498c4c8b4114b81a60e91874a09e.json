{"ast":null,"code":"export default {\n  props: {\n    min: {\n      type: Number,\n      default: 0\n    },\n    max: {\n      type: Number,\n      default: 100\n    },\n    value: {\n      type: [Number, String],\n      default: 0\n    },\n    step: {\n      type: Number,\n      default: 0\n    },\n    isHaveInner: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      thumbWidth: 0,\n      oneDivision: 0,\n      containerWidth: 0,\n      containerX: 0,\n      innerValue: 0\n    };\n  },\n  computed: {\n    setPosition() {\n      if (this.oneDivision !== 0) {\n        return `left:${this.step === 0 ? Math.round(this.oneDivision * (this.innerValue - this.min) + this.thumbWidth / 2) : Math.round(this.oneDivision * this.innerValue / this.step + this.thumbWidth / 2)}px`;\n      }\n      return \"0px\";\n    },\n    setInnerPosition() {\n      if (this.oneDivision !== 0) {\n        return `width:${this.step === 0 ? Math.round(this.oneDivision * (this.innerValue - this.min) + this.thumbWidth / 2) : Math.round(this.oneDivision * this.innerValue / this.step + this.thumbWidth / 2)}px`;\n      }\n      return \"0px\";\n    }\n  },\n  methods: {\n    onMouseDown() {\n      window.addEventListener(\"mousemove\", this.onMouseMove);\n      window.addEventListener(\"mouseup\", this.onMouseUp);\n    },\n    onMouseMove(e) {\n      let currentLeft = e.clientX - this.containerX - this.thumbWidth / 2 <= 0 ? 0 : e.clientX - this.containerX - this.thumbWidth / 2 >= this.containerWidth - this.thumbWidth ? this.containerWidth - this.thumbWidth : e.clientX - this.containerX - this.thumbWidth / 2;\n      let newValue = this.step === 0 ? Math.ceil(currentLeft / this.oneDivision) : Math.round(currentLeft / this.oneDivision) * this.step;\n      newValue += this.min;\n      if (newValue !== this.innerValue) this.innerValue = newValue;\n      this.$emit(\"input\", this.innerValue);\n    },\n    onMouseUp() {\n      window.removeEventListener(\"mousemove\", this.onMouseMove);\n      window.removeEventListener(\"mouseup\", this.onMouseUp);\n    },\n    initSlider() {\n      if (this.value !== undefined) this.innerValue = this.value;\n      let {\n        width,\n        x\n      } = this.$el.getBoundingClientRect();\n      this.containerWidth = width;\n      this.containerX = x;\n      this.thumbWidth = this.$refs.thumb?.getBoundingClientRect()?.width;\n      this.oneDivision = this.step === 0 ? (this.containerWidth - this.thumbWidth) / (this.max - this.min) : (this.containerWidth - this.thumbWidth) / this.step;\n    },\n    onResize() {\n      this.initSlider();\n    }\n  },\n  watch: {\n    value: function (e) {\n      if (this.innerValue !== +e) this.innerValue = +e;\n    }\n  },\n  mounted() {\n    Array.from(this.$el.children).forEach(element => {\n      element.ondragstart = () => false;\n    });\n    window.addEventListener(\"resize\", this.onResize);\n    this.initSlider();\n  }\n};","map":null,"metadata":{},"sourceType":"module"}