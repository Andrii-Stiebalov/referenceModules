{"ast":null,"code":"import { mapGetters } from \"vuex\";\nimport InfoSection from \"../Components/InfoSection.vue\";\n// eslint-disable-next-line no-unused-vars\nimport infoModalsData from \"../../../../Assets/infoModalsData\";\nexport default {\n  data() {\n    return {\n      infoModalsData,\n      selectedRank: null,\n      isActive: false,\n      isShowRenameModal: false,\n      isInputOnFocus: false,\n      newRankName: \"\",\n      isValidNewRankName: false,\n      isCreateNewRank: false,\n      newRank: {}\n    };\n  },\n  computed: {\n    ...mapGetters(\"family\", {\n      rankList: \"getRankList\",\n      allPermissions: \"getAllPermissions\",\n      playerPermissions: \"getPlayerPermissions\"\n    })\n  },\n  methods: {\n    addRank() {\n      if (this.rankList.some(rank => rank.RankName === \"Новый ранг\")) {\n        return;\n      }\n      const maxId = this.rankList.reduce((max, rank) => {\n        return rank.Id > max ? rank.Id : max;\n      }, 0);\n      const emptyRank = {\n        Id: maxId + 1,\n        RankName: \"Новый ранг\",\n        RankPermissions: [],\n        PayDay: 0,\n        Priority: 1\n      };\n      // this.$callClient(\"C:Family:Tablet:Action\", \"CreateRank\", emptyRank);\n      // this.rankList.push(emptyRank);\n      this.newRank = emptyRank;\n      this.isCreateNewRank = true;\n      this.isShowRenameModal = true;\n    },\n    checkPermisions(perm) {\n      return this.playerPermissions.includes(perm);\n    },\n    savePermisions() {\n      this.$callClient(\"C:Family:Tablet:Action\", \"EditRank\", this.selectedRank);\n    },\n    validateInput() {\n      this.selectedRank.PayDay = this.selectedRank.PayDay.replace(/[^\\d]/g, \"\");\n    },\n    movePriority(type) {\n      if (type === \"-\" && this.selectedRank.Priority > 1) {\n        this.selectedRank.Priority--;\n      } else if (type === \"+\" && this.selectedRank.Priority < 20) {\n        this.selectedRank.Priority++;\n      }\n    },\n    renameRank() {\n      if (!this.isValidNewRankName) {\n        return;\n      }\n      if (this.isCreateNewRank) {\n        this.$callClient(\"C:Family:Tablet:Action\", \"CreateRank\", {\n          ...this.newRank,\n          RankName: this.newRankName\n        });\n        this.isCreateNewRank = false;\n      } else {\n        this.$callClient(\"C:Family:Tablet:Action\", \"ChangeRankName\", {\n          RankId: this.selectedRank.Id,\n          RankName: this.newRankName\n        });\n      }\n      this.newRankName = \"\";\n      this.isShowRenameModal = false;\n    },\n    removeRank() {\n      const UniversalModalData = {\n        title: this.$t(\"Удаление ранга\"),\n        content: [{\n          type: \"description\",\n          value: this.$t(`Вы действительно хотите удалить ранг <span>{0}<span>?`, [this.selectedRank.RankName])\n        }],\n        buttons: {\n          submit: {\n            name: this.$t(\"Да\"),\n            handler: () => this.$callClient(\"C:Family:Tablet:Action\", \"DeleteRank\", {\n              RankId: this.selectedRank.Id\n            })\n          },\n          cansel: {\n            name: this.$t(\"Отмена\")\n          }\n        }\n      };\n      this.$UniversalModal.create(UniversalModalData);\n    },\n    cancelRename() {\n      this.isShowRenameModal = false;\n      this.isCreateNewRank = false;\n      this.newRankName = \"\";\n    },\n    resizeInput(inputId, e) {\n      const input = document.querySelector(`#${inputId}`);\n      const value = e.input.target.value;\n      input.style.width = value.length + \"ch\";\n    }\n  },\n  components: {\n    InfoSection\n  },\n  watch: {\n    newRankName(newName) {\n      if (newName && newName.length < 27) {\n        this.isValidNewRankName = true;\n        return;\n      }\n      this.isValidNewRankName = false;\n      return;\n    }\n  },\n  mounted() {\n    this.selectedRank = this.rankList[0];\n    this.isActive = true;\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}