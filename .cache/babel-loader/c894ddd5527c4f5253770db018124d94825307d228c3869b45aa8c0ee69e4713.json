{"ast":null,"code":"import GetSVGIcons from \"./Components/GetSVGIcons.vue\";\nimport CdnResolverImage from \"../../../Components/CdnResolverImage.vue\";\nexport default {\n  data() {\n    return {\n      maxParams: {},\n      carItems: {\n        engine: {\n          Name: \"Двигатель\",\n          Max: 4,\n          IconName: \"Engine\"\n        },\n        brakes: {\n          Name: \"Тормоза\",\n          Max: 3,\n          IconName: \"Brakes\"\n        },\n        transmission: {\n          Name: \"Трансмиссия\",\n          Max: 3,\n          IconName: \"Transmission\"\n        },\n        suspension: {\n          Name: \"Подвеска\",\n          Max: 5,\n          IconName: \"Suspension\"\n        },\n        turbo: {\n          Name: \"Турбонаддув\",\n          Max: 3,\n          IconName: \"Turbo\"\n        }\n      },\n      inputValue: \"\",\n      scaleIconProcent: null,\n      isActive: false,\n      price: \"\",\n      carItemList: [\n        // {\n        //   UUID: 1,\n        //   ownername: \"Имя_игрока\",\n        //   number: \"ABC123\",\n        //   carname: \"Comet Modals CLASSDf\",\n        //   engine: 1,\n        //   brakes: 2,\n        //   transmission: 1,\n        //   suspension: 1,\n        //   turbo: true,\n        //   sellPrice: 50000,\n        //   image: \"stelvio.png\",\n        // },\n        // {\n        //   UUID: 1,\n        //   ownername: \"Имя_игрока\",\n        //   number: \"ABC123\",\n        //   carname: \"Comet\",\n        //   engine: 1,\n        //   brakes: 2,\n        //   transmission: 1,\n        //   suspension: 1,\n        //   turbo: true,\n        //   sellPrice: 50000,\n        //   image: \"bmwe38.png\",\n        // },\n        // {\n        //   UUID: 1,\n        //   ownername: \"Имя_игрока\",\n        //   number: \"ABC123\",\n        //   carname: \"Comet\",\n        //   engine: 1,\n        //   brakes: 2,\n        //   transmission: 1,\n        //   suspension: 1,\n        //   turbo: true,\n        //   sellPrice: 50000,\n        //   image: \"c63wagon.png\",\n        // },\n        // {\n        //   UUID: 2,\n        //   ownername: \"Имя_игрока\",\n        //   number: \"XYZ789\",\n        //   carname: \"Elegy\",\n        //   engine: 4,\n        //   brakes: 1,\n        //   transmission: 1,\n        //   suspension: 0,\n        //   turbo: 2,\n        //   sellPrice: 45000,\n        //   image: \"asea.png\",\n        // },\n      ],\n      selectedIndex: -1,\n      carItem: null,\n      isValid: false\n    };\n  },\n  components: {\n    GetSVGIcons,\n    CdnResolverImage\n  },\n  watch: {\n    selectedIndex(val) {\n      this.carItem = this.carItemList[val];\n    }\n  },\n  computed: {\n    model() {\n      const arr = this.carItem.carname.split(\" \");\n      arr.shift();\n      return arr.join(\" \");\n    }\n  },\n  methods: {\n    // setDinamicGradient(e) {\n    //   const rect = document\n    //     .querySelector(\".UniversalModal__border\")\n    //     .getBoundingClientRect();\n    //   const x = (e.clientX - rect.left) / rect.width;\n    //   const y = (e.clientY - rect.top) / rect.height;\n    //   const gradient = `radial-gradient(\n    //     ${x * 100}%  ${y * 100}% at ${x * 100}%  ${y * 100}%,\n    //     rgba(84, 115, 120, 0.1) 0%,\n    //     rgba(84, 115, 120, 0) 100%\n    //   ),\n    //   #151d1e`;\n    //   const bindGradient = {\n    //     red: `radial-gradient(circle at ${x * 100}% ${\n    //       y * 100\n    //     }%, #EA384D, #D31027)`,\n    //     yellow: `radial-gradient(circle at ${x * 100}% ${\n    //       y * 100\n    //     }%, #F9D423, #E65C00)`,\n    //     purple: `radial-gradient(circle at ${x * 100}% ${\n    //       y * 100\n    //     }%, #DA22FF, #9733EE )`,\n    //     green: `radial-gradient(circle at ${x * 100}% ${\n    //       y * 100\n    //     }%, #00CDAC, #02AAB0)`,\n    //     blue: `radial-gradient(circle at ${x * 100}% ${\n    //       y * 100\n    //     }%, #4776E6, #8E54E9 )`,\n    //   };\n    //   document.querySelector(\".UniversalModal__border\").style.background =\n    //     gradient;\n    //   console.log(e.target, e.target.style.background);\n    // },\n    getCountOf(count, max) {\n      if (!+count) {\n        return this.$t(\"отсутствует\");\n      } else if (count == max) {\n        return \"MAX\";\n      }\n      return `${count}/${max}`;\n    },\n    validValue(e) {\n      const value = e.target.value;\n      const numericRegex = /\\D/g;\n      this.inputValue = value.replace(numericRegex, \"\");\n      if (this.carItem.govPrice == 1) {\n        if (+this.inputValue > this.carItem.govPrice / 2 && this.inputValue < 100000000) {\n          this.isValid = true;\n        } else {\n          this.isValid = false;\n        }\n        return;\n      }\n      if (+this.inputValue > this.carItem.govPrice / 2 && this.inputValue < this.carItem.govPrice * 5) {\n        this.isValid = true;\n      } else {\n        this.isValid = false;\n      }\n    },\n    setSaleData(data, engine, brakes, transmission, suspension, turbo, price) {\n      this.carItem = data;\n      this.price = price || 0;\n      this.maxParams = {\n        engine,\n        brakes,\n        transmission,\n        suspension,\n        turbo\n      };\n    },\n    showSellModal() {\n      console.log(this.selectedIndex);\n      if (!this.inputValue || !this.isValid) {\n        this.$Notification.create({\n          type: \"error\",\n          layout: \"compact-bottom__right\",\n          theme: \"compact\",\n          time: 5000,\n          text: `\n                  <div class=\"notification-text__item\">\n                      <div class=\"notification-text__item-title\">\n                          <span>${this.$t(\"Ошибка\")}</span>\n                      </div>\n                      <div class=\"notification-text__item-subtitle\">\n                          <span>${this.$t(\"Цена вне рыночного диапазона\")}</span>\n                      </div>\n                  </div>\n                  <div class=\"notification-text__item\">\n                      <div class=\"notification-text__item-icon\">\n                          <span class=\"icon-error\"></span>\n                      </div>\n                  </div>\n              `,\n          progressBar: false\n        });\n        return;\n      }\n      const selectedUUID = this.carItem.UUID;\n      const UniversalModalData = {\n        title: this.$t(\"Выставить на продажу\"),\n        content: [{\n          type: \"description\",\n          value: this.$t(\"Подтвердить и внести оплату за размещение на авторынке {0}$?\", [this.price])\n        }],\n        buttons: {\n          submit: {\n            name: this.$t(\"Выставить\"),\n            handler: () => {\n              this.$callClient(\"S:SaleCars:OccupySaleSlot\", selectedUUID, this.inputValue, ...Object.values(this.maxParams));\n            }\n          },\n          cansel: {\n            name: this.$t(\"Отмена\")\n          }\n        }\n      };\n      this.$UniversalModal.create(UniversalModalData);\n    },\n    getDataFromState(title) {\n      return this.$store.getters[\"universalModal/getFormModalDataByTitle\"](title);\n    },\n    showBuyModal() {\n      const selectedUUID = this.carItem.UUID;\n      let UniversalModalData = {\n        title: this.$t(\"Купить транспорт\"),\n        content: [{\n          type: \"description\",\n          value: this.$t(\"Подтвердить покупку?\")\n        }],\n        buttons: {\n          submit: {\n            name: this.$t(\"Да\"),\n            handler: () => {\n              this.$callClient(\"S:SaleCars:BuyCarOnMarket\", selectedUUID);\n            }\n          },\n          cansel: {\n            name: this.$t(\"Отмена\")\n          }\n        }\n      };\n      if (this.carItem.isOwner) {\n        UniversalModalData = {\n          title: this.$t(\"Снять с продажи\"),\n          content: [{\n            type: \"description\",\n            value: this.$t(\"Подтвердить снятие с продажи?\")\n          }],\n          buttons: {\n            submit: {\n              name: this.$t(\"Да\"),\n              handler: () => {\n                this.$callClient(\"S:SaleCars:RemoveCarFromMarket\");\n              }\n            },\n            cansel: {\n              name: this.$t(\"Отмена\")\n            }\n          }\n        };\n      }\n      this.$UniversalModal.create(UniversalModalData);\n    },\n    setScaleIconProcent() {\n      const fontSize = getComputedStyle(document.documentElement).fontSize;\n      const size = fontSize.slice(0, -2);\n      this.scaleIconProcent = +size / 10;\n    },\n    getStrokeDashoffset(count, max) {\n      const procent = count / max * 100;\n      return 100 - procent;\n    },\n    convertToMoneyFormat(numb) {\n      return new Intl.NumberFormat(\"de-DE\").format(numb).replace(/\\./g, \" \") + \" $\";\n    },\n    moveSelectedIndex(type) {\n      if (type == \"+\") {\n        if (this.selectedIndex === this.carItemList.length - 1) {\n          this.selectedIndex = 0;\n          return;\n        }\n        this.selectedIndex++;\n      } else {\n        if (this.selectedIndex === 0) {\n          this.selectedIndex = this.carItemList.length - 1;\n          return;\n        }\n        this.selectedIndex--;\n      }\n    },\n    calculatingRangeInnerWidth(value, maxValue) {\n      let rangeValue = value;\n      const maxWidth = 21;\n      if (value > maxValue) {\n        rangeValue = maxValue;\n      }\n      const procent = rangeValue / maxValue;\n      return procent * maxWidth + \"rem\";\n    },\n    setCarItem(data) {\n      this.carItem = data;\n    },\n    closeApp() {\n      this.$callClient(\"C:SaleCars:Close\");\n    },\n    setData() {}\n  },\n  mounted() {\n    window.addEventListener(\"resize\", this.setScaleIconProcent);\n    this.setScaleIconProcent();\n    // const data = {\n    //   UUID: 2,\n    //   ownername: \"Имя_игрока\",\n    //   number: \"XYZ789\",\n    //   carname: \"Elegy\",\n    //   engine: 1,\n    //   brakes: 1,\n    //   transmission: 1,\n    //   suspension: 1,\n    //   phone: -1,\n    //   turbo: 1,\n    //   sellPrice: 45000,\n    //   govPrice: 5000,\n    // };\n    if (this.$route.params.step === \"2\") {\n      this.$onClient(\"C:SaleCars:SaleMenuOpen\", this.setSaleData);\n    } else {\n      this.$onClient(\"C:SaleCars:BuyMenuOpen\", this.setSaleData);\n    }\n    // this.setSaleData(data);\n    this.$callClient(\"C:SaleCars:Ready\");\n    this.isActive = true;\n  },\n  beforeUnmount() {\n    window.removeEventListener(\"resize\", this.setScaleIconProcent);\n    this.$offClient(\"C:SaleCars:SaleMenuOpen\", this.setSaleData);\n    this.$offClient(\"C:SaleCars:BuyMenuOpen\", this.setSaleData);\n    this.setScaleIconProcent();\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}