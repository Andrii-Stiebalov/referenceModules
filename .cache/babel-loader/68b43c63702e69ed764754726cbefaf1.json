{"ast":null,"code":"import \"./Electrician.scss\";\nimport Valcoder from \"./Components/Valcoder.vue\";\nexport default {\n  components: {\n    Valcoder\n  },\n  data() {\n    return {\n      appActive: true,\n      amplitudeMin: 10,\n      amplitudeDivisionCount: 10,\n      amplitudeCurrentDivision: 0,\n      frequencyMin: 10,\n      frequencyDivisionCount: 10,\n      frequencyCurrentDivision: 0,\n      speed: 1,\n      time: 10000\n    };\n  },\n  methods: {\n    randomAmplitude() {\n      return Math.round(Math.random() * (this.amplitudeDivisionCount - 1)) + 1;\n    },\n    randomFrequency() {\n      return Math.round(Math.random() * (this.frequencyDivisionCount - 1)) + 1;\n    },\n    initAmplitude() {\n      this.amplitudeMax = Math.floor(this.oScreen.offsetHeight * 0.4);\n      this.amplitudeCoefficient = Math.floor((this.amplitudeMax - this.amplitudeMin) / this.amplitudeDivisionCount);\n      this.amplitudeMax = Math.floor(this.amplitudeMin + this.amplitudeCoefficient * this.amplitudeDivisionCount);\n    },\n    initFrequency() {\n      this.frequencyMax = Math.floor(this.oScreen.offsetWidth * 0.1);\n      this.frequencyCoefficient = Math.floor((this.frequencyMax - this.frequencyMin) / this.frequencyDivisionCount);\n      this.frequencyMax = Math.floor(this.frequencyMin + this.frequencyCoefficient * this.frequencyDivisionCount);\n    },\n    initOriginal() {\n      this.amplitudeOriginalCurrent = this.randomAmplitude();\n      this.frequencyOriginalCurrent = this.randomFrequency();\n    },\n    initCurrent() {\n      do {\n        this.amplitudeCurrentDivision = this.randomAmplitude();\n        this.frequencyCurrentDivision = this.randomFrequency();\n      } while (this.amplitudeCurrentDivision === this.amplitudeOriginalCurrent || this.frequencyCurrentDivision === this.frequencyOriginalCurrent);\n    },\n    draw() {\n      this.step += this.speed;\n      let context = this.oScreen.getContext(\"2d\");\n      context.clearRect(0, 0, this.oScreen.offsetWidth, this.oScreen.offsetHeight);\n      context.save();\n      this.drawPlot(this.amplitudeOriginalCurrent * this.amplitudeCoefficient, this.frequencyOriginalCurrent * this.frequencyCoefficient, `rgba(52, 201, 36, 1)`);\n      this.drawPlot(this.amplitudeCurrentDivision * this.amplitudeCoefficient, this.frequencyCurrentDivision * this.frequencyCoefficient, `rgba(249, 135, 21, 1)`);\n      this.drawMesh(`rgba(229, 255, 255, 0.05)`);\n    },\n    drawPlot(amplitude, frequency, style) {\n      let context = this.oScreen.getContext(\"2d\");\n      context.beginPath();\n      context.strokeStyle = style;\n      let x = 0;\n      let y = 0;\n      while (x <= this.oScreen.offsetWidth) {\n        y = this.oScreen.offsetHeight / 2 + amplitude * Math.sin((x + this.step) / frequency);\n        context.lineTo(x, y);\n        x++;\n      }\n      context.save();\n      context.stroke();\n      context.restore();\n    },\n    drawMesh(style) {\n      let context = this.oScreen.getContext(\"2d\");\n      let oneMeshCell = this.oScreen.offsetWidth / 8;\n      context.beginPath();\n      context.strokeStyle = style;\n      for (let i = 1; i < 8; i++) {\n        context.moveTo(i * oneMeshCell, 0);\n        context.lineTo(i * oneMeshCell, this.oScreen.offsetHeight);\n      }\n      let yCount = this.oScreen.offsetHeight / oneMeshCell;\n      let yBias = Math.floor((yCount - Math.floor(yCount)) / 2 * oneMeshCell);\n      context.moveTo(0, yBias);\n      context.lineTo(this.oScreen.offsetWidth, yBias);\n      for (let i = 1; i < Math.ceil(yCount); i++) {\n        context.moveTo(0, i * oneMeshCell + yBias);\n        context.lineTo(this.oScreen.offsetWidth, i * oneMeshCell + yBias);\n      }\n      context.save();\n      context.stroke();\n      context.restore();\n    },\n    timerLogic() {\n      /*if (!this.timer) {\r\n        this.timer = setInterval(() => {\r\n          if (this.time > 0) {\r\n            this.time -= 100;\r\n          } else {\r\n            this.buttonsActive = false;\r\n            clearInterval(this.timer);\r\n            this.setResult(false);\r\n          }\r\n        }, 100);\r\n      }*/\n    },\n    gameCheck() {\n      if (this.gameActive) {\n        if (this.amplitudeCurrentDivision === this.amplitudeOriginalCurrent && this.frequencyCurrentDivision === this.frequencyOriginalCurrent) {\n          this.buttonsActive = false;\n          clearInterval(this.timer);\n          this.setResult(true);\n        }\n      }\n    },\n    changeValue(type, event) {\n      this.timerLogic();\n      if (this.buttonsActive) {\n        let newValue = this[`${type}CurrentDivision`] + event;\n        if (newValue <= this[`${type}DivisionCount`] && newValue >= 1) {\n          this[`${type}CurrentDivision`] = newValue;\n        }\n      }\n      this.gameCheck();\n    },\n    setResult(result) {\n      this.gameActive = false;\n      this.$callClient(\"Electrician.GameResult\", result);\n    },\n    onKeyUp(e) {\n      if (e.keyCode === 27 && !window.isModalShow) this.setResult(false);\n    },\n    closeApp() {\n      this.$router.push({\n        name: \"HUD\"\n      });\n    }\n  },\n  mounted() {\n    this.oScreen = this.$refs.oScreen;\n    this.$refs.oScreen.width = this.oScreen.offsetWidth;\n    this.$refs.oScreen.height = this.oScreen.offsetHeight;\n    this.step = 1;\n    this.buttonsActive = true;\n    this.gameActive = true;\n    this.initAmplitude();\n    this.initFrequency();\n    this.initOriginal();\n    this.initCurrent();\n    window.addEventListener(\"keyup\", this.onKeyUp);\n    this.intervalID = setInterval(this.draw, 20);\n  },\n  beforeUnmount() {\n    window.removeEventListener(\"keyup\", this.onKeyUp);\n    clearInterval(this.intervalID);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}