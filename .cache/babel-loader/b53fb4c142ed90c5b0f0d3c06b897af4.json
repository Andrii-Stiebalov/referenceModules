{"ast":null,"code":"import BattlePassCard from \"../Components/BattlePass/BattlePassCard.vue\";\nimport BattlePassBg from \"../Components/BattlePass/BattlePassBg.vue\";\nimport Glow from \"../Components/OpenCaseGlow.vue\";\nimport CdnResolverImage from \"../../../../Components/CdnResolverImage.vue\";\nexport default {\n  components: {\n    BattlePassBg,\n    BattlePassCard,\n    CdnResolverImage,\n    Glow\n  },\n  data() {\n    return {\n      isShowTaskList: false,\n      scrollTransform: 0,\n      isShowListOfTasks: false,\n      listOfSelectedTasks: [],\n      selectedItem: null,\n      selectedItemData: null,\n      isDraging: false,\n      priviusStartPosition: 0,\n      startPositon: 0,\n      showItemTimer: null,\n      isShowItemModal: false,\n      colorIndex: 0,\n      bindRarity: {\n        1: \"#828282\",\n        2: \"#34c924\",\n        3: \"#2bd9d9\",\n        4: \"#a30eff\",\n        5: \"#ff5533\",\n        6: \"#ffcc4d\"\n      },\n      listOfTasks: [\n        // {\n        //   taskName: \"Поработать на лесопилке\",\n        //   reward: \"150\",\n        //   progress: \"10/20\",\n        // },\n        // {\n        //   taskName: \"Поработать на лесопилке\",\n        //   reward: \"150\",\n        //   progress: \"10/20\",\n        // },\n        // {\n        //   taskName: \"Поработать на лесопилке\",\n        //   reward: \"150\",\n        //   progress: \"10/20\",\n        // },\n        // {\n        //   taskName: \"Поработать на лесопилке\",\n        //   reward: \"150\",\n        //   progress: \"10/20\",\n        // },\n        // {\n        //   taskName: \"Поработать на лесопилке\",\n        //   reward: \"150\",\n        //   progress: \"10/20\",\n        // },\n        // {\n        //   taskName: \"Поработать на лесопилке\",\n        //   reward: \"150\",\n        //   progress: \"10/20\",\n        // },\n        // {\n        //   taskName: \"Поработать на лесопилке\",\n        //   reward: \"150\",\n        //   progress: \"10/20\",\n        // },\n        // {\n        //   taskName: \"Поработать на лесопилке\",\n        //   reward: \"150\",\n        //   progress: \"10/20\",\n        // },\n        // {\n        //   taskName: \"Поработать на лесопилке\",\n        //   reward: \"150\",\n        //   progress: \"10/20\",\n        // },\n      ]\n    };\n  },\n  computed: {\n    battlePassData() {\n      return this.$store.getters[\"playerMenu/getBattlePassData\"];\n    }\n  },\n  watch: {\n    isShowListOfTasks(val) {\n      if (!val) {\n        this.listOfSelectedTasks = [];\n      }\n    }\n  },\n  methods: {\n    GetImagePath(item, isModal) {\n      if (item.image.includes(\"cdn/\")) return item.image;\n      if (item.ObjectType == \"ClothesItemPrize\") {\n        let index = -1;\n        switch (item.ItemType) {\n          case \"Hat\":\n            index = -12;\n            break;\n          case \"Top\":\n            index = -11;\n            break;\n          case \"Leg\":\n            index = -4;\n            break;\n          case \"Feet\":\n            index = -6;\n            break;\n          case \"Accessories\":\n            index = -14;\n            break;\n          case \"Mask\":\n            index = -1;\n            break;\n          case \"Jewelry\":\n            index = -7;\n            break;\n          case \"Glasses\":\n            index = -13;\n            break;\n          case \"Backs\":\n            index = -20;\n            break;\n          case \"BodyArmor\":\n            index = -9;\n            break;\n        }\n        return `cdn/inventory/clothes/${index}/${item.image}${item.variation}_${item.colors[isModal ? this.colorIndex : 0]}.png`;\n      }\n      return `cdn/inventory/other/${item.image}.png`;\n    },\n    moveColorIndex(type) {\n      const colorsListLength = this.selectedItem.colors.length;\n      if (type === \"+\") {\n        if (this.colorIndex === colorsListLength - 1) {\n          this.colorIndex = 0;\n          return;\n        }\n        this.colorIndex++;\n      } else {\n        if (this.colorIndex === 0) {\n          this.colorIndex = colorsListLength - 1;\n          return;\n        }\n        this.colorIndex--;\n      }\n    },\n    onResetTasks() {\n      const UniversalModalData = {\n        title: this.$t(\"Пройти нові завдання\"),\n        content: [{\n          type: \"description\",\n          value: this.$t(\"Ви впевнені що хочете скинути прогрес завдань? У разі якщо є незавершені завдання, ви також втратите їх прогрес. Послуга безкоштовна та доступна раз в <span>6</span> годин.\")\n        }],\n        buttons: {\n          submit: {\n            name: this.$t(\"Да\"),\n            handler: () => {\n              this.$callClient(\"C:BattlePass:ResetTasks\");\n            }\n          },\n          cansel: {\n            name: this.$t(\"Отмена\"),\n            handler: () => {}\n          }\n        }\n      };\n      this.$UniversalModal.create(UniversalModalData);\n    },\n    goToCurrentLvl() {\n      const currentLevel = this.battlePassData.currentLevel;\n      if (currentLevel < 4) {\n        return;\n      }\n      const itemWidth = 25;\n      const items = this.$refs.itemsLists;\n      const fontSize = parseFloat(getComputedStyle(document.documentElement).fontSize);\n      const visibleAreaInRem = this.$el.clientWidth / fontSize;\n      this.scrollTransform = itemWidth * currentLevel - visibleAreaInRem / 2.5;\n      items.style.transform = `translateX(${-this.scrollTransform}rem)`;\n    },\n    hideModal(e) {\n      const elem = e.target;\n      if (!this.isElementInsideParent(elem, \"selectedItemModal\")) {\n        this.selectedItem = null;\n        this.isShowItemModal = false;\n      }\n    },\n    isElementInsideParent(element, parentId) {\n      if (element.id === parentId) {\n        return true;\n      }\n      if (element.parentElement) {\n        return this.isElementInsideParent(element.parentElement, parentId);\n      }\n      return false;\n    },\n    onMoveScroll(e) {\n      this.isDraging = true;\n      this.startPositon = e.clientX;\n    },\n    offMoveScroll() {\n      this.isDraging = false;\n      const items = this.$refs.itemsLists;\n      let lastDistanse = this.priviusStartPosition - this.startPositon;\n      items.style.transition = `transform ease 0.8s`;\n      const itemWidth = 25;\n      const countOfItems = this.battlePassData.prizes.length;\n      const widthOfAllItems = itemWidth * countOfItems;\n      if (this.priviusStartPosition) {\n        this.scrollTransform += lastDistanse;\n      }\n      if (this.scrollTransform > widthOfAllItems) {\n        this.scrollTransform = widthOfAllItems * 1.05;\n      } else if (this.scrollTransform < 0) {\n        this.scrollTransform = 0;\n      }\n\n      // console.log(this.scrollTransform);\n\n      items.style.transform = `translateX(${-this.scrollTransform}rem)`;\n      this.priviusStartPosition = 0;\n    },\n    onMoveingScroll(e) {\n      if (!this.isDraging) {\n        return;\n      }\n      this.isBeenMoving = true;\n      const items = this.$refs.itemsLists;\n      items.style.transition = `transform linear 0s`;\n      const fontSize = parseFloat(getComputedStyle(document.documentElement).fontSize);\n      this.priviusStartPosition = this.startPositon;\n      const distance = (e.clientX - this.startPositon) / fontSize;\n      this.startPositon = e.clientX;\n      this.scrollTransform = this.scrollTransform - distance;\n      items.style.transform = `translateX(${-this.scrollTransform}rem)`;\n    },\n    onWheel(e) {\n      const items = this.$refs.itemsLists;\n      const itemWidth = 25;\n      const countOfItems = this.battlePassData.prizes.length;\n      const widthOfAllItems = itemWidth * countOfItems;\n      const fontSize = parseFloat(getComputedStyle(document.documentElement).fontSize);\n      const visibleAreaInRem = this.$el.clientWidth / fontSize;\n      const scrollStepInRem = visibleAreaInRem * 0.13;\n      if (e.deltaY < 0) {\n        this.scrollTransform = Math.max(0, this.scrollTransform - scrollStepInRem);\n      } else {\n        this.scrollTransform = Math.min(widthOfAllItems * 1.05, this.scrollTransform + scrollStepInRem);\n      }\n      items.style.transform = `translateX(${-this.scrollTransform}rem)`;\n    },\n    getStrokeDashoffset(value, requirement) {\n      const procent = value >= requirement ? 100 : value / requirement * 100;\n      return 100 - procent;\n    },\n    selectTask(task) {\n      if (this.listOfSelectedTasks.includes(task)) {\n        this.listOfSelectedTasks = this.listOfSelectedTasks.filter(item => item !== task);\n        return;\n      }\n      if (this.listOfSelectedTasks.length >= 5) {\n        return;\n      }\n      this.listOfSelectedTasks.push(task);\n    },\n    selectTasks() {\n      if (this.listOfSelectedTasks.length < 5) {\n        return;\n      }\n      const listOfTaskType = this.listOfSelectedTasks.map(task => task.taskType);\n      this.isShowListOfTasks = false;\n      this.$callClient(\"C:BattlePass:selectTasks\", listOfTaskType);\n    },\n    updateTaskList() {\n      this.$callClient(\"C:BattlePass:updateTaskList\");\n      this.listOfSelectedTasks = [];\n    },\n    takePrize() {\n      if (this.selectedItem.ObjectType == \"ClothesItemPrize\") {\n        this.selectedItemData.colorId = this.selectedItem.colors[this.colorIndex];\n      }\n      this.$callClient(\"C:BattlePass:Take\", this.selectedItemData);\n      this.selectedItem = null;\n    },\n    sprayPrize() {\n      this.$callClient(\"C:BattlePass:Spray\", this.selectedItemData);\n      this.selectedItem = null;\n    },\n    asidePrize() {\n      if (this.selectedItem.ObjectType == \"ClothesItemPrize\") {\n        this.selectedItemData.colorId = this.selectedItem.colors[this.colorIndex];\n      }\n      this.$callClient(\"C:BattlePass:Aside\", this.selectedItemData);\n      this.selectedItem = null;\n    },\n    takeBigPrize() {\n      this.$callClient(\"C:BattlePass:takeBigPrize\");\n    },\n    getProgressStyle(lvl) {\n      if (lvl > this.battlePassData.currentLevel) {\n        return 0 + \"%\";\n      }\n      if (lvl < this.battlePassData.currentLevel) {\n        return 100 + \"%\";\n      }\n      return this.battlePassData.currentExp / (lvl > 100 ? this.battlePassData.maxExpAfter100 : this.battlePassData.maxExp) * 100 + \"%\";\n    },\n    buyLvl(offer) {\n      const UniversalModalData = {\n        title: this.$t(\"Покупка уровней\"),\n        content: [{\n          type: \"description\",\n          value: this.$t(\"Вы действительно хотите купить уровни?\")\n        }],\n        buttons: {\n          submit: {\n            name: this.$t(\"Да\"),\n            handler: () => {\n              this.$callClient(\"C:BattlePass:BuyLvl\", offer.count);\n            }\n          },\n          cansel: {\n            name: this.$t(\"Отмена\"),\n            handler: () => {}\n          }\n        }\n      };\n      this.$UniversalModal.create(UniversalModalData);\n    },\n    showItemModal(item, isFreeItem, index) {\n      const paramName = isFreeItem ? \"freeItem\" : \"premiumItem\";\n      const prizeItem = index !== undefined ? item[paramName][index] : item[paramName];\n      if (!Object.values(prizeItem).length || prizeItem.status !== \"available\") {\n        return;\n      }\n      const data = {\n        lvl: item.level,\n        isFreeItem\n      };\n      if (index !== undefined) {\n        data.id = index;\n      }\n      this.isShowItemModal = true;\n      this.selectedItemData = data;\n      this.selectedItem = prizeItem;\n    },\n    buyPass() {\n      const UniversalModalData = {\n        title: this.$t(\"Покупка премиум пропуска\"),\n        content: [{\n          type: \"description\",\n          value: this.$t(\"Вы действительно хотите купить премиум пропуск за: <span>750 монет?</span>\")\n        }],\n        buttons: {\n          submit: {\n            name: this.$t(\"Купить\"),\n            handler: () => {\n              this.$callClient(\"C:BattlePass:BuyPremium\");\n            }\n          },\n          cansel: {\n            name: this.$t(\"Отмена\")\n          }\n        }\n      };\n      this.$UniversalModal.create(UniversalModalData);\n    }\n  },\n  beforeUnmount() {\n    window.removeEventListener(\"mousemove\", this.onMoveingScroll);\n    window.removeEventListener(\"mouseup\", this.offMoveScroll);\n  },\n  mounted() {\n    window.addEventListener(\"mousemove\", this.onMoveingScroll);\n    window.addEventListener(\"mouseup\", this.offMoveScroll);\n    this.isShowTaskList = this.battlePassData.selectedTasks.length;\n    this.goToCurrentLvl();\n    // const data = [\n    //   {\n    //     taskName: \"Поработать на лесопилке\",\n    //     reward: \"150\",\n    //     progress: \"10/20\",\n    //   },\n    //   {\n    //     taskName: \"Поработать на лесопилке\",\n    //     reward: \"150\",\n    //     progress: \"10/20\",\n    //   },\n    //   {\n    //     taskName: \"Поработать на лесопилке\",\n    //     reward: \"150\",\n    //     progress: \"10/20\",\n    //   },\n    //   {\n    //     taskName: \"Поработать на лесопилке\",\n    //     reward: \"150\",\n    //     progress: \"10/20\",\n    //   },\n    //   {\n    //     taskName: \"Поработать на лесопилке\",\n    //     reward: \"150\",\n    //     progress: \"10/20\",\n    //   },\n    // ];\n    // setTimeout(() => {\n    //   this.$store.dispatch(\"playerMenu/UpdateBattlePassSelectedTasks\", data);\n    // }, 5000);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}